
CASCADED_GRAD_CNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007158  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b900  08007320  08007320  00017320  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022c20  08022c20  00042e00  2**0
                  CONTENTS
  4 .ARM          00000008  08022c20  08022c20  00032c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022c28  08022c28  00042e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022c28  08022c28  00032c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022c2c  08022c2c  00032c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002e00  20000000  08022c30  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b0c  20002e00  08025a30  00042e00  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a90c  08025a30  0004a90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00042e00  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a469  00000000  00000000  00042e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cea  00000000  00000000  0004d299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0004ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  0004f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002710e  00000000  00000000  0004fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ac7  00000000  00000000  00076c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef219  00000000  00000000  0007f6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  0016e8fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  0016e9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20002e00 	.word	0x20002e00
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007308 	.word	0x08007308

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20002e04 	.word	0x20002e04
 8000204:	08007308 	.word	0x08007308

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SCB_EnableICache+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052a:	f3bf 8f6f 	isb	sy
}
 800052e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SCB_EnableICache+0x48>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SCB_EnableICache+0x48>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
}
 8000540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy
}
 8000546:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SCB_EnableDCache+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <SCB_EnableDCache+0x84>)
 800056e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000572:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0b5b      	lsrs	r3, r3, #13
 8000578:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800057c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000586:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	015a      	lsls	r2, r3, #5
 800058c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000590:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000596:	4911      	ldr	r1, [pc, #68]	; (80005dc <SCB_EnableDCache+0x84>)
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ef      	bne.n	8000588 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	60fa      	str	r2, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1e5      	bne.n	800057e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b2:	f3bf 8f4f 	dsb	sy
}
 80005b6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableDCache+0x84>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableDCache+0x84>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <aiInit>:
ai_buffer *ai_output_23;

ai_buffer *ai_input_all;
ai_buffer *ai_output_all;

int aiInit(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0

  ai_u16 *n_buffer_23;
  ai_u16 *n_buffer_all;

  /* Create and initialize the c-model */
  ai_handle acts_23[] = { activations_23 };
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <aiInit+0x90>)
 80005e8:	607b      	str	r3, [r7, #4]
  ai_handle acts_all[] = { activations_all };
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <aiInit+0x94>)
 80005ec:	603b      	str	r3, [r7, #0]

  err_23 = ai_two_three_create_and_init(&network_23, acts_23, NULL);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4820      	ldr	r0, [pc, #128]	; (8000678 <aiInit+0x98>)
 80005f6:	f002 fba7 	bl	8002d48 <ai_two_three_create_and_init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	60fb      	str	r3, [r7, #12]
  err_all = ai_all_create_and_init(&network_all, acts_all, NULL);
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	481d      	ldr	r0, [pc, #116]	; (800067c <aiInit+0x9c>)
 8000606:	f002 f8f1 	bl	80027ec <ai_all_create_and_init>
 800060a:	4603      	mov	r3, r0
 800060c:	60bb      	str	r3, [r7, #8]

  if ((err_23.type != AI_ERROR_NONE) && (err_all.type != AI_ERROR_NONE)) return 1;
 800060e:	7b3b      	ldrb	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <aiInit+0x3e>
 8000614:	7a3b      	ldrb	r3, [r7, #8]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <aiInit+0x3e>
 800061a:	2301      	movs	r3, #1
 800061c:	e024      	b.n	8000668 <aiInit+0x88>

  /* Reteive pointers to the model's input/output tensors */
  ai_input_23 = ai_two_three_inputs_get(network_23,n_buffer_23);
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <aiInit+0x98>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6979      	ldr	r1, [r7, #20]
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fc03 	bl	8002e30 <ai_two_three_inputs_get>
 800062a:	4603      	mov	r3, r0
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <aiInit+0xa0>)
 800062e:	6013      	str	r3, [r2, #0]
  ai_output_23 = ai_two_three_outputs_get(network_23,n_buffer_23);
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <aiInit+0x98>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6979      	ldr	r1, [r7, #20]
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fc14 	bl	8002e64 <ai_two_three_outputs_get>
 800063c:	4603      	mov	r3, r0
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <aiInit+0xa4>)
 8000640:	6013      	str	r3, [r2, #0]

  ai_input_all = ai_all_inputs_get(network_all,n_buffer_all);
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <aiInit+0x9c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6939      	ldr	r1, [r7, #16]
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f943 	bl	80028d4 <ai_all_inputs_get>
 800064e:	4603      	mov	r3, r0
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <aiInit+0xa8>)
 8000652:	6013      	str	r3, [r2, #0]
  ai_output_all = ai_all_outputs_get(network_all,n_buffer_all);
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <aiInit+0x9c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6939      	ldr	r1, [r7, #16]
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f954 	bl	8002908 <ai_all_outputs_get>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <aiInit+0xac>)
 8000664:	6013      	str	r3, [r2, #0]

  return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20002e48 	.word	0x20002e48
 8000674:	20004848 	.word	0x20004848
 8000678:	20002e40 	.word	0x20002e40
 800067c:	20002e44 	.word	0x20002e44
 8000680:	2000a7e8 	.word	0x2000a7e8
 8000684:	2000a7ec 	.word	0x2000a7ec
 8000688:	2000a7f0 	.word	0x2000a7f0
 800068c:	2000a7f4 	.word	0x2000a7f4

08000690 <aiRun>:


/*
 * Run inference
 */
int aiRun(const void *in_data_23, void *out_data_23, void *in_data_all, void *out_data_all) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]

  ai_error err_23;
  ai_error err_all;

  /* 1 - Update IO handlers with the data payload */
  ai_input_23[0].data = AI_HANDLE_PTR(in_data_23);
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <aiRun+0x8c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	605a      	str	r2, [r3, #4]
  ai_output_23[0].data = AI_HANDLE_PTR(out_data_23);
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <aiRun+0x90>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	605a      	str	r2, [r3, #4]

  ai_input_all[0].data = AI_HANDLE_PTR(in_data_all);
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <aiRun+0x94>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]
  ai_output_all[0].data = AI_HANDLE_PTR(out_data_all);
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <aiRun+0x98>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	605a      	str	r2, [r3, #4]

  /* 2 - Perform the inference */
  n_batch_23 = ai_two_three_run(network_23, &ai_input_23[0], &ai_output_23[0]);
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <aiRun+0x9c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <aiRun+0x8c>)
 80006c4:	6811      	ldr	r1, [r2, #0]
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <aiRun+0x90>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fc20 	bl	8002f10 <ai_two_three_run>
 80006d0:	61f8      	str	r0, [r7, #28]
  n_batch_all = ai_all_run(network_all, &ai_input_all[0], &ai_output_all[0]);
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <aiRun+0xa0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <aiRun+0x94>)
 80006d8:	6811      	ldr	r1, [r2, #0]
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <aiRun+0x98>)
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f968 	bl	80029b4 <ai_all_run>
 80006e4:	61b8      	str	r0, [r7, #24]

  if ((n_batch_23 != 1) && (n_batch_all != 1)) {
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d012      	beq.n	8000712 <aiRun+0x82>
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d00f      	beq.n	8000712 <aiRun+0x82>
      err_23 = ai_two_three_get_error(network_23);
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <aiRun+0x9c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fb04 	bl	8002d04 <ai_two_three_get_error>
 80006fc:	4603      	mov	r3, r0
 80006fe:	617b      	str	r3, [r7, #20]
      err_all = ai_all_get_error(network_all);
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <aiRun+0xa0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f002 f84f 	bl	80027a8 <ai_all_get_error>
 800070a:	4603      	mov	r3, r0
 800070c:	613b      	str	r3, [r7, #16]
      return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <aiRun+0x84>
  }

  return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000a7e8 	.word	0x2000a7e8
 8000720:	2000a7ec 	.word	0x2000a7ec
 8000724:	2000a7f0 	.word	0x2000a7f0
 8000728:	2000a7f4 	.word	0x2000a7f4
 800072c:	20002e40 	.word	0x20002e40
 8000730:	20002e44 	.word	0x20002e44

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800073a:	f7ff fee7 	bl	800050c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800073e:	f7ff ff0b 	bl	8000558 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fe34 	bl	80013ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f863 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f8eb 	bl	8000924 <MX_GPIO_Init>
  MX_CRC_Init();
 800074e:	f000 f8c7 	bl	80008e0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  aiInit();
 8000752:	f7ff ff45 	bl	80005e0 <aiInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (uint32_t i = 0; i < AI_TWO_THREE_IN_1_SIZE; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e016      	b.n	800078a <main+0x56>
	  		    {

	  		      in_data_23[i] = temp[i];
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <main+0xc4>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4925      	ldr	r1, [pc, #148]	; (80007fc <main+0xc8>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	601a      	str	r2, [r3, #0]
	  		      in_data_all[i] = temp[i];
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <main+0xc4>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4921      	ldr	r1, [pc, #132]	; (8000800 <main+0xcc>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_TWO_THREE_IN_1_SIZE; i++)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8000790:	d3e4      	bcc.n	800075c <main+0x28>

	  		    }



	  		int chk = aiRun(in_data_23,out_data_23,in_data_all,out_data_all);
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <main+0xd0>)
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <main+0xcc>)
 8000796:	491c      	ldr	r1, [pc, #112]	; (8000808 <main+0xd4>)
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <main+0xc8>)
 800079a:	f7ff ff79 	bl	8000690 <aiRun>
 800079e:	60b8      	str	r0, [r7, #8]


	  		int y_val_23 = out_data_23[0];
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <main+0xd4>)
 80007a2:	edd3 7a00 	vldr	s15, [r3]
 80007a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007aa:	ee17 3a90 	vmov	r3, s15
 80007ae:	607b      	str	r3, [r7, #4]
	  		int y_val_all = out_data_all[0];
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <main+0xd0>)
 80007b2:	edd3 7a00 	vldr	s15, [r3]
 80007b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ba:	ee17 3a90 	vmov	r3, s15
 80007be:	603b      	str	r3, [r7, #0]


	  		if (chk == 1){
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d107      	bne.n	80007d6 <main+0xa2>
	  			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80007c6:	2102      	movs	r1, #2
 80007c8:	4810      	ldr	r0, [pc, #64]	; (800080c <main+0xd8>)
 80007ca:	f001 fa06 	bl	8001bda <HAL_GPIO_TogglePin>
	  						HAL_Delay(500);
 80007ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d2:	f000 fe49 	bl	8001468 <HAL_Delay>
	  		}

	  		if (y_val_23 == 1) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d107      	bne.n	80007ec <main+0xb8>
	  			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80007dc:	2102      	movs	r1, #2
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <main+0xd8>)
 80007e0:	f001 f9fb 	bl	8001bda <HAL_GPIO_TogglePin>
	  						HAL_Delay(1500);
 80007e4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80007e8:	f000 fe3e 	bl	8001468 <HAL_Delay>
	  		}


	  		HAL_Delay(300);
 80007ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007f0:	f000 fe3a 	bl	8001468 <HAL_Delay>
  {
 80007f4:	e7af      	b.n	8000756 <main+0x22>
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20007c48 	.word	0x20007c48
 8000800:	20009210 	.word	0x20009210
 8000804:	2000a7d0 	.word	0x2000a7d0
 8000808:	20009208 	.word	0x20009208
 800080c:	40022000 	.word	0x40022000

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fc36 	bl	8007090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <SystemClock_Config+0xc8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <SystemClock_Config+0xc8>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <SystemClock_Config+0xc8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <SystemClock_Config+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xcc>)
 8000856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xcc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800087c:	230a      	movs	r3, #10
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000880:	23d2      	movs	r3, #210	; 0xd2
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f001 f9bd 	bl	8001c10 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800089c:	f000 fcd8 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2105      	movs	r1, #5
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fc4a 	bl	8002158 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ca:	f000 fcc1 	bl	8001250 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_CRC_Init+0x3c>)
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <MX_CRC_Init+0x40>)
 80008e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_CRC_Init+0x3c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_CRC_Init+0x3c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_CRC_Init+0x3c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_CRC_Init+0x3c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_CRC_Init+0x3c>)
 8000904:	2201      	movs	r2, #1
 8000906:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_CRC_Init+0x3c>)
 800090a:	f000 feb7 	bl	800167c <HAL_CRC_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000914:	f000 fc9c 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20002e1c 	.word	0x20002e1c
 8000920:	40023000 	.word	0x40023000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b090      	sub	sp, #64	; 0x40
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	4bad      	ldr	r3, [pc, #692]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4aac      	ldr	r2, [pc, #688]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4baa      	ldr	r3, [pc, #680]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000950:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000952:	4ba7      	ldr	r3, [pc, #668]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4aa6      	ldr	r2, [pc, #664]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4ba4      	ldr	r3, [pc, #656]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4ba1      	ldr	r3, [pc, #644]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4aa0      	ldr	r2, [pc, #640]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b9e      	ldr	r3, [pc, #632]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	623b      	str	r3, [r7, #32]
 8000980:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b9b      	ldr	r3, [pc, #620]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a9a      	ldr	r2, [pc, #616]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b98      	ldr	r3, [pc, #608]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b95      	ldr	r3, [pc, #596]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a94      	ldr	r2, [pc, #592]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b92      	ldr	r3, [pc, #584]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b8f      	ldr	r3, [pc, #572]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a8e      	ldr	r2, [pc, #568]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b8c      	ldr	r3, [pc, #560]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009ca:	4b89      	ldr	r3, [pc, #548]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a88      	ldr	r2, [pc, #544]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b86      	ldr	r3, [pc, #536]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009e2:	4b83      	ldr	r3, [pc, #524]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a82      	ldr	r2, [pc, #520]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b80      	ldr	r3, [pc, #512]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009fa:	4b7d      	ldr	r3, [pc, #500]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a7c      	ldr	r2, [pc, #496]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b7a      	ldr	r3, [pc, #488]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	4b77      	ldr	r3, [pc, #476]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a76      	ldr	r2, [pc, #472]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b71      	ldr	r3, [pc, #452]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a70      	ldr	r2, [pc, #448]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b6e      	ldr	r3, [pc, #440]	; (8000bf0 <MX_GPIO_Init+0x2cc>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2120      	movs	r1, #32
 8000a46:	486b      	ldr	r0, [pc, #428]	; (8000bf4 <MX_GPIO_Init+0x2d0>)
 8000a48:	f001 f8ae 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f241 010c 	movw	r1, #4108	; 0x100c
 8000a52:	4869      	ldr	r0, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x2d4>)
 8000a54:	f001 f8a8 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	4867      	ldr	r0, [pc, #412]	; (8000bfc <MX_GPIO_Init+0x2d8>)
 8000a5e:	f001 f8a3 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a68:	4865      	ldr	r0, [pc, #404]	; (8000c00 <MX_GPIO_Init+0x2dc>)
 8000a6a:	f001 f89d 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	21c8      	movs	r1, #200	; 0xc8
 8000a72:	4864      	ldr	r0, [pc, #400]	; (8000c04 <MX_GPIO_Init+0x2e0>)
 8000a74:	f001 f898 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a88:	230e      	movs	r3, #14
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	485d      	ldr	r0, [pc, #372]	; (8000c08 <MX_GPIO_Init+0x2e4>)
 8000a94:	f000 fedc 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4857      	ldr	r0, [pc, #348]	; (8000c08 <MX_GPIO_Init+0x2e4>)
 8000aac:	f000 fed0 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ac0:	2309      	movs	r3, #9
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	484f      	ldr	r0, [pc, #316]	; (8000c08 <MX_GPIO_Init+0x2e4>)
 8000acc:	f000 fec0 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000ad0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae2:	230b      	movs	r3, #11
 8000ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aea:	4619      	mov	r1, r3
 8000aec:	4845      	ldr	r0, [pc, #276]	; (8000c04 <MX_GPIO_Init+0x2e0>)
 8000aee:	f000 feaf 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000af2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b04:	230c      	movs	r3, #12
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483e      	ldr	r0, [pc, #248]	; (8000c08 <MX_GPIO_Init+0x2e4>)
 8000b10:	f000 fe9e 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1a:	2312      	movs	r3, #18
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b26:	2304      	movs	r3, #4
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4836      	ldr	r0, [pc, #216]	; (8000c0c <MX_GPIO_Init+0x2e8>)
 8000b32:	f000 fe8d 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b36:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <MX_GPIO_Init+0x2e8>)
 8000b54:	f000 fe7c 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b70:	4619      	mov	r1, r3
 8000b72:	4826      	ldr	r0, [pc, #152]	; (8000c0c <MX_GPIO_Init+0x2e8>)
 8000b74:	f000 fe6c 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b90:	4619      	mov	r1, r3
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_GPIO_Init+0x2d0>)
 8000b94:	f000 fe5c 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000b98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000baa:	230c      	movs	r3, #12
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <MX_GPIO_Init+0x2ec>)
 8000bb6:	f000 fe4b 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480f      	ldr	r0, [pc, #60]	; (8000c14 <MX_GPIO_Init+0x2f0>)
 8000bd8:	f000 fe3a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000bdc:	2360      	movs	r3, #96	; 0x60
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bec:	230d      	movs	r3, #13
 8000bee:	e013      	b.n	8000c18 <MX_GPIO_Init+0x2f4>
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	40022000 	.word	0x40022000
 8000bfc:	40022800 	.word	0x40022800
 8000c00:	40021c00 	.word	0x40021c00
 8000c04:	40021800 	.word	0x40021800
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	40020800 	.word	0x40020800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	48bb      	ldr	r0, [pc, #748]	; (8000f10 <MX_GPIO_Init+0x5ec>)
 8000c22:	f000 fe15 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c36:	2307      	movs	r3, #7
 8000c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	48b4      	ldr	r0, [pc, #720]	; (8000f14 <MX_GPIO_Init+0x5f0>)
 8000c42:	f000 fe05 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c56:	230a      	movs	r3, #10
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	48ac      	ldr	r0, [pc, #688]	; (8000f14 <MX_GPIO_Init+0x5f0>)
 8000c62:	f000 fdf5 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c66:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c78:	230c      	movs	r3, #12
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	4619      	mov	r1, r3
 8000c82:	48a5      	ldr	r0, [pc, #660]	; (8000f18 <MX_GPIO_Init+0x5f4>)
 8000c84:	f000 fde4 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000c88:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c9a:	230e      	movs	r3, #14
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	489d      	ldr	r0, [pc, #628]	; (8000f1c <MX_GPIO_Init+0x5f8>)
 8000ca6:	f000 fdd3 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4897      	ldr	r0, [pc, #604]	; (8000f1c <MX_GPIO_Init+0x5f8>)
 8000cc0:	f000 fdc6 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4891      	ldr	r0, [pc, #580]	; (8000f20 <MX_GPIO_Init+0x5fc>)
 8000cda:	f000 fdb9 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000cde:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4889      	ldr	r0, [pc, #548]	; (8000f20 <MX_GPIO_Init+0x5fc>)
 8000cfc:	f000 fda8 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000d00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d12:	230a      	movs	r3, #10
 8000d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4881      	ldr	r0, [pc, #516]	; (8000f24 <MX_GPIO_Init+0x600>)
 8000d1e:	f000 fd97 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000d22:	23f0      	movs	r3, #240	; 0xf0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d32:	230a      	movs	r3, #10
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	487a      	ldr	r0, [pc, #488]	; (8000f28 <MX_GPIO_Init+0x604>)
 8000d3e:	f000 fd87 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000d42:	23f7      	movs	r3, #247	; 0xf7
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d52:	230e      	movs	r3, #14
 8000d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4873      	ldr	r0, [pc, #460]	; (8000f2c <MX_GPIO_Init+0x608>)
 8000d5e:	f000 fd77 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d74:	2309      	movs	r3, #9
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4866      	ldr	r0, [pc, #408]	; (8000f18 <MX_GPIO_Init+0x5f4>)
 8000d80:	f000 fd66 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d96:	230a      	movs	r3, #10
 8000d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	485d      	ldr	r0, [pc, #372]	; (8000f18 <MX_GPIO_Init+0x5f4>)
 8000da2:	f000 fd55 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000da6:	2320      	movs	r3, #32
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4858      	ldr	r0, [pc, #352]	; (8000f20 <MX_GPIO_Init+0x5fc>)
 8000dbe:	f000 fd47 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dd2:	230d      	movs	r3, #13
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4850      	ldr	r0, [pc, #320]	; (8000f20 <MX_GPIO_Init+0x5fc>)
 8000dde:	f000 fd37 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000de2:	f241 030c 	movw	r3, #4108	; 0x100c
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	484b      	ldr	r0, [pc, #300]	; (8000f28 <MX_GPIO_Init+0x604>)
 8000dfc:	f000 fd28 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	4846      	ldr	r0, [pc, #280]	; (8000f30 <MX_GPIO_Init+0x60c>)
 8000e16:	f000 fd1b 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e1a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e34:	4619      	mov	r1, r3
 8000e36:	483f      	ldr	r0, [pc, #252]	; (8000f34 <MX_GPIO_Init+0x610>)
 8000e38:	f000 fd0a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000e3c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e4e:	230e      	movs	r3, #14
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4833      	ldr	r0, [pc, #204]	; (8000f28 <MX_GPIO_Init+0x604>)
 8000e5a:	f000 fcf9 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	482d      	ldr	r0, [pc, #180]	; (8000f2c <MX_GPIO_Init+0x608>)
 8000e76:	f000 fceb 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e8c:	230d      	movs	r3, #13
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	4820      	ldr	r0, [pc, #128]	; (8000f18 <MX_GPIO_Init+0x5f4>)
 8000e98:	f000 fcda 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	481c      	ldr	r0, [pc, #112]	; (8000f20 <MX_GPIO_Init+0x5fc>)
 8000eb0:	f000 fcce 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_GPIO_Init+0x5fc>)
 8000ed0:	f000 fcbe 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ed4:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_GPIO_Init+0x614>)
 8000eea:	f000 fcb1 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efe:	2305      	movs	r3, #5
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_GPIO_Init+0x604>)
 8000f0a:	f000 fca1 	bl	8001850 <HAL_GPIO_Init>
 8000f0e:	e015      	b.n	8000f3c <MX_GPIO_Init+0x618>
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40021800 	.word	0x40021800
 8000f1c:	40022400 	.word	0x40022400
 8000f20:	40020c00 	.word	0x40020c00
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40022000 	.word	0x40022000
 8000f2c:	40022800 	.word	0x40022800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	48b6      	ldr	r0, [pc, #728]	; (8001230 <MX_GPIO_Init+0x90c>)
 8000f56:	f000 fc7b 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f5a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f6c:	230d      	movs	r3, #13
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f74:	4619      	mov	r1, r3
 8000f76:	48ae      	ldr	r0, [pc, #696]	; (8001230 <MX_GPIO_Init+0x90c>)
 8000f78:	f000 fc6a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f94:	4619      	mov	r1, r3
 8000f96:	48a7      	ldr	r0, [pc, #668]	; (8001234 <MX_GPIO_Init+0x910>)
 8000f98:	f000 fc5a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	489f      	ldr	r0, [pc, #636]	; (8001238 <MX_GPIO_Init+0x914>)
 8000fba:	f000 fc49 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4897      	ldr	r0, [pc, #604]	; (8001238 <MX_GPIO_Init+0x914>)
 8000fdc:	f000 fc38 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	488f      	ldr	r0, [pc, #572]	; (8001234 <MX_GPIO_Init+0x910>)
 8000ff8:	f000 fc2a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000ffc:	23c0      	movs	r3, #192	; 0xc0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800100c:	2308      	movs	r3, #8
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4889      	ldr	r0, [pc, #548]	; (800123c <MX_GPIO_Init+0x918>)
 8001018:	f000 fc1a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800101c:	2310      	movs	r3, #16
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800102c:	230a      	movs	r3, #10
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	487e      	ldr	r0, [pc, #504]	; (8001230 <MX_GPIO_Init+0x90c>)
 8001038:	f000 fc0a 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800103c:	2328      	movs	r3, #40	; 0x28
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800104c:	230c      	movs	r3, #12
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	4876      	ldr	r0, [pc, #472]	; (8001230 <MX_GPIO_Init+0x90c>)
 8001058:	f000 fbfa 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800105c:	23c8      	movs	r3, #200	; 0xc8
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	4873      	ldr	r0, [pc, #460]	; (8001240 <MX_GPIO_Init+0x91c>)
 8001074:	f000 fbec 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001078:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	486d      	ldr	r0, [pc, #436]	; (8001244 <MX_GPIO_Init+0x920>)
 800108e:	f000 fbdf 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001092:	2308      	movs	r3, #8
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a2:	230c      	movs	r3, #12
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	4863      	ldr	r0, [pc, #396]	; (800123c <MX_GPIO_Init+0x918>)
 80010ae:	f000 fbcf 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010b2:	2305      	movs	r3, #5
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010c2:	230a      	movs	r3, #10
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ca:	4619      	mov	r1, r3
 80010cc:	485b      	ldr	r0, [pc, #364]	; (800123c <MX_GPIO_Init+0x918>)
 80010ce:	f000 fbbf 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010d2:	2332      	movs	r3, #50	; 0x32
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e2:	230b      	movs	r3, #11
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4853      	ldr	r0, [pc, #332]	; (800123c <MX_GPIO_Init+0x918>)
 80010ee:	f000 fbaf 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001102:	2309      	movs	r3, #9
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	484e      	ldr	r0, [pc, #312]	; (8001248 <MX_GPIO_Init+0x924>)
 800110e:	f000 fb9f 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001112:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001124:	2309      	movs	r3, #9
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	4847      	ldr	r0, [pc, #284]	; (800124c <MX_GPIO_Init+0x928>)
 8001130:	f000 fb8e 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001134:	2304      	movs	r3, #4
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	483e      	ldr	r0, [pc, #248]	; (8001240 <MX_GPIO_Init+0x91c>)
 8001148:	f000 fb82 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800114c:	2386      	movs	r3, #134	; 0x86
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115c:	230b      	movs	r3, #11
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	4834      	ldr	r0, [pc, #208]	; (8001238 <MX_GPIO_Init+0x914>)
 8001168:	f000 fb72 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800116c:	2301      	movs	r3, #1
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001170:	2303      	movs	r3, #3
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	482e      	ldr	r0, [pc, #184]	; (8001238 <MX_GPIO_Init+0x914>)
 8001180:	f000 fb66 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001184:	2350      	movs	r3, #80	; 0x50
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001194:	230d      	movs	r3, #13
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4826      	ldr	r0, [pc, #152]	; (8001238 <MX_GPIO_Init+0x914>)
 80011a0:	f000 fb56 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80011a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011b6:	2304      	movs	r3, #4
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	481b      	ldr	r0, [pc, #108]	; (8001230 <MX_GPIO_Init+0x90c>)
 80011c2:	f000 fb45 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80011c6:	2328      	movs	r3, #40	; 0x28
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011d6:	230a      	movs	r3, #10
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011de:	4619      	mov	r1, r3
 80011e0:	4815      	ldr	r0, [pc, #84]	; (8001238 <MX_GPIO_Init+0x914>)
 80011e2:	f000 fb35 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80011e6:	2340      	movs	r3, #64	; 0x40
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011f6:	2309      	movs	r3, #9
 80011f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_GPIO_Init+0x90c>)
 8001202:	f000 fb25 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001206:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001218:	2305      	movs	r3, #5
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_GPIO_Init+0x924>)
 8001224:	f000 fb14 	bl	8001850 <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3740      	adds	r7, #64	; 0x40
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40022000 	.word	0x40022000
 8001238:	40020000 	.word	0x40020000
 800123c:	40020800 	.word	0x40020800
 8001240:	40021800 	.word	0x40021800
 8001244:	40021400 	.word	0x40021400
 8001248:	40020400 	.word	0x40020400
 800124c:	40020c00 	.word	0x40020c00

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x44>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_MspInit+0x44>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x44>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x44>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x44>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x44>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_CRC_MspInit+0x38>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10b      	bne.n	80012ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_CRC_MspInit+0x3c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_CRC_MspInit+0x3c>)
 80012bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_CRC_MspInit+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023000 	.word	0x40023000
 80012e0:	40023800 	.word	0x40023800

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 f87a 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001386:	f7ff ffd7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f005 fe4f 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f9d1 	bl	8000734 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001394:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20002e00 	.word	0x20002e00
  ldr r2, =_sidata
 80013a0:	08022c30 	.word	0x08022c30
  ldr r2, =_sbss
 80013a4:	20002e00 	.word	0x20002e00
  ldr r4, =_ebss
 80013a8:	2000a90c 	.word	0x2000a90c

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>

080013ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f92e 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f805 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013be:	f7ff ff4d 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f93b 	bl	8001662 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f911 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200015c0 	.word	0x200015c0
 8001420:	200015c8 	.word	0x200015c8
 8001424:	200015c4 	.word	0x200015c4

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	200015c8 	.word	0x200015c8
 800144c:	2000a7f8 	.word	0x2000a7f8

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000a7f8 	.word	0x2000a7f8

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200015c8 	.word	0x200015c8

080014b0 <__NVIC_SetPriorityGrouping>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	05fa0000 	.word	0x05fa0000

080014f8 <__NVIC_GetPriorityGrouping>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_SetPriority>:
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff47 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff5c 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffb0 	bl	80015d0 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e054      	b.n	8001738 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7f5b      	ldrb	r3, [r3, #29]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fe00 	bl	80012a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_CRC_Init+0xc4>)
 80016b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0218 	bic.w	r2, r2, #24
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	e00c      	b.n	80016e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	461a      	mov	r2, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f834 	bl	8001744 <HAL_CRCEx_Polynomial_Set>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e028      	b.n	8001738 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	795b      	ldrb	r3, [r3, #5]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 32ff 	mov.w	r2, #4294967295
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	e004      	b.n	8001704 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6912      	ldr	r2, [r2, #16]
 8001702:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	04c11db7 	.word	0x04c11db7

08001744 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001754:	231f      	movs	r3, #31
 8001756:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001758:	bf00      	nop
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	613a      	str	r2, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <HAL_CRCEx_Polynomial_Set+0x34>
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b18      	cmp	r3, #24
 800177c:	d846      	bhi.n	800180c <HAL_CRCEx_Polynomial_Set+0xc8>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001813 	.word	0x08001813
 8001788:	0800180d 	.word	0x0800180d
 800178c:	0800180d 	.word	0x0800180d
 8001790:	0800180d 	.word	0x0800180d
 8001794:	0800180d 	.word	0x0800180d
 8001798:	0800180d 	.word	0x0800180d
 800179c:	0800180d 	.word	0x0800180d
 80017a0:	0800180d 	.word	0x0800180d
 80017a4:	08001801 	.word	0x08001801
 80017a8:	0800180d 	.word	0x0800180d
 80017ac:	0800180d 	.word	0x0800180d
 80017b0:	0800180d 	.word	0x0800180d
 80017b4:	0800180d 	.word	0x0800180d
 80017b8:	0800180d 	.word	0x0800180d
 80017bc:	0800180d 	.word	0x0800180d
 80017c0:	0800180d 	.word	0x0800180d
 80017c4:	080017f5 	.word	0x080017f5
 80017c8:	0800180d 	.word	0x0800180d
 80017cc:	0800180d 	.word	0x0800180d
 80017d0:	0800180d 	.word	0x0800180d
 80017d4:	0800180d 	.word	0x0800180d
 80017d8:	0800180d 	.word	0x0800180d
 80017dc:	0800180d 	.word	0x0800180d
 80017e0:	0800180d 	.word	0x0800180d
 80017e4:	080017e9 	.word	0x080017e9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d913      	bls.n	8001816 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80017f2:	e010      	b.n	8001816 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b07      	cmp	r3, #7
 80017f8:	d90f      	bls.n	800181a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80017fe:	e00c      	b.n	800181a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	d90b      	bls.n	800181e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800180a:	e008      	b.n	800181e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	75fb      	strb	r3, [r7, #23]
      break;
 8001810:	e006      	b.n	8001820 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001812:	bf00      	nop
 8001814:	e004      	b.n	8001820 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001816:	bf00      	nop
 8001818:	e002      	b.n	8001820 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800181a:	bf00      	nop
 800181c:	e000      	b.n	8001820 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800181e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10d      	bne.n	8001842 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 0118 	bic.w	r1, r3, #24
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e175      	b.n	8001b5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8164 	bne.w	8001b56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <HAL_GPIO_Init+0x56>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b03      	cmp	r3, #3
 8001912:	d017      	beq.n	8001944 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80be 	beq.w	8001b56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_GPIO_Init+0x324>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_GPIO_Init+0x324>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_GPIO_Init+0x324>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019f2:	4a61      	ldr	r2, [pc, #388]	; (8001b78 <HAL_GPIO_Init+0x328>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d037      	beq.n	8001a8e <HAL_GPIO_Init+0x23e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a57      	ldr	r2, [pc, #348]	; (8001b80 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_GPIO_Init+0x23a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x236>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x232>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x22e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x22a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x226>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x222>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x21e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4f      	ldr	r2, [pc, #316]	; (8001ba0 <HAL_GPIO_Init+0x350>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x21a>
 8001a66:	2309      	movs	r3, #9
 8001a68:	e012      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	e010      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x328>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae86 	bls.w	8001870 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40022400 	.word	0x40022400
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bec:	887a      	ldrh	r2, [r7, #2]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e291      	b.n	800214a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8087 	beq.w	8001d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4b96      	ldr	r3, [pc, #600]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c40:	4b93      	ldr	r3, [pc, #588]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d112      	bne.n	8001c72 <HAL_RCC_OscConfig+0x62>
 8001c4c:	4b90      	ldr	r3, [pc, #576]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b8d      	ldr	r3, [pc, #564]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x130>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d168      	bne.n	8001d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e26b      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x7a>
 8001c7c:	4b84      	ldr	r3, [pc, #528]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a83      	ldr	r2, [pc, #524]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x9c>
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7b      	ldr	r2, [pc, #492]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xc0>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd8>
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6b      	ldr	r2, [pc, #428]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fbae 	bl	8001450 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fbaa 	bl	8001450 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e21f      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe8>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb9a 	bl	8001450 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fb96 	bl	8001450 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e20b      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x110>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d069      	beq.n	8001e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4e:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5a:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d11c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x190>
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d116      	bne.n	8001da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x17a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e1df      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	493d      	ldr	r1, [pc, #244]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	e040      	b.n	8001e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff fb4c 	bl	8001450 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fb48 	bl	8001450 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1bd      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4929      	ldr	r1, [pc, #164]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
 8001dee:	e018      	b.n	8001e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fb28 	bl	8001450 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fb24 	bl	8001450 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e199      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d038      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff fb05 	bl	8001450 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fb01 	bl	8001450 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e176      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x23a>
 8001e68:	e01a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff faeb 	bl	8001450 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fae7 	bl	8001450 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d903      	bls.n	8001e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e15c      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
 8001e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b91      	ldr	r3, [pc, #580]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a4 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b8b      	ldr	r3, [pc, #556]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a87      	ldr	r2, [pc, #540]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <HAL_RCC_OscConfig+0x4d0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x4d0>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff faaf 	bl	8001450 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff faab 	bl	8001450 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e120      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	4b75      	ldr	r3, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x4d0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x31a>
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e02d      	b.n	8001f86 <HAL_RCC_OscConfig+0x376>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x33c>
 8001f32:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a69      	ldr	r2, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a66      	ldr	r2, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x376>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x35e>
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a60      	ldr	r2, [pc, #384]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x376>
 8001f6e:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a5a      	ldr	r2, [pc, #360]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a57      	ldr	r2, [pc, #348]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fa5f 	bl	8001450 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fa5b 	bl	8001450 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0ce      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x386>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7ff fa49 	bl	8001450 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fa45 	bl	8001450 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0b8      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80a4 	beq.w	8002148 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d06b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d149      	bne.n	80020a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800201a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff fa16 	bl	8001450 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff fa12 	bl	8001450 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e087      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	4313      	orrs	r3, r2
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800206e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002072:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f9e6 	bl	8001450 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff f9e2 	bl	8001450 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e057      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x478>
 80020a6:	e04f      	b.n	8002148 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff f9cc 	bl	8001450 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7ff f9c8 	bl	8001450 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e03d      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x4ac>
 80020da:	e035      	b.n	8002148 <HAL_RCC_OscConfig+0x538>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x544>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d028      	beq.n	8002144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d121      	bne.n	8002144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800211a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800211c:	4293      	cmp	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	3b01      	subs	r3, #1
 800212e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d0      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 020f 	bic.w	r2, r3, #15
 8002186:	4965      	ldr	r1, [pc, #404]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b63      	ldr	r3, [pc, #396]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b8      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a58      	ldr	r2, [pc, #352]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80021d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	494d      	ldr	r1, [pc, #308]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d040      	beq.n	800227c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07f      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e073      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06b      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4936      	ldr	r1, [pc, #216]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7ff f900 	bl	8001450 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff f8fc 	bl	8001450 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e053      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d210      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 020f 	bic.w	r2, r3, #15
 8002292:	4922      	ldr	r1, [pc, #136]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e032      	b.n	8002312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4916      	ldr	r1, [pc, #88]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f821 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	490a      	ldr	r1, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x1cc>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1d0>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f85c 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00
 8002320:	40023800 	.word	0x40023800
 8002324:	08007384 	.word	0x08007384
 8002328:	200015c0 	.word	0x200015c0
 800232c:	200015c4 	.word	0x200015c4

08002330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002334:	b090      	sub	sp, #64	; 0x40
 8002336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
 800233c:	2300      	movs	r3, #0
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d00d      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x40>
 8002354:	2b08      	cmp	r3, #8
 8002356:	f200 80a1 	bhi.w	800249c <HAL_RCC_GetSysClockFreq+0x16c>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x34>
 800235e:	2b04      	cmp	r3, #4
 8002360:	d003      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x3a>
 8002362:	e09b      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002368:	e09b      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800236c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800236e:	e098      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d028      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	099b      	lsrs	r3, r3, #6
 800238c:	2200      	movs	r2, #0
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	627a      	str	r2, [r7, #36]	; 0x24
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002398:	2100      	movs	r1, #0
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800239c:	fb03 f201 	mul.w	r2, r3, r1
 80023a0:	2300      	movs	r3, #0
 80023a2:	fb00 f303 	mul.w	r3, r0, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	4a43      	ldr	r2, [pc, #268]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023aa:	fba0 1202 	umull	r1, r2, r0, r2
 80023ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023b0:	460a      	mov	r2, r1
 80023b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80023b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b6:	4413      	add	r3, r2
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	2200      	movs	r2, #0
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	61fa      	str	r2, [r7, #28]
 80023c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023ca:	f7fd ff1d 	bl	8000208 <__aeabi_uldivmod>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4613      	mov	r3, r2
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d6:	e053      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d8:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	2200      	movs	r2, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	617a      	str	r2, [r7, #20]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ea:	f04f 0b00 	mov.w	fp, #0
 80023ee:	4652      	mov	r2, sl
 80023f0:	465b      	mov	r3, fp
 80023f2:	f04f 0000 	mov.w	r0, #0
 80023f6:	f04f 0100 	mov.w	r1, #0
 80023fa:	0159      	lsls	r1, r3, #5
 80023fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002400:	0150      	lsls	r0, r2, #5
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	ebb2 080a 	subs.w	r8, r2, sl
 800240a:	eb63 090b 	sbc.w	r9, r3, fp
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800241a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800241e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002422:	ebb2 0408 	subs.w	r4, r2, r8
 8002426:	eb63 0509 	sbc.w	r5, r3, r9
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	00eb      	lsls	r3, r5, #3
 8002434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002438:	00e2      	lsls	r2, r4, #3
 800243a:	4614      	mov	r4, r2
 800243c:	461d      	mov	r5, r3
 800243e:	eb14 030a 	adds.w	r3, r4, sl
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	eb45 030b 	adc.w	r3, r5, fp
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002456:	4629      	mov	r1, r5
 8002458:	028b      	lsls	r3, r1, #10
 800245a:	4621      	mov	r1, r4
 800245c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002460:	4621      	mov	r1, r4
 8002462:	028a      	lsls	r2, r1, #10
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	2200      	movs	r2, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	60fa      	str	r2, [r7, #12]
 8002470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002474:	f7fd fec8 	bl	8000208 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4613      	mov	r3, r2
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3740      	adds	r7, #64	; 0x40
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	017d7840 	.word	0x017d7840

080024bc <all_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool all_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fdfa 	bl	80030cc <ai_platform_get_activations_map>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d04b      	beq.n	8002576 <all_configure_activations+0xba>
    /* Updating activations (byte) offsets */
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <all_configure_activations+0xd0>)
 80024e2:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a29      	ldr	r2, [pc, #164]	; (800258c <all_configure_activations+0xd0>)
 80024e8:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 2048);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <all_configure_activations+0xd4>)
 80024f2:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 2048);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <all_configure_activations+0xd4>)
 80024fc:	60d3      	str	r3, [r2, #12]
    eltwise_3_output_array.data = AI_PTR(activations_map[0] + 2048);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <all_configure_activations+0xd8>)
 8002506:	6093      	str	r3, [r2, #8]
    eltwise_3_output_array.data_start = AI_PTR(activations_map[0] + 2048);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <all_configure_activations+0xd8>)
 8002510:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <all_configure_activations+0xdc>)
 8002516:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <all_configure_activations+0xdc>)
 800251c:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 512);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <all_configure_activations+0xe0>)
 8002526:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations_map[0] + 512);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <all_configure_activations+0xe0>)
 8002530:	60d3      	str	r3, [r2, #12]
    eltwise_7_output_array.data = AI_PTR(activations_map[0] + 1280);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <all_configure_activations+0xe4>)
 800253a:	6093      	str	r3, [r2, #8]
    eltwise_7_output_array.data_start = AI_PTR(activations_map[0] + 1280);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <all_configure_activations+0xe4>)
 8002544:	60d3      	str	r3, [r2, #12]
    dense_9_output_array.data = AI_PTR(activations_map[0] + 0);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <all_configure_activations+0xe8>)
 800254a:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <all_configure_activations+0xe8>)
 8002550:	60d3      	str	r3, [r2, #12]
    nl_9_nl_output_array.data = AI_PTR(activations_map[0] + 256);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002558:	4a13      	ldr	r2, [pc, #76]	; (80025a8 <all_configure_activations+0xec>)
 800255a:	6093      	str	r3, [r2, #8]
    nl_9_nl_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <all_configure_activations+0xec>)
 8002564:	60d3      	str	r3, [r2, #12]
    dense_10_output_array.data = AI_PTR(activations_map[0] + 0);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a10      	ldr	r2, [pc, #64]	; (80025ac <all_configure_activations+0xf0>)
 800256a:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <all_configure_activations+0xf0>)
 8002570:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002572:	2301      	movs	r3, #1
 8002574:	e005      	b.n	8002582 <all_configure_activations+0xc6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002576:	2213      	movs	r2, #19
 8002578:	2130      	movs	r1, #48	; 0x30
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 ff10 	bl	80033a0 <ai_platform_network_set_error>
  return false;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000171c 	.word	0x2000171c
 8002590:	200015dc 	.word	0x200015dc
 8002594:	200015ec 	.word	0x200015ec
 8002598:	2000172c 	.word	0x2000172c
 800259c:	200015fc 	.word	0x200015fc
 80025a0:	2000160c 	.word	0x2000160c
 80025a4:	2000161c 	.word	0x2000161c
 80025a8:	2000162c 	.word	0x2000162c
 80025ac:	2000163c 	.word	0x2000163c

080025b0 <all_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool all_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fd2a 	bl	8003020 <ai_platform_get_weights_map>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80c2 	beq.w	8002758 <all_configure_weights+0x1a8>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80025d4:	4b65      	ldr	r3, [pc, #404]	; (800276c <all_configure_weights+0x1bc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025dc:	4a63      	ldr	r2, [pc, #396]	; (800276c <all_configure_weights+0x1bc>)
 80025de:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a62      	ldr	r2, [pc, #392]	; (800276c <all_configure_weights+0x1bc>)
 80025e4:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a60      	ldr	r2, [pc, #384]	; (800276c <all_configure_weights+0x1bc>)
 80025ea:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80025ec:	4b60      	ldr	r3, [pc, #384]	; (8002770 <all_configure_weights+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025f4:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <all_configure_weights+0x1c0>)
 80025f6:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 1152);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80025fe:	4a5c      	ldr	r2, [pc, #368]	; (8002770 <all_configure_weights+0x1c0>)
 8002600:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 1152);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002608:	4a59      	ldr	r2, [pc, #356]	; (8002770 <all_configure_weights+0x1c0>)
 800260a:	60d3      	str	r3, [r2, #12]
    eltwise_3_scale_array.format |= AI_FMT_FLAG_CONST;
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <all_configure_weights+0x1c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002614:	4a57      	ldr	r2, [pc, #348]	; (8002774 <all_configure_weights+0x1c4>)
 8002616:	6013      	str	r3, [r2, #0]
    eltwise_3_scale_array.data = AI_PTR(weights_map[0] + 1280);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	4a55      	ldr	r2, [pc, #340]	; (8002774 <all_configure_weights+0x1c4>)
 8002620:	6093      	str	r3, [r2, #8]
    eltwise_3_scale_array.data_start = AI_PTR(weights_map[0] + 1280);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <all_configure_weights+0x1c4>)
 800262a:	60d3      	str	r3, [r2, #12]
    eltwise_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800262c:	4b52      	ldr	r3, [pc, #328]	; (8002778 <all_configure_weights+0x1c8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002634:	4a50      	ldr	r2, [pc, #320]	; (8002778 <all_configure_weights+0x1c8>)
 8002636:	6013      	str	r3, [r2, #0]
    eltwise_3_bias_array.data = AI_PTR(weights_map[0] + 1408);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800263e:	4a4e      	ldr	r2, [pc, #312]	; (8002778 <all_configure_weights+0x1c8>)
 8002640:	6093      	str	r3, [r2, #8]
    eltwise_3_bias_array.data_start = AI_PTR(weights_map[0] + 1408);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002648:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <all_configure_weights+0x1c8>)
 800264a:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800264c:	4b4b      	ldr	r3, [pc, #300]	; (800277c <all_configure_weights+0x1cc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002654:	4a49      	ldr	r2, [pc, #292]	; (800277c <all_configure_weights+0x1cc>)
 8002656:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 1536);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800265e:	4a47      	ldr	r2, [pc, #284]	; (800277c <all_configure_weights+0x1cc>)
 8002660:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 1536);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002668:	4a44      	ldr	r2, [pc, #272]	; (800277c <all_configure_weights+0x1cc>)
 800266a:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800266c:	4b44      	ldr	r3, [pc, #272]	; (8002780 <all_configure_weights+0x1d0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002674:	4a42      	ldr	r2, [pc, #264]	; (8002780 <all_configure_weights+0x1d0>)
 8002676:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 38400);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 800267e:	4a40      	ldr	r2, [pc, #256]	; (8002780 <all_configure_weights+0x1d0>)
 8002680:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 38400);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8002688:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <all_configure_weights+0x1d0>)
 800268a:	60d3      	str	r3, [r2, #12]
    eltwise_7_scale_array.format |= AI_FMT_FLAG_CONST;
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <all_configure_weights+0x1d4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <all_configure_weights+0x1d4>)
 8002696:	6013      	str	r3, [r2, #0]
    eltwise_7_scale_array.data = AI_PTR(weights_map[0] + 38528);
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	f249 6380 	movw	r3, #38528	; 0x9680
 800269e:	4413      	add	r3, r2
 80026a0:	4a38      	ldr	r2, [pc, #224]	; (8002784 <all_configure_weights+0x1d4>)
 80026a2:	6093      	str	r3, [r2, #8]
    eltwise_7_scale_array.data_start = AI_PTR(weights_map[0] + 38528);
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	f249 6380 	movw	r3, #38528	; 0x9680
 80026aa:	4413      	add	r3, r2
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <all_configure_weights+0x1d4>)
 80026ae:	60d3      	str	r3, [r2, #12]
    eltwise_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <all_configure_weights+0x1d8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026b8:	4a33      	ldr	r2, [pc, #204]	; (8002788 <all_configure_weights+0x1d8>)
 80026ba:	6013      	str	r3, [r2, #0]
    eltwise_7_bias_array.data = AI_PTR(weights_map[0] + 38656);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f503 4317 	add.w	r3, r3, #38656	; 0x9700
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <all_configure_weights+0x1d8>)
 80026c4:	6093      	str	r3, [r2, #8]
    eltwise_7_bias_array.data_start = AI_PTR(weights_map[0] + 38656);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f503 4317 	add.w	r3, r3, #38656	; 0x9700
 80026cc:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <all_configure_weights+0x1d8>)
 80026ce:	60d3      	str	r3, [r2, #12]
    dense_9_weights_array.format |= AI_FMT_FLAG_CONST;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <all_configure_weights+0x1dc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026d8:	4a2c      	ldr	r2, [pc, #176]	; (800278c <all_configure_weights+0x1dc>)
 80026da:	6013      	str	r3, [r2, #0]
    dense_9_weights_array.data = AI_PTR(weights_map[0] + 38784);
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	f249 7380 	movw	r3, #38784	; 0x9780
 80026e2:	4413      	add	r3, r2
 80026e4:	4a29      	ldr	r2, [pc, #164]	; (800278c <all_configure_weights+0x1dc>)
 80026e6:	6093      	str	r3, [r2, #8]
    dense_9_weights_array.data_start = AI_PTR(weights_map[0] + 38784);
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	f249 7380 	movw	r3, #38784	; 0x9780
 80026ee:	4413      	add	r3, r2
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <all_configure_weights+0x1dc>)
 80026f2:	60d3      	str	r3, [r2, #12]
    dense_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80026f4:	4b26      	ldr	r3, [pc, #152]	; (8002790 <all_configure_weights+0x1e0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <all_configure_weights+0x1e0>)
 80026fe:	6013      	str	r3, [r2, #0]
    dense_9_bias_array.data = AI_PTR(weights_map[0] + 87936);
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <all_configure_weights+0x1e4>)
 8002704:	4413      	add	r3, r2
 8002706:	4a22      	ldr	r2, [pc, #136]	; (8002790 <all_configure_weights+0x1e0>)
 8002708:	6093      	str	r3, [r2, #8]
    dense_9_bias_array.data_start = AI_PTR(weights_map[0] + 87936);
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <all_configure_weights+0x1e4>)
 800270e:	4413      	add	r3, r2
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <all_configure_weights+0x1e0>)
 8002712:	60d3      	str	r3, [r2, #12]
    dense_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <all_configure_weights+0x1e8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <all_configure_weights+0x1e8>)
 800271e:	6013      	str	r3, [r2, #0]
    dense_10_weights_array.data = AI_PTR(weights_map[0] + 88192);
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <all_configure_weights+0x1ec>)
 8002724:	4413      	add	r3, r2
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <all_configure_weights+0x1e8>)
 8002728:	6093      	str	r3, [r2, #8]
    dense_10_weights_array.data_start = AI_PTR(weights_map[0] + 88192);
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <all_configure_weights+0x1ec>)
 800272e:	4413      	add	r3, r2
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <all_configure_weights+0x1e8>)
 8002732:	60d3      	str	r3, [r2, #12]
    dense_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <all_configure_weights+0x1f0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <all_configure_weights+0x1f0>)
 800273e:	6013      	str	r3, [r2, #0]
    dense_10_bias_array.data = AI_PTR(weights_map[0] + 89728);
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <all_configure_weights+0x1f4>)
 8002744:	4413      	add	r3, r2
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <all_configure_weights+0x1f0>)
 8002748:	6093      	str	r3, [r2, #8]
    dense_10_bias_array.data_start = AI_PTR(weights_map[0] + 89728);
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <all_configure_weights+0x1f4>)
 800274e:	4413      	add	r3, r2
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <all_configure_weights+0x1f0>)
 8002752:	60d3      	str	r3, [r2, #12]
    return true;
 8002754:	2301      	movs	r3, #1
 8002756:	e005      	b.n	8002764 <all_configure_weights+0x1b4>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002758:	2212      	movs	r2, #18
 800275a:	2130      	movs	r1, #48	; 0x30
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fe1f 	bl	80033a0 <ai_platform_network_set_error>
  return false;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000165c 	.word	0x2000165c
 8002770:	2000166c 	.word	0x2000166c
 8002774:	2000167c 	.word	0x2000167c
 8002778:	2000168c 	.word	0x2000168c
 800277c:	2000169c 	.word	0x2000169c
 8002780:	200016ac 	.word	0x200016ac
 8002784:	200016bc 	.word	0x200016bc
 8002788:	200016cc 	.word	0x200016cc
 800278c:	200016dc 	.word	0x200016dc
 8002790:	200016ec 	.word	0x200016ec
 8002794:	00015780 	.word	0x00015780
 8002798:	200016fc 	.word	0x200016fc
 800279c:	00015880 	.word	0x00015880
 80027a0:	2000170c 	.word	0x2000170c
 80027a4:	00015e80 	.word	0x00015e80

080027a8 <ai_all_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_all_get_error(ai_handle network)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fd01 	bl	80031b8 <ai_platform_network_get_error>
 80027b6:	4603      	mov	r3, r0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <ai_all_create>:

AI_API_ENTRY
ai_error ai_all_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80027ca:	2300      	movs	r3, #0
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2305      	movs	r3, #5
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2301      	movs	r3, #1
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <ai_all_create+0x28>)
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f001 f8ed 	bl	80039b8 <ai_platform_network_create>
 80027de:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20002114 	.word	0x20002114

080027ec <ai_all_create_and_init>:

AI_API_ENTRY
ai_error ai_all_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b096      	sub	sp, #88	; 0x58
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_all_create(network, AI_ALL_DATA_CONFIG);
 80027f8:	2100      	movs	r1, #0
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff ffe0 	bl	80027c0 <ai_all_create>
 8002800:	4603      	mov	r3, r0
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8002804:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <ai_all_create_and_init+0x24>
        return err;
 800280c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280e:	e05d      	b.n	80028cc <ai_all_create_and_init+0xe0>
    if (ai_all_data_params_get(&params) != true) {
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f8dd 	bl	80029d4 <ai_all_data_params_get>
 800281a:	4603      	mov	r3, r0
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <ai_all_create_and_init+0x4c>
        err = ai_all_get_error(*network);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ffbc 	bl	80027a8 <ai_all_get_error>
 8002830:	4603      	mov	r3, r0
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8002834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002836:	e049      	b.n	80028cc <ai_all_create_and_init+0xe0>
    }
#if defined(AI_ALL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <ai_all_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800283e:	2300      	movs	r3, #0
 8002840:	657b      	str	r3, [r7, #84]	; 0x54
 8002842:	e00e      	b.n	8002862 <ai_all_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4413      	add	r3, r2
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	330c      	adds	r3, #12
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fbcc 	bl	8002ff4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	3301      	adds	r3, #1
 8002860:	657b      	str	r3, [r7, #84]	; 0x54
 8002862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002864:	461a      	mov	r2, r3
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	4293      	cmp	r3, r2
 800286a:	dbeb      	blt.n	8002844 <ai_all_create_and_init+0x58>
    }
#endif
#if defined(AI_ALL_DATA_WEIGHTS_COUNT)
    if (weights) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <ai_all_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002872:	2300      	movs	r3, #0
 8002874:	653b      	str	r3, [r7, #80]	; 0x50
 8002876:	e00e      	b.n	8002896 <ai_all_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002878:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800287a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	3304      	adds	r3, #4
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fbb2 	bl	8002ff4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002892:	3301      	adds	r3, #1
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
 8002896:	8b7b      	ldrh	r3, [r7, #26]
 8002898:	461a      	mov	r2, r3
 800289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289c:	4293      	cmp	r3, r2
 800289e:	dbeb      	blt.n	8002878 <ai_all_create_and_init+0x8c>
    }
#endif
    if (ai_all_init(*network, &params) != true) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f107 0214 	add.w	r2, r7, #20
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f846 	bl	800293c <ai_all_init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <ai_all_create_and_init+0xde>
        err = ai_all_get_error(*network);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff71 	bl	80027a8 <ai_all_get_error>
 80028c6:	4603      	mov	r3, r0
 80028c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3758      	adds	r7, #88	; 0x58
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <ai_all_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_all_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <ai_all_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <ai_all_inputs_get+0x2c>)
 80028e6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <ai_all_inputs_get+0x30>)
 80028ec:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fd5b 	bl	80033ac <ai_platform_inputs_get>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20002114 	.word	0x20002114
 8002904:	a1c00100 	.word	0xa1c00100

08002908 <ai_all_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_all_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <ai_all_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <ai_all_outputs_get+0x2c>)
 800291a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a06      	ldr	r2, [pc, #24]	; (8002938 <ai_all_outputs_get+0x30>)
 8002920:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fec3 	bl	80036b0 <ai_platform_outputs_get>
 800292a:	4603      	mov	r3, r0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20002114 	.word	0x20002114
 8002938:	a1c00100 	.word	0xa1c00100

0800293c <ai_all_init>:
}

AI_API_ENTRY
ai_bool ai_all_init(
  ai_handle network, const ai_network_params* params)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002946:	6839      	ldr	r1, [r7, #0]
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f001 f9d5 	bl	8003cf8 <ai_platform_network_init>
 800294e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <ai_all_init+0x1e>
 8002956:	2300      	movs	r3, #0
 8002958:	e028      	b.n	80029ac <ai_all_init+0x70>

  ai_bool ok = true;
 800295a:	2301      	movs	r3, #1
 800295c:	72fb      	strb	r3, [r7, #11]
  ok &= all_configure_weights(net_ctx, params);
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fe25 	bl	80025b0 <all_configure_weights>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	72fb      	strb	r3, [r7, #11]
  ok &= all_configure_activations(net_ctx, params);
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fd9e 	bl	80024bc <all_configure_activations>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f001 fb42 	bl	800401c <ai_platform_network_post_init>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	7afb      	ldrb	r3, [r7, #11]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80029aa:	7afb      	ldrb	r3, [r7, #11]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <ai_all_run>:


AI_API_ENTRY
ai_i32 ai_all_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f001 fc3f 	bl	8004248 <ai_platform_network_process>
 80029ca:	4603      	mov	r3, r0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <ai_all_data_params_get>:
 * @ingroup all_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_all_data_params_get(ai_network_params* params)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <ai_all_data_params_get+0x12>
 80029e2:	2300      	movs	r3, #0
 80029e4:	e016      	b.n	8002a14 <ai_all_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80029e6:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <ai_all_data_params_get+0x48>)
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ALL_DATA_ACTIVATIONS_COUNT, g_all_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <ai_all_data_params_get+0x4c>)
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029fe:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ALL_DATA_WEIGHTS_COUNT, g_all_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002a02:	f107 0210 	add.w	r2, r7, #16
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fbb5 	bl	800317c <ai_platform_bind_network_params>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	08007340 	.word	0x08007340
 8002a20:	08007348 	.word	0x08007348

08002a24 <two_three_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool two_three_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fb46 	bl	80030cc <ai_platform_get_activations_map>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d049      	beq.n	8002ada <two_three_configure_activations+0xb6>
    /* Updating activations (byte) offsets */
    conv2d_0_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <two_three_configure_activations+0xcc>)
 8002a4a:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <two_three_configure_activations+0xcc>)
 8002a50:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 1024);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <two_three_configure_activations+0xd0>)
 8002a5a:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 1024);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <two_three_configure_activations+0xd0>)
 8002a64:	60d3      	str	r3, [r2, #12]
    eltwise_3_output_array.data = AI_PTR(activations_map[0] + 1024);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <two_three_configure_activations+0xd4>)
 8002a6e:	6093      	str	r3, [r2, #8]
    eltwise_3_output_array.data_start = AI_PTR(activations_map[0] + 1024);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a76:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <two_three_configure_activations+0xd4>)
 8002a78:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <two_three_configure_activations+0xd8>)
 8002a7e:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <two_three_configure_activations+0xd8>)
 8002a84:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 256);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <two_three_configure_activations+0xdc>)
 8002a8e:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a96:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <two_three_configure_activations+0xdc>)
 8002a98:	60d3      	str	r3, [r2, #12]
    eltwise_7_output_array.data = AI_PTR(activations_map[0] + 640);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aa0:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <two_three_configure_activations+0xe0>)
 8002aa2:	6093      	str	r3, [r2, #8]
    eltwise_7_output_array.data_start = AI_PTR(activations_map[0] + 640);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <two_three_configure_activations+0xe0>)
 8002aac:	60d3      	str	r3, [r2, #12]
    dense_9_output_array.data = AI_PTR(activations_map[0] + 0);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <two_three_configure_activations+0xe4>)
 8002ab2:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <two_three_configure_activations+0xe4>)
 8002ab8:	60d3      	str	r3, [r2, #12]
    nl_9_nl_output_array.data = AI_PTR(activations_map[0] + 128);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3380      	adds	r3, #128	; 0x80
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <two_three_configure_activations+0xe8>)
 8002ac0:	6093      	str	r3, [r2, #8]
    nl_9_nl_output_array.data_start = AI_PTR(activations_map[0] + 128);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3380      	adds	r3, #128	; 0x80
 8002ac6:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <two_three_configure_activations+0xe8>)
 8002ac8:	60d3      	str	r3, [r2, #12]
    dense_10_output_array.data = AI_PTR(activations_map[0] + 0);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <two_three_configure_activations+0xec>)
 8002ace:	6093      	str	r3, [r2, #8]
    dense_10_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <two_three_configure_activations+0xec>)
 8002ad4:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e005      	b.n	8002ae6 <two_three_configure_activations+0xc2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002ada:	2213      	movs	r2, #19
 8002adc:	2130      	movs	r1, #48	; 0x30
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fc5e 	bl	80033a0 <ai_platform_network_set_error>
  return false;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20002304 	.word	0x20002304
 8002af4:	200021c4 	.word	0x200021c4
 8002af8:	200021d4 	.word	0x200021d4
 8002afc:	20002314 	.word	0x20002314
 8002b00:	200021e4 	.word	0x200021e4
 8002b04:	200021f4 	.word	0x200021f4
 8002b08:	20002204 	.word	0x20002204
 8002b0c:	20002214 	.word	0x20002214
 8002b10:	20002224 	.word	0x20002224

08002b14 <two_three_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool two_three_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fa78 	bl	8003020 <ai_platform_get_weights_map>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80c4 	beq.w	8002cc0 <two_three_configure_weights+0x1ac>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <two_three_configure_weights+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b40:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <two_three_configure_weights+0x1c0>)
 8002b42:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <two_three_configure_weights+0x1c0>)
 8002b48:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a61      	ldr	r2, [pc, #388]	; (8002cd4 <two_three_configure_weights+0x1c0>)
 8002b4e:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <two_three_configure_weights+0x1c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b58:	4a5f      	ldr	r2, [pc, #380]	; (8002cd8 <two_three_configure_weights+0x1c4>)
 8002b5a:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 576);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002b62:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <two_three_configure_weights+0x1c4>)
 8002b64:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 576);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002b6c:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <two_three_configure_weights+0x1c4>)
 8002b6e:	60d3      	str	r3, [r2, #12]
    eltwise_3_scale_array.format |= AI_FMT_FLAG_CONST;
 8002b70:	4b5a      	ldr	r3, [pc, #360]	; (8002cdc <two_three_configure_weights+0x1c8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b78:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <two_three_configure_weights+0x1c8>)
 8002b7a:	6013      	str	r3, [r2, #0]
    eltwise_3_scale_array.data = AI_PTR(weights_map[0] + 640);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b82:	4a56      	ldr	r2, [pc, #344]	; (8002cdc <two_three_configure_weights+0x1c8>)
 8002b84:	6093      	str	r3, [r2, #8]
    eltwise_3_scale_array.data_start = AI_PTR(weights_map[0] + 640);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b8c:	4a53      	ldr	r2, [pc, #332]	; (8002cdc <two_three_configure_weights+0x1c8>)
 8002b8e:	60d3      	str	r3, [r2, #12]
    eltwise_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <two_three_configure_weights+0x1cc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b98:	4a51      	ldr	r2, [pc, #324]	; (8002ce0 <two_three_configure_weights+0x1cc>)
 8002b9a:	6013      	str	r3, [r2, #0]
    eltwise_3_bias_array.data = AI_PTR(weights_map[0] + 704);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002ba2:	4a4f      	ldr	r2, [pc, #316]	; (8002ce0 <two_three_configure_weights+0x1cc>)
 8002ba4:	6093      	str	r3, [r2, #8]
    eltwise_3_bias_array.data_start = AI_PTR(weights_map[0] + 704);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002bac:	4a4c      	ldr	r2, [pc, #304]	; (8002ce0 <two_three_configure_weights+0x1cc>)
 8002bae:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <two_three_configure_weights+0x1d0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	; (8002ce4 <two_three_configure_weights+0x1d0>)
 8002bba:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 768);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002bc2:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <two_three_configure_weights+0x1d0>)
 8002bc4:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights_map[0] + 768);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002bcc:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <two_three_configure_weights+0x1d0>)
 8002bce:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8002bd0:	4b45      	ldr	r3, [pc, #276]	; (8002ce8 <two_three_configure_weights+0x1d4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bd8:	4a43      	ldr	r2, [pc, #268]	; (8002ce8 <two_three_configure_weights+0x1d4>)
 8002bda:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 9984);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <two_three_configure_weights+0x1d4>)
 8002be4:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights_map[0] + 9984);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002bec:	4a3e      	ldr	r2, [pc, #248]	; (8002ce8 <two_three_configure_weights+0x1d4>)
 8002bee:	60d3      	str	r3, [r2, #12]
    eltwise_7_scale_array.format |= AI_FMT_FLAG_CONST;
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <two_three_configure_weights+0x1d8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <two_three_configure_weights+0x1d8>)
 8002bfa:	6013      	str	r3, [r2, #0]
    eltwise_7_scale_array.data = AI_PTR(weights_map[0] + 10048);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <two_three_configure_weights+0x1d8>)
 8002c04:	6093      	str	r3, [r2, #8]
    eltwise_7_scale_array.data_start = AI_PTR(weights_map[0] + 10048);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 531d 	add.w	r3, r3, #10048	; 0x2740
 8002c0c:	4a37      	ldr	r2, [pc, #220]	; (8002cec <two_three_configure_weights+0x1d8>)
 8002c0e:	60d3      	str	r3, [r2, #12]
    eltwise_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <two_three_configure_weights+0x1dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c18:	4a35      	ldr	r2, [pc, #212]	; (8002cf0 <two_three_configure_weights+0x1dc>)
 8002c1a:	6013      	str	r3, [r2, #0]
    eltwise_7_bias_array.data = AI_PTR(weights_map[0] + 10112);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8002c22:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <two_three_configure_weights+0x1dc>)
 8002c24:	6093      	str	r3, [r2, #8]
    eltwise_7_bias_array.data_start = AI_PTR(weights_map[0] + 10112);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f503 531e 	add.w	r3, r3, #10112	; 0x2780
 8002c2c:	4a30      	ldr	r2, [pc, #192]	; (8002cf0 <two_three_configure_weights+0x1dc>)
 8002c2e:	60d3      	str	r3, [r2, #12]
    dense_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <two_three_configure_weights+0x1e0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c38:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <two_three_configure_weights+0x1e0>)
 8002c3a:	6013      	str	r3, [r2, #0]
    dense_9_weights_array.data = AI_PTR(weights_map[0] + 10176);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <two_three_configure_weights+0x1e0>)
 8002c44:	6093      	str	r3, [r2, #8]
    dense_9_weights_array.data_start = AI_PTR(weights_map[0] + 10176);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <two_three_configure_weights+0x1e0>)
 8002c4e:	60d3      	str	r3, [r2, #12]
    dense_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <two_three_configure_weights+0x1e4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c58:	4a27      	ldr	r2, [pc, #156]	; (8002cf8 <two_three_configure_weights+0x1e4>)
 8002c5a:	6013      	str	r3, [r2, #0]
    dense_9_bias_array.data = AI_PTR(weights_map[0] + 22464);
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	f245 73c0 	movw	r3, #22464	; 0x57c0
 8002c62:	4413      	add	r3, r2
 8002c64:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <two_three_configure_weights+0x1e4>)
 8002c66:	6093      	str	r3, [r2, #8]
    dense_9_bias_array.data_start = AI_PTR(weights_map[0] + 22464);
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	f245 73c0 	movw	r3, #22464	; 0x57c0
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <two_three_configure_weights+0x1e4>)
 8002c72:	60d3      	str	r3, [r2, #12]
    dense_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <two_three_configure_weights+0x1e8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <two_three_configure_weights+0x1e8>)
 8002c7e:	6013      	str	r3, [r2, #0]
    dense_10_weights_array.data = AI_PTR(weights_map[0] + 22592);
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	f645 0340 	movw	r3, #22592	; 0x5840
 8002c86:	4413      	add	r3, r2
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <two_three_configure_weights+0x1e8>)
 8002c8a:	6093      	str	r3, [r2, #8]
    dense_10_weights_array.data_start = AI_PTR(weights_map[0] + 22592);
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	f645 0340 	movw	r3, #22592	; 0x5840
 8002c92:	4413      	add	r3, r2
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <two_three_configure_weights+0x1e8>)
 8002c96:	60d3      	str	r3, [r2, #12]
    dense_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <two_three_configure_weights+0x1ec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <two_three_configure_weights+0x1ec>)
 8002ca2:	6013      	str	r3, [r2, #0]
    dense_10_bias_array.data = AI_PTR(weights_map[0] + 22848);
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	f645 1340 	movw	r3, #22848	; 0x5940
 8002caa:	4413      	add	r3, r2
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <two_three_configure_weights+0x1ec>)
 8002cae:	6093      	str	r3, [r2, #8]
    dense_10_bias_array.data_start = AI_PTR(weights_map[0] + 22848);
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	f645 1340 	movw	r3, #22848	; 0x5940
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <two_three_configure_weights+0x1ec>)
 8002cba:	60d3      	str	r3, [r2, #12]
    return true;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e005      	b.n	8002ccc <two_three_configure_weights+0x1b8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002cc0:	2212      	movs	r2, #18
 8002cc2:	2130      	movs	r1, #48	; 0x30
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fb6b 	bl	80033a0 <ai_platform_network_set_error>
  return false;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20002244 	.word	0x20002244
 8002cd8:	20002254 	.word	0x20002254
 8002cdc:	20002264 	.word	0x20002264
 8002ce0:	20002274 	.word	0x20002274
 8002ce4:	20002284 	.word	0x20002284
 8002ce8:	20002294 	.word	0x20002294
 8002cec:	200022a4 	.word	0x200022a4
 8002cf0:	200022b4 	.word	0x200022b4
 8002cf4:	200022c4 	.word	0x200022c4
 8002cf8:	200022d4 	.word	0x200022d4
 8002cfc:	200022e4 	.word	0x200022e4
 8002d00:	200022f4 	.word	0x200022f4

08002d04 <ai_two_three_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_two_three_get_error(ai_handle network)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fa53 	bl	80031b8 <ai_platform_network_get_error>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <ai_two_three_create>:

AI_API_ENTRY
ai_error ai_two_three_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002d26:	2300      	movs	r3, #0
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <ai_two_three_create+0x28>)
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fe3f 	bl	80039b8 <ai_platform_network_create>
 8002d3a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20002cfc 	.word	0x20002cfc

08002d48 <ai_two_three_create_and_init>:

AI_API_ENTRY
ai_error ai_two_three_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b096      	sub	sp, #88	; 0x58
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_two_three_create(network, AI_TWO_THREE_DATA_CONFIG);
 8002d54:	2100      	movs	r1, #0
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ffe0 	bl	8002d1c <ai_two_three_create>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8002d60:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <ai_two_three_create_and_init+0x24>
        return err;
 8002d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6a:	e05d      	b.n	8002e28 <ai_two_three_create_and_init+0xe0>
    if (ai_two_three_data_params_get(&params) != true) {
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f8dd 	bl	8002f30 <ai_two_three_data_params_get>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f083 0301 	eor.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <ai_two_three_create_and_init+0x4c>
        err = ai_two_three_get_error(*network);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffbc 	bl	8002d04 <ai_two_three_get_error>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	e049      	b.n	8002e28 <ai_two_three_create_and_init+0xe0>
    }
#if defined(AI_TWO_THREE_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <ai_two_three_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8002d9e:	e00e      	b.n	8002dbe <ai_two_three_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8002da0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4413      	add	r3, r2
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	330c      	adds	r3, #12
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f91e 	bl	8002ff4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dba:	3301      	adds	r3, #1
 8002dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8002dbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	dbeb      	blt.n	8002da0 <ai_two_three_create_and_init+0x58>
    }
#endif
#if defined(AI_TWO_THREE_DATA_WEIGHTS_COUNT)
    if (weights) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <ai_two_three_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8002dd2:	e00e      	b.n	8002df2 <ai_two_three_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002dd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	3304      	adds	r3, #4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f904 	bl	8002ff4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	3301      	adds	r3, #1
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	461a      	mov	r2, r3
 8002df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	dbeb      	blt.n	8002dd4 <ai_two_three_create_and_init+0x8c>
    }
#endif
    if (ai_two_three_init(*network, &params) != true) {
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f107 0214 	add.w	r2, r7, #20
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f846 	bl	8002e98 <ai_two_three_init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <ai_two_three_create_and_init+0xde>
        err = ai_two_three_get_error(*network);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff71 	bl	8002d04 <ai_two_three_get_error>
 8002e22:	4603      	mov	r3, r0
 8002e24:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3758      	adds	r7, #88	; 0x58
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <ai_two_three_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_two_three_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <ai_two_three_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <ai_two_three_inputs_get+0x2c>)
 8002e42:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <ai_two_three_inputs_get+0x30>)
 8002e48:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 faad 	bl	80033ac <ai_platform_inputs_get>
 8002e52:	4603      	mov	r3, r0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20002cfc 	.word	0x20002cfc
 8002e60:	a1c00100 	.word	0xa1c00100

08002e64 <ai_two_three_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_two_three_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <ai_two_three_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <ai_two_three_outputs_get+0x2c>)
 8002e76:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a06      	ldr	r2, [pc, #24]	; (8002e94 <ai_two_three_outputs_get+0x30>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fc15 	bl	80036b0 <ai_platform_outputs_get>
 8002e86:	4603      	mov	r3, r0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20002cfc 	.word	0x20002cfc
 8002e94:	a1c00100 	.word	0xa1c00100

08002e98 <ai_two_three_init>:
}

AI_API_ENTRY
ai_bool ai_two_three_init(
  ai_handle network, const ai_network_params* params)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 ff27 	bl	8003cf8 <ai_platform_network_init>
 8002eaa:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <ai_two_three_init+0x1e>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e028      	b.n	8002f08 <ai_two_three_init+0x70>

  ai_bool ok = true;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	72fb      	strb	r3, [r7, #11]
  ok &= two_three_configure_weights(net_ctx, params);
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fe29 	bl	8002b14 <two_three_configure_weights>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	72fb      	strb	r3, [r7, #11]
  ok &= two_three_configure_activations(net_ctx, params);
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff fda4 	bl	8002a24 <two_three_configure_activations>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	7afb      	ldrb	r3, [r7, #11]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f001 f894 	bl	800401c <ai_platform_network_post_init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	72fb      	strb	r3, [r7, #11]

  return ok;
 8002f06:	7afb      	ldrb	r3, [r7, #11]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <ai_two_three_run>:


AI_API_ENTRY
ai_i32 ai_two_three_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f001 f991 	bl	8004248 <ai_platform_network_process>
 8002f26:	4603      	mov	r3, r0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <ai_two_three_data_params_get>:
 * @ingroup two_three_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_two_three_data_params_get(ai_network_params* params)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <ai_two_three_data_params_get+0x12>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e016      	b.n	8002f70 <ai_two_three_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <ai_two_three_data_params_get+0x48>)
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f4c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWO_THREE_DATA_ACTIVATIONS_COUNT, g_two_three_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <ai_two_three_data_params_get+0x4c>)
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TWO_THREE_DATA_WEIGHTS_COUNT, g_two_three_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8002f5e:	f107 0210 	add.w	r2, r7, #16
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f907 	bl	800317c <ai_platform_bind_network_params>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	08007370 	.word	0x08007370
 8002f7c:	08007378 	.word	0x08007378

08002f80 <ai_buffer_get_size>:
 8002f80:	b340      	cbz	r0, 8002fd4 <ai_buffer_get_size+0x54>
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <ai_buffer_get_size+0x58>)
 8002f84:	b430      	push	{r4, r5}
 8002f86:	6802      	ldr	r2, [r0, #0]
 8002f88:	4d14      	ldr	r5, [pc, #80]	; (8002fdc <ai_buffer_get_size+0x5c>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	6984      	ldr	r4, [r0, #24]
 8002f8e:	42ab      	cmp	r3, r5
 8002f90:	6862      	ldr	r2, [r4, #4]
 8002f92:	d103      	bne.n	8002f9c <ai_buffer_get_size+0x1c>
 8002f94:	b111      	cbz	r1, 8002f9c <ai_buffer_get_size+0x1c>
 8002f96:	321f      	adds	r2, #31
 8002f98:	f022 021f 	bic.w	r2, r2, #31
 8002f9c:	7d03      	ldrb	r3, [r0, #20]
 8002f9e:	6941      	ldr	r1, [r0, #20]
 8002fa0:	f1a3 0301 	sub.w	r3, r3, #1
 8002fa4:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	428b      	cmp	r3, r1
 8002fb0:	da0c      	bge.n	8002fcc <ai_buffer_get_size+0x4c>
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d103      	bne.n	8002fbe <ai_buffer_get_size+0x3e>
 8002fb6:	2902      	cmp	r1, #2
 8002fb8:	f04f 0302 	mov.w	r3, #2
 8002fbc:	d006      	beq.n	8002fcc <ai_buffer_get_size+0x4c>
 8002fbe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	fb00 f202 	mul.w	r2, r0, r2
 8002fca:	d1f2      	bne.n	8002fb2 <ai_buffer_get_size+0x32>
 8002fcc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002fd0:	bc30      	pop	{r4, r5}
 8002fd2:	4770      	bx	lr
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	017fffff 	.word	0x017fffff
 8002fdc:	000400c0 	.word	0x000400c0

08002fe0 <ai_buffer_array_sane>:
 8002fe0:	b138      	cbz	r0, 8002ff2 <ai_buffer_array_sane+0x12>
 8002fe2:	6843      	ldr	r3, [r0, #4]
 8002fe4:	b123      	cbz	r3, 8002ff0 <ai_buffer_array_sane+0x10>
 8002fe6:	8840      	ldrh	r0, [r0, #2]
 8002fe8:	3000      	adds	r0, #0
 8002fea:	bf18      	it	ne
 8002fec:	2001      	movne	r0, #1
 8002fee:	4770      	bx	lr
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4770      	bx	lr

08002ff4 <ai_buffer_array_item_set_address>:
 8002ff4:	b120      	cbz	r0, 8003000 <ai_buffer_array_item_set_address+0xc>
 8002ff6:	6843      	ldr	r3, [r0, #4]
 8002ff8:	b11b      	cbz	r3, 8003002 <ai_buffer_array_item_set_address+0xe>
 8002ffa:	8840      	ldrh	r0, [r0, #2]
 8002ffc:	b918      	cbnz	r0, 8003006 <ai_buffer_array_item_set_address+0x12>
 8002ffe:	4770      	bx	lr
 8003000:	4770      	bx	lr
 8003002:	4618      	mov	r0, r3
 8003004:	4770      	bx	lr
 8003006:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800300a:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800300e:	d0f7      	beq.n	8003000 <ai_buffer_array_item_set_address+0xc>
 8003010:	6042      	str	r2, [r0, #4]
 8003012:	2001      	movs	r0, #1
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop

08003018 <_ai_platform_acquire_crc>:
 8003018:	2001      	movs	r0, #1
 800301a:	4770      	bx	lr

0800301c <_ai_platform_release_crc>:
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <ai_platform_get_weights_map>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	fab1 f381 	clz	r3, r1
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2800      	cmp	r0, #0
 800302a:	bf08      	it	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2a00      	cmp	r2, #0
 8003030:	bf14      	ite	ne
 8003032:	461c      	movne	r4, r3
 8003034:	2401      	moveq	r4, #1
 8003036:	b114      	cbz	r4, 800303e <ai_platform_get_weights_map+0x1e>
 8003038:	2400      	movs	r4, #0
 800303a:	4620      	mov	r0, r4
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <ai_platform_get_weights_map+0xa8>)
 8003040:	6815      	ldr	r5, [r2, #0]
 8003042:	429d      	cmp	r5, r3
 8003044:	d00c      	beq.n	8003060 <ai_platform_get_weights_map+0x40>
 8003046:	6855      	ldr	r5, [r2, #4]
 8003048:	2d00      	cmp	r5, #0
 800304a:	d0f5      	beq.n	8003038 <ai_platform_get_weights_map+0x18>
 800304c:	682e      	ldr	r6, [r5, #0]
 800304e:	429e      	cmp	r6, r3
 8003050:	d022      	beq.n	8003098 <ai_platform_get_weights_map+0x78>
 8003052:	f1a1 0401 	sub.w	r4, r1, #1
 8003056:	6005      	str	r5, [r0, #0]
 8003058:	fab4 f484 	clz	r4, r4
 800305c:	0964      	lsrs	r4, r4, #5
 800305e:	e7ec      	b.n	800303a <ai_platform_get_weights_map+0x1a>
 8003060:	4606      	mov	r6, r0
 8003062:	1d10      	adds	r0, r2, #4
 8003064:	4615      	mov	r5, r2
 8003066:	460f      	mov	r7, r1
 8003068:	f7ff ffba 	bl	8002fe0 <ai_buffer_array_sane>
 800306c:	2800      	cmp	r0, #0
 800306e:	d0e3      	beq.n	8003038 <ai_platform_get_weights_map+0x18>
 8003070:	88eb      	ldrh	r3, [r5, #6]
 8003072:	429f      	cmp	r7, r3
 8003074:	d1e0      	bne.n	8003038 <ai_platform_get_weights_map+0x18>
 8003076:	1f33      	subs	r3, r6, #4
 8003078:	4620      	mov	r0, r4
 800307a:	68aa      	ldr	r2, [r5, #8]
 800307c:	4422      	add	r2, r4
 800307e:	341c      	adds	r4, #28
 8003080:	6852      	ldr	r2, [r2, #4]
 8003082:	b122      	cbz	r2, 800308e <ai_platform_get_weights_map+0x6e>
 8003084:	3001      	adds	r0, #1
 8003086:	f843 2f04 	str.w	r2, [r3, #4]!
 800308a:	4287      	cmp	r7, r0
 800308c:	d8f5      	bhi.n	800307a <ai_platform_get_weights_map+0x5a>
 800308e:	1a3c      	subs	r4, r7, r0
 8003090:	fab4 f484 	clz	r4, r4
 8003094:	0964      	lsrs	r4, r4, #5
 8003096:	e7d0      	b.n	800303a <ai_platform_get_weights_map+0x1a>
 8003098:	686b      	ldr	r3, [r5, #4]
 800309a:	3504      	adds	r5, #4
 800309c:	42b3      	cmp	r3, r6
 800309e:	d0cc      	beq.n	800303a <ai_platform_get_weights_map+0x1a>
 80030a0:	3804      	subs	r0, #4
 80030a2:	462f      	mov	r7, r5
 80030a4:	4622      	mov	r2, r4
 80030a6:	e003      	b.n	80030b0 <ai_platform_get_weights_map+0x90>
 80030a8:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80030ac:	42b3      	cmp	r3, r6
 80030ae:	d0c4      	beq.n	800303a <ai_platform_get_weights_map+0x1a>
 80030b0:	3201      	adds	r2, #1
 80030b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80030b6:	4291      	cmp	r1, r2
 80030b8:	d1f6      	bne.n	80030a8 <ai_platform_get_weights_map+0x88>
 80030ba:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 80030be:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <ai_platform_get_weights_map+0xa8>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	bf08      	it	eq
 80030c4:	2401      	moveq	r4, #1
 80030c6:	e7b8      	b.n	800303a <ai_platform_get_weights_map+0x1a>
 80030c8:	a1facade 	.word	0xa1facade

080030cc <ai_platform_get_activations_map>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	fab1 f381 	clz	r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2800      	cmp	r0, #0
 80030d6:	bf08      	it	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2a00      	cmp	r2, #0
 80030dc:	bf14      	ite	ne
 80030de:	461c      	movne	r4, r3
 80030e0:	2401      	moveq	r4, #1
 80030e2:	b114      	cbz	r4, 80030ea <ai_platform_get_activations_map+0x1e>
 80030e4:	2400      	movs	r4, #0
 80030e6:	4620      	mov	r0, r4
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <ai_platform_get_activations_map+0xac>)
 80030ec:	6815      	ldr	r5, [r2, #0]
 80030ee:	429d      	cmp	r5, r3
 80030f0:	d00c      	beq.n	800310c <ai_platform_get_activations_map+0x40>
 80030f2:	6a15      	ldr	r5, [r2, #32]
 80030f4:	2d00      	cmp	r5, #0
 80030f6:	d0f5      	beq.n	80030e4 <ai_platform_get_activations_map+0x18>
 80030f8:	682e      	ldr	r6, [r5, #0]
 80030fa:	429e      	cmp	r6, r3
 80030fc:	d023      	beq.n	8003146 <ai_platform_get_activations_map+0x7a>
 80030fe:	f1a1 0401 	sub.w	r4, r1, #1
 8003102:	6005      	str	r5, [r0, #0]
 8003104:	fab4 f484 	clz	r4, r4
 8003108:	0964      	lsrs	r4, r4, #5
 800310a:	e7ec      	b.n	80030e6 <ai_platform_get_activations_map+0x1a>
 800310c:	4606      	mov	r6, r0
 800310e:	f102 000c 	add.w	r0, r2, #12
 8003112:	4615      	mov	r5, r2
 8003114:	460f      	mov	r7, r1
 8003116:	f7ff ff63 	bl	8002fe0 <ai_buffer_array_sane>
 800311a:	2800      	cmp	r0, #0
 800311c:	d0e2      	beq.n	80030e4 <ai_platform_get_activations_map+0x18>
 800311e:	89eb      	ldrh	r3, [r5, #14]
 8003120:	429f      	cmp	r7, r3
 8003122:	d1df      	bne.n	80030e4 <ai_platform_get_activations_map+0x18>
 8003124:	1f33      	subs	r3, r6, #4
 8003126:	4620      	mov	r0, r4
 8003128:	692a      	ldr	r2, [r5, #16]
 800312a:	4422      	add	r2, r4
 800312c:	341c      	adds	r4, #28
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	b122      	cbz	r2, 800313c <ai_platform_get_activations_map+0x70>
 8003132:	3001      	adds	r0, #1
 8003134:	f843 2f04 	str.w	r2, [r3, #4]!
 8003138:	4287      	cmp	r7, r0
 800313a:	d8f5      	bhi.n	8003128 <ai_platform_get_activations_map+0x5c>
 800313c:	1a3c      	subs	r4, r7, r0
 800313e:	fab4 f484 	clz	r4, r4
 8003142:	0964      	lsrs	r4, r4, #5
 8003144:	e7cf      	b.n	80030e6 <ai_platform_get_activations_map+0x1a>
 8003146:	686b      	ldr	r3, [r5, #4]
 8003148:	3504      	adds	r5, #4
 800314a:	42b3      	cmp	r3, r6
 800314c:	d0cb      	beq.n	80030e6 <ai_platform_get_activations_map+0x1a>
 800314e:	3804      	subs	r0, #4
 8003150:	462f      	mov	r7, r5
 8003152:	4622      	mov	r2, r4
 8003154:	e003      	b.n	800315e <ai_platform_get_activations_map+0x92>
 8003156:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800315a:	42b3      	cmp	r3, r6
 800315c:	d0c3      	beq.n	80030e6 <ai_platform_get_activations_map+0x1a>
 800315e:	3201      	adds	r2, #1
 8003160:	f840 3f04 	str.w	r3, [r0, #4]!
 8003164:	4291      	cmp	r1, r2
 8003166:	d1f6      	bne.n	8003156 <ai_platform_get_activations_map+0x8a>
 8003168:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <ai_platform_get_activations_map+0xac>)
 800316e:	429a      	cmp	r2, r3
 8003170:	bf08      	it	eq
 8003172:	2401      	moveq	r4, #1
 8003174:	e7b7      	b.n	80030e6 <ai_platform_get_activations_map+0x1a>
 8003176:	bf00      	nop
 8003178:	a1facade 	.word	0xa1facade

0800317c <ai_platform_bind_network_params>:
 800317c:	2a00      	cmp	r2, #0
 800317e:	bf18      	it	ne
 8003180:	2900      	cmpne	r1, #0
 8003182:	b470      	push	{r4, r5, r6}
 8003184:	d011      	beq.n	80031aa <ai_platform_bind_network_params+0x2e>
 8003186:	b180      	cbz	r0, 80031aa <ai_platform_bind_network_params+0x2e>
 8003188:	4603      	mov	r3, r0
 800318a:	4e0a      	ldr	r6, [pc, #40]	; (80031b4 <ai_platform_bind_network_params+0x38>)
 800318c:	f100 050c 	add.w	r5, r0, #12
 8003190:	2401      	movs	r4, #1
 8003192:	f843 6b04 	str.w	r6, [r3], #4
 8003196:	c903      	ldmia	r1, {r0, r1}
 8003198:	e883 0003 	stmia.w	r3, {r0, r1}
 800319c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a4:	4620      	mov	r0, r4
 80031a6:	bc70      	pop	{r4, r5, r6}
 80031a8:	4770      	bx	lr
 80031aa:	2400      	movs	r4, #0
 80031ac:	4620      	mov	r0, r4
 80031ae:	bc70      	pop	{r4, r5, r6}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	a1facade 	.word	0xa1facade

080031b8 <ai_platform_network_get_error>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	b120      	cbz	r0, 80031c6 <ai_platform_network_get_error+0xe>
 80031bc:	4b6e      	ldr	r3, [pc, #440]	; (8003378 <ai_platform_network_get_error+0x1c0>)
 80031be:	4604      	mov	r4, r0
 80031c0:	6802      	ldr	r2, [r0, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d03d      	beq.n	8003242 <ai_platform_network_get_error+0x8a>
 80031c6:	4a6d      	ldr	r2, [pc, #436]	; (800337c <ai_platform_network_get_error+0x1c4>)
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	f7ff ff22 	bl	8003018 <_ai_platform_acquire_crc>
 80031d4:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <ai_platform_network_get_error+0x1c8>)
 80031d6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e0:	185a      	adds	r2, r3, r1
 80031e2:	2a01      	cmp	r2, #1
 80031e4:	d91e      	bls.n	8003224 <ai_platform_network_get_error+0x6c>
 80031e6:	f240 4249 	movw	r2, #1097	; 0x449
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01a      	beq.n	8003224 <ai_platform_network_get_error+0x6c>
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <ai_platform_network_get_error+0x1cc>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80031f6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80031fa:	f000 80ad 	beq.w	8003358 <ai_platform_network_get_error+0x1a0>
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	f240 4183 	movw	r1, #1155	; 0x483
 8003204:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003208:	428a      	cmp	r2, r1
 800320a:	f000 8095 	beq.w	8003338 <ai_platform_network_get_error+0x180>
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003214:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003218:	d043      	beq.n	80032a2 <ai_platform_network_get_error+0xea>
 800321a:	f7ff feff 	bl	800301c <_ai_platform_release_crc>
 800321e:	f241 0010 	movw	r0, #4112	; 0x1010
 8003222:	bd10      	pop	{r4, pc}
 8003224:	4b58      	ldr	r3, [pc, #352]	; (8003388 <ai_platform_network_get_error+0x1d0>)
 8003226:	2201      	movs	r2, #1
 8003228:	4619      	mov	r1, r3
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	680b      	ldr	r3, [r1, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1fc      	bne.n	800322c <ai_platform_network_get_error+0x74>
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <ai_platform_network_get_error+0x1d4>)
 8003234:	4956      	ldr	r1, [pc, #344]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 8003238:	6019      	str	r1, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4293      	cmp	r3, r2
 800323e:	d0ec      	beq.n	800321a <ai_platform_network_get_error+0x62>
 8003240:	e7fe      	b.n	8003240 <ai_platform_network_get_error+0x88>
 8003242:	4a4e      	ldr	r2, [pc, #312]	; (800337c <ai_platform_network_get_error+0x1c4>)
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	f7ff fee4 	bl	8003018 <_ai_platform_acquire_crc>
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <ai_platform_network_get_error+0x1c8>)
 8003252:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800325c:	189a      	adds	r2, r3, r2
 800325e:	2a01      	cmp	r2, #1
 8003260:	d95b      	bls.n	800331a <ai_platform_network_get_error+0x162>
 8003262:	f240 4249 	movw	r2, #1097	; 0x449
 8003266:	4293      	cmp	r3, r2
 8003268:	d057      	beq.n	800331a <ai_platform_network_get_error+0x162>
 800326a:	4b46      	ldr	r3, [pc, #280]	; (8003384 <ai_platform_network_get_error+0x1cc>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003272:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003276:	d041      	beq.n	80032fc <ai_platform_network_get_error+0x144>
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f240 4183 	movw	r1, #1155	; 0x483
 800327e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003282:	428a      	cmp	r2, r1
 8003284:	d02b      	beq.n	80032de <ai_platform_network_get_error+0x126>
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800328c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003290:	d016      	beq.n	80032c0 <ai_platform_network_get_error+0x108>
 8003292:	f7ff fec3 	bl	800301c <_ai_platform_release_crc>
 8003296:	f104 0010 	add.w	r0, r4, #16
 800329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329e:	f001 bab1 	b.w	8004804 <core_get_error>
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <ai_platform_network_get_error+0x1d0>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	4619      	mov	r1, r3
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	680b      	ldr	r3, [r1, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1fc      	bne.n	80032aa <ai_platform_network_get_error+0xf2>
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <ai_platform_network_get_error+0x1d4>)
 80032b2:	4937      	ldr	r1, [pc, #220]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 80032b4:	4a37      	ldr	r2, [pc, #220]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 80032b6:	6019      	str	r1, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d0ad      	beq.n	800321a <ai_platform_network_get_error+0x62>
 80032be:	e7fe      	b.n	80032be <ai_platform_network_get_error+0x106>
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <ai_platform_network_get_error+0x1d0>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	4619      	mov	r1, r3
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	680b      	ldr	r3, [r1, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1fc      	bne.n	80032c8 <ai_platform_network_get_error+0x110>
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <ai_platform_network_get_error+0x1d4>)
 80032d0:	492f      	ldr	r1, [pc, #188]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 80032d2:	4a30      	ldr	r2, [pc, #192]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 80032d4:	6019      	str	r1, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d0da      	beq.n	8003292 <ai_platform_network_get_error+0xda>
 80032dc:	e7fe      	b.n	80032dc <ai_platform_network_get_error+0x124>
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <ai_platform_network_get_error+0x1e0>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	4619      	mov	r1, r3
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	680b      	ldr	r3, [r1, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1fc      	bne.n	80032e6 <ai_platform_network_get_error+0x12e>
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <ai_platform_network_get_error+0x1e4>)
 80032ee:	4928      	ldr	r1, [pc, #160]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d0cb      	beq.n	8003292 <ai_platform_network_get_error+0xda>
 80032fa:	e7fe      	b.n	80032fa <ai_platform_network_get_error+0x142>
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <ai_platform_network_get_error+0x1e0>)
 80032fe:	2201      	movs	r2, #1
 8003300:	4619      	mov	r1, r3
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	680b      	ldr	r3, [r1, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1fc      	bne.n	8003304 <ai_platform_network_get_error+0x14c>
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <ai_platform_network_get_error+0x1e4>)
 800330c:	4920      	ldr	r1, [pc, #128]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4293      	cmp	r3, r2
 8003316:	d0bc      	beq.n	8003292 <ai_platform_network_get_error+0xda>
 8003318:	e7fe      	b.n	8003318 <ai_platform_network_get_error+0x160>
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <ai_platform_network_get_error+0x1d0>)
 800331c:	2201      	movs	r2, #1
 800331e:	4619      	mov	r1, r3
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	680b      	ldr	r3, [r1, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1fc      	bne.n	8003322 <ai_platform_network_get_error+0x16a>
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <ai_platform_network_get_error+0x1d4>)
 800332a:	4919      	ldr	r1, [pc, #100]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 800332e:	6019      	str	r1, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4293      	cmp	r3, r2
 8003334:	d0ad      	beq.n	8003292 <ai_platform_network_get_error+0xda>
 8003336:	e7fe      	b.n	8003336 <ai_platform_network_get_error+0x17e>
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <ai_platform_network_get_error+0x1e0>)
 800333a:	2201      	movs	r2, #1
 800333c:	4619      	mov	r1, r3
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	680b      	ldr	r3, [r1, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1fc      	bne.n	8003340 <ai_platform_network_get_error+0x188>
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <ai_platform_network_get_error+0x1e4>)
 8003348:	4911      	ldr	r1, [pc, #68]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 800334c:	6019      	str	r1, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4293      	cmp	r3, r2
 8003352:	f43f af62 	beq.w	800321a <ai_platform_network_get_error+0x62>
 8003356:	e7fe      	b.n	8003356 <ai_platform_network_get_error+0x19e>
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <ai_platform_network_get_error+0x1e0>)
 800335a:	2201      	movs	r2, #1
 800335c:	4619      	mov	r1, r3
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	680b      	ldr	r3, [r1, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1fc      	bne.n	8003360 <ai_platform_network_get_error+0x1a8>
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <ai_platform_network_get_error+0x1e4>)
 8003368:	4909      	ldr	r1, [pc, #36]	; (8003390 <ai_platform_network_get_error+0x1d8>)
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <ai_platform_network_get_error+0x1dc>)
 800336c:	6019      	str	r1, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4293      	cmp	r3, r2
 8003372:	f43f af52 	beq.w	800321a <ai_platform_network_get_error+0x62>
 8003376:	e7fe      	b.n	8003376 <ai_platform_network_get_error+0x1be>
 8003378:	a1c00100 	.word	0xa1c00100
 800337c:	e0002000 	.word	0xe0002000
 8003380:	e0042000 	.word	0xe0042000
 8003384:	5c001000 	.word	0x5c001000
 8003388:	40023008 	.word	0x40023008
 800338c:	40023000 	.word	0x40023000
 8003390:	f407a5c2 	.word	0xf407a5c2
 8003394:	b5e8b5cd 	.word	0xb5e8b5cd
 8003398:	58024c08 	.word	0x58024c08
 800339c:	58024c00 	.word	0x58024c00

080033a0 <ai_platform_network_set_error>:
 80033a0:	b110      	cbz	r0, 80033a8 <ai_platform_network_set_error+0x8>
 80033a2:	3010      	adds	r0, #16
 80033a4:	f001 ba34 	b.w	8004810 <core_set_error>
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop

080033ac <ai_platform_inputs_get>:
 80033ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b0:	b085      	sub	sp, #20
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f000 80b8 	beq.w	8003528 <ai_platform_inputs_get+0x17c>
 80033b8:	4ba7      	ldr	r3, [pc, #668]	; (8003658 <ai_platform_inputs_get+0x2ac>)
 80033ba:	4607      	mov	r7, r0
 80033bc:	6802      	ldr	r2, [r0, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	f040 80b2 	bne.w	8003528 <ai_platform_inputs_get+0x17c>
 80033c4:	4aa5      	ldr	r2, [pc, #660]	; (800365c <ai_platform_inputs_get+0x2b0>)
 80033c6:	468b      	mov	fp, r1
 80033c8:	6813      	ldr	r3, [r2, #0]
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	f7ff fe22 	bl	8003018 <_ai_platform_acquire_crc>
 80033d4:	4ba2      	ldr	r3, [pc, #648]	; (8003660 <ai_platform_inputs_get+0x2b4>)
 80033d6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e0:	189a      	adds	r2, r3, r2
 80033e2:	2a01      	cmp	r2, #1
 80033e4:	f240 8087 	bls.w	80034f6 <ai_platform_inputs_get+0x14a>
 80033e8:	f240 4249 	movw	r2, #1097	; 0x449
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f000 8082 	beq.w	80034f6 <ai_platform_inputs_get+0x14a>
 80033f2:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <ai_platform_inputs_get+0x2b8>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80033fa:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80033fe:	f000 813f 	beq.w	8003680 <ai_platform_inputs_get+0x2d4>
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	f240 4183 	movw	r1, #1155	; 0x483
 8003408:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800340c:	428a      	cmp	r2, r1
 800340e:	f000 8113 	beq.w	8003638 <ai_platform_inputs_get+0x28c>
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003418:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800341c:	f000 80fc 	beq.w	8003618 <ai_platform_inputs_get+0x26c>
 8003420:	f7ff fdfc 	bl	800301c <_ai_platform_release_crc>
 8003424:	f1bb 0f00 	cmp.w	fp, #0
 8003428:	d002      	beq.n	8003430 <ai_platform_inputs_get+0x84>
 800342a:	2300      	movs	r3, #0
 800342c:	f8ab 3000 	strh.w	r3, [fp]
 8003430:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d06e      	beq.n	8003514 <ai_platform_inputs_get+0x168>
 8003436:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003438:	2e00      	cmp	r6, #0
 800343a:	d06b      	beq.n	8003514 <ai_platform_inputs_get+0x168>
 800343c:	8833      	ldrh	r3, [r6, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d068      	beq.n	8003514 <ai_platform_inputs_get+0x168>
 8003442:	6873      	ldr	r3, [r6, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d065      	beq.n	8003514 <ai_platform_inputs_get+0x168>
 8003448:	681d      	ldr	r5, [r3, #0]
 800344a:	2d00      	cmp	r5, #0
 800344c:	d062      	beq.n	8003514 <ai_platform_inputs_get+0x168>
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	9702      	str	r7, [sp, #8]
 8003454:	f8cd b00c 	str.w	fp, [sp, #12]
 8003458:	4637      	mov	r7, r6
 800345a:	46c1      	mov	r9, r8
 800345c:	e02b      	b.n	80034b6 <ai_platform_inputs_get+0x10a>
 800345e:	885b      	ldrh	r3, [r3, #2]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d045      	beq.n	80034f0 <ai_platform_inputs_get+0x144>
 8003464:	2301      	movs	r3, #1
 8003466:	f84a 300b 	str.w	r3, [sl, fp]
 800346a:	69ab      	ldr	r3, [r5, #24]
 800346c:	685d      	ldr	r5, [r3, #4]
 800346e:	f04f 0301 	mov.w	r3, #1
 8003472:	9900      	ldr	r1, [sp, #0]
 8003474:	f109 0a01 	add.w	sl, r9, #1
 8003478:	7523      	strb	r3, [r4, #20]
 800347a:	f108 081c 	add.w	r8, r8, #28
 800347e:	6963      	ldr	r3, [r4, #20]
 8003480:	46d1      	mov	r9, sl
 8003482:	6125      	str	r5, [r4, #16]
 8003484:	fa1f fc8a 	uxth.w	ip, sl
 8003488:	f361 231f 	bfi	r3, r1, #8, #24
 800348c:	60a6      	str	r6, [r4, #8]
 800348e:	e9c4 0200 	strd	r0, r2, [r4]
 8003492:	2200      	movs	r2, #0
 8003494:	60e2      	str	r2, [r4, #12]
 8003496:	9a01      	ldr	r2, [sp, #4]
 8003498:	e9c4 3205 	strd	r3, r2, [r4, #20]
 800349c:	883b      	ldrh	r3, [r7, #0]
 800349e:	459a      	cmp	sl, r3
 80034a0:	f080 80aa 	bcs.w	80035f8 <ai_platform_inputs_get+0x24c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80a6 	beq.w	80035f8 <ai_platform_inputs_get+0x24c>
 80034ac:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	f000 80a1 	beq.w	80035f8 <ai_platform_inputs_get+0x24c>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 80034bc:	69a8      	ldr	r0, [r5, #24]
 80034be:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 80034c2:	68ab      	ldr	r3, [r5, #8]
 80034c4:	6800      	ldr	r0, [r0, #0]
 80034c6:	eb0a 060b 	add.w	r6, sl, fp
 80034ca:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80034ce:	4444      	add	r4, r8
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68eb      	ldr	r3, [r5, #12]
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	f003 fd13 	bl	8006f00 <ai_array_to_buffer_fmt>
 80034da:	69ab      	ldr	r3, [r5, #24]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	2e00      	cmp	r6, #0
 80034e0:	d0c4      	beq.n	800346c <ai_platform_inputs_get+0xc0>
 80034e2:	2300      	movs	r3, #0
 80034e4:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	6073      	str	r3, [r6, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1b6      	bne.n	800345e <ai_platform_inputs_get+0xb2>
 80034f0:	69ab      	ldr	r3, [r5, #24]
 80034f2:	2600      	movs	r6, #0
 80034f4:	e7ba      	b.n	800346c <ai_platform_inputs_get+0xc0>
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <ai_platform_inputs_get+0x2bc>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	680b      	ldr	r3, [r1, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1fc      	bne.n	80034fe <ai_platform_inputs_get+0x152>
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <ai_platform_inputs_get+0x2c0>)
 8003506:	495a      	ldr	r1, [pc, #360]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 8003508:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 800350a:	6019      	str	r1, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4293      	cmp	r3, r2
 8003510:	d086      	beq.n	8003420 <ai_platform_inputs_get+0x74>
 8003512:	e7fe      	b.n	8003512 <ai_platform_inputs_get+0x166>
 8003514:	f107 0010 	add.w	r0, r7, #16
 8003518:	2218      	movs	r2, #24
 800351a:	2111      	movs	r1, #17
 800351c:	f001 f978 	bl	8004810 <core_set_error>
 8003520:	2000      	movs	r0, #0
 8003522:	b005      	add	sp, #20
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003528:	4a4c      	ldr	r2, [pc, #304]	; (800365c <ai_platform_inputs_get+0x2b0>)
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	f7ff fd71 	bl	8003018 <_ai_platform_acquire_crc>
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <ai_platform_inputs_get+0x2b4>)
 8003538:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	185a      	adds	r2, r3, r1
 8003544:	2a01      	cmp	r2, #1
 8003546:	d91b      	bls.n	8003580 <ai_platform_inputs_get+0x1d4>
 8003548:	f240 4249 	movw	r2, #1097	; 0x449
 800354c:	4293      	cmp	r3, r2
 800354e:	d017      	beq.n	8003580 <ai_platform_inputs_get+0x1d4>
 8003550:	4b44      	ldr	r3, [pc, #272]	; (8003664 <ai_platform_inputs_get+0x2b8>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003558:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800355c:	d03d      	beq.n	80035da <ai_platform_inputs_get+0x22e>
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	f240 4183 	movw	r1, #1155	; 0x483
 8003564:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003568:	428a      	cmp	r2, r1
 800356a:	d027      	beq.n	80035bc <ai_platform_inputs_get+0x210>
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003572:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003576:	d012      	beq.n	800359e <ai_platform_inputs_get+0x1f2>
 8003578:	f7ff fd50 	bl	800301c <_ai_platform_release_crc>
 800357c:	2000      	movs	r0, #0
 800357e:	e7d0      	b.n	8003522 <ai_platform_inputs_get+0x176>
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <ai_platform_inputs_get+0x2bc>)
 8003582:	2201      	movs	r2, #1
 8003584:	4619      	mov	r1, r3
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	680b      	ldr	r3, [r1, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1fc      	bne.n	8003588 <ai_platform_inputs_get+0x1dc>
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <ai_platform_inputs_get+0x2c0>)
 8003590:	4937      	ldr	r1, [pc, #220]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 8003592:	4a38      	ldr	r2, [pc, #224]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 8003594:	6019      	str	r1, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4293      	cmp	r3, r2
 800359a:	d0ed      	beq.n	8003578 <ai_platform_inputs_get+0x1cc>
 800359c:	e7fe      	b.n	800359c <ai_platform_inputs_get+0x1f0>
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <ai_platform_inputs_get+0x2bc>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	4619      	mov	r1, r3
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	680b      	ldr	r3, [r1, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1fc      	bne.n	80035a6 <ai_platform_inputs_get+0x1fa>
 80035ac:	4b2f      	ldr	r3, [pc, #188]	; (800366c <ai_platform_inputs_get+0x2c0>)
 80035ae:	4930      	ldr	r1, [pc, #192]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 80035b0:	4a30      	ldr	r2, [pc, #192]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 80035b2:	6019      	str	r1, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d0de      	beq.n	8003578 <ai_platform_inputs_get+0x1cc>
 80035ba:	e7fe      	b.n	80035ba <ai_platform_inputs_get+0x20e>
 80035bc:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <ai_platform_inputs_get+0x2cc>)
 80035be:	2201      	movs	r2, #1
 80035c0:	4619      	mov	r1, r3
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	680b      	ldr	r3, [r1, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1fc      	bne.n	80035c4 <ai_platform_inputs_get+0x218>
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <ai_platform_inputs_get+0x2d0>)
 80035cc:	4928      	ldr	r1, [pc, #160]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 80035ce:	4a29      	ldr	r2, [pc, #164]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d0cf      	beq.n	8003578 <ai_platform_inputs_get+0x1cc>
 80035d8:	e7fe      	b.n	80035d8 <ai_platform_inputs_get+0x22c>
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <ai_platform_inputs_get+0x2cc>)
 80035dc:	2201      	movs	r2, #1
 80035de:	4619      	mov	r1, r3
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	680b      	ldr	r3, [r1, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1fc      	bne.n	80035e2 <ai_platform_inputs_get+0x236>
 80035e8:	4b24      	ldr	r3, [pc, #144]	; (800367c <ai_platform_inputs_get+0x2d0>)
 80035ea:	4921      	ldr	r1, [pc, #132]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 80035ec:	4a21      	ldr	r2, [pc, #132]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 80035ee:	6019      	str	r1, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d0c0      	beq.n	8003578 <ai_platform_inputs_get+0x1cc>
 80035f6:	e7fe      	b.n	80035f6 <ai_platform_inputs_get+0x24a>
 80035f8:	463e      	mov	r6, r7
 80035fa:	e9dd 7b02 	ldrd	r7, fp, [sp, #8]
 80035fe:	f1bc 0f00 	cmp.w	ip, #0
 8003602:	d087      	beq.n	8003514 <ai_platform_inputs_get+0x168>
 8003604:	68b3      	ldr	r3, [r6, #8]
 8003606:	6858      	ldr	r0, [r3, #4]
 8003608:	f1bb 0f00 	cmp.w	fp, #0
 800360c:	d089      	beq.n	8003522 <ai_platform_inputs_get+0x176>
 800360e:	f8ab c000 	strh.w	ip, [fp]
 8003612:	b005      	add	sp, #20
 8003614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <ai_platform_inputs_get+0x2bc>)
 800361a:	2201      	movs	r2, #1
 800361c:	4619      	mov	r1, r3
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	680b      	ldr	r3, [r1, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1fc      	bne.n	8003620 <ai_platform_inputs_get+0x274>
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <ai_platform_inputs_get+0x2c0>)
 8003628:	4911      	ldr	r1, [pc, #68]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 800362c:	6019      	str	r1, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4293      	cmp	r3, r2
 8003632:	f43f aef5 	beq.w	8003420 <ai_platform_inputs_get+0x74>
 8003636:	e7fe      	b.n	8003636 <ai_platform_inputs_get+0x28a>
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <ai_platform_inputs_get+0x2cc>)
 800363a:	2201      	movs	r2, #1
 800363c:	4619      	mov	r1, r3
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	680b      	ldr	r3, [r1, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1fc      	bne.n	8003640 <ai_platform_inputs_get+0x294>
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <ai_platform_inputs_get+0x2d0>)
 8003648:	4909      	ldr	r1, [pc, #36]	; (8003670 <ai_platform_inputs_get+0x2c4>)
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <ai_platform_inputs_get+0x2c8>)
 800364c:	6019      	str	r1, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4293      	cmp	r3, r2
 8003652:	f43f aee5 	beq.w	8003420 <ai_platform_inputs_get+0x74>
 8003656:	e7fe      	b.n	8003656 <ai_platform_inputs_get+0x2aa>
 8003658:	a1c00100 	.word	0xa1c00100
 800365c:	e0002000 	.word	0xe0002000
 8003660:	e0042000 	.word	0xe0042000
 8003664:	5c001000 	.word	0x5c001000
 8003668:	40023008 	.word	0x40023008
 800366c:	40023000 	.word	0x40023000
 8003670:	f407a5c2 	.word	0xf407a5c2
 8003674:	b5e8b5cd 	.word	0xb5e8b5cd
 8003678:	58024c08 	.word	0x58024c08
 800367c:	58024c00 	.word	0x58024c00
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <ai_platform_inputs_get+0x2f4>)
 8003682:	2201      	movs	r2, #1
 8003684:	4619      	mov	r1, r3
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	680b      	ldr	r3, [r1, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1fc      	bne.n	8003688 <ai_platform_inputs_get+0x2dc>
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <ai_platform_inputs_get+0x2f8>)
 8003690:	4905      	ldr	r1, [pc, #20]	; (80036a8 <ai_platform_inputs_get+0x2fc>)
 8003692:	4a06      	ldr	r2, [pc, #24]	; (80036ac <ai_platform_inputs_get+0x300>)
 8003694:	6019      	str	r1, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4293      	cmp	r3, r2
 800369a:	f43f aec1 	beq.w	8003420 <ai_platform_inputs_get+0x74>
 800369e:	e7fe      	b.n	800369e <ai_platform_inputs_get+0x2f2>
 80036a0:	58024c08 	.word	0x58024c08
 80036a4:	58024c00 	.word	0x58024c00
 80036a8:	f407a5c2 	.word	0xf407a5c2
 80036ac:	b5e8b5cd 	.word	0xb5e8b5cd

080036b0 <ai_platform_outputs_get>:
 80036b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b4:	b085      	sub	sp, #20
 80036b6:	2800      	cmp	r0, #0
 80036b8:	f000 80c1 	beq.w	800383e <ai_platform_outputs_get+0x18e>
 80036bc:	4ba8      	ldr	r3, [pc, #672]	; (8003960 <ai_platform_outputs_get+0x2b0>)
 80036be:	4607      	mov	r7, r0
 80036c0:	6802      	ldr	r2, [r0, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	f040 80bb 	bne.w	800383e <ai_platform_outputs_get+0x18e>
 80036c8:	4aa6      	ldr	r2, [pc, #664]	; (8003964 <ai_platform_outputs_get+0x2b4>)
 80036ca:	468b      	mov	fp, r1
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	f7ff fca0 	bl	8003018 <_ai_platform_acquire_crc>
 80036d8:	4ba3      	ldr	r3, [pc, #652]	; (8003968 <ai_platform_outputs_get+0x2b8>)
 80036da:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e4:	189a      	adds	r2, r3, r2
 80036e6:	2a01      	cmp	r2, #1
 80036e8:	f240 808a 	bls.w	8003800 <ai_platform_outputs_get+0x150>
 80036ec:	f240 4249 	movw	r2, #1097	; 0x449
 80036f0:	4293      	cmp	r3, r2
 80036f2:	f000 8085 	beq.w	8003800 <ai_platform_outputs_get+0x150>
 80036f6:	4b9d      	ldr	r3, [pc, #628]	; (800396c <ai_platform_outputs_get+0x2bc>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80036fe:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003702:	f000 8141 	beq.w	8003988 <ai_platform_outputs_get+0x2d8>
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	f240 4183 	movw	r1, #1155	; 0x483
 800370c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003710:	428a      	cmp	r2, r1
 8003712:	f000 8114 	beq.w	800393e <ai_platform_outputs_get+0x28e>
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800371c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003720:	f000 80fd 	beq.w	800391e <ai_platform_outputs_get+0x26e>
 8003724:	f7ff fc7a 	bl	800301c <_ai_platform_release_crc>
 8003728:	f1bb 0f00 	cmp.w	fp, #0
 800372c:	d002      	beq.n	8003734 <ai_platform_outputs_get+0x84>
 800372e:	2300      	movs	r3, #0
 8003730:	f8ab 3000 	strh.w	r3, [fp]
 8003734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003736:	2b01      	cmp	r3, #1
 8003738:	f240 80e9 	bls.w	800390e <ai_platform_outputs_get+0x25e>
 800373c:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800373e:	f116 0f0c 	cmn.w	r6, #12
 8003742:	f000 80e4 	beq.w	800390e <ai_platform_outputs_get+0x25e>
 8003746:	89b3      	ldrh	r3, [r6, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80e0 	beq.w	800390e <ai_platform_outputs_get+0x25e>
 800374e:	6933      	ldr	r3, [r6, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80dc 	beq.w	800390e <ai_platform_outputs_get+0x25e>
 8003756:	681d      	ldr	r5, [r3, #0]
 8003758:	2d00      	cmp	r5, #0
 800375a:	f000 80d8 	beq.w	800390e <ai_platform_outputs_get+0x25e>
 800375e:	f04f 0800 	mov.w	r8, #0
 8003762:	9702      	str	r7, [sp, #8]
 8003764:	f8cd b00c 	str.w	fp, [sp, #12]
 8003768:	4637      	mov	r7, r6
 800376a:	46c1      	mov	r9, r8
 800376c:	e028      	b.n	80037c0 <ai_platform_outputs_get+0x110>
 800376e:	885b      	ldrh	r3, [r3, #2]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d042      	beq.n	80037fa <ai_platform_outputs_get+0x14a>
 8003774:	2301      	movs	r3, #1
 8003776:	f84a 300b 	str.w	r3, [sl, fp]
 800377a:	69ab      	ldr	r3, [r5, #24]
 800377c:	685d      	ldr	r5, [r3, #4]
 800377e:	f04f 0301 	mov.w	r3, #1
 8003782:	9900      	ldr	r1, [sp, #0]
 8003784:	f109 0a01 	add.w	sl, r9, #1
 8003788:	7523      	strb	r3, [r4, #20]
 800378a:	f108 081c 	add.w	r8, r8, #28
 800378e:	6963      	ldr	r3, [r4, #20]
 8003790:	46d1      	mov	r9, sl
 8003792:	6125      	str	r5, [r4, #16]
 8003794:	fa1f fc8a 	uxth.w	ip, sl
 8003798:	f361 231f 	bfi	r3, r1, #8, #24
 800379c:	60a6      	str	r6, [r4, #8]
 800379e:	e9c4 0200 	strd	r0, r2, [r4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	60e2      	str	r2, [r4, #12]
 80037a6:	9a01      	ldr	r2, [sp, #4]
 80037a8:	e9c4 3205 	strd	r3, r2, [r4, #20]
 80037ac:	89bb      	ldrh	r3, [r7, #12]
 80037ae:	459a      	cmp	sl, r3
 80037b0:	d235      	bcs.n	800381e <ai_platform_outputs_get+0x16e>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d032      	beq.n	800381e <ai_platform_outputs_get+0x16e>
 80037b8:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
 80037bc:	2d00      	cmp	r5, #0
 80037be:	d02e      	beq.n	800381e <ai_platform_outputs_get+0x16e>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 80037c6:	69a8      	ldr	r0, [r5, #24]
 80037c8:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 80037cc:	68ab      	ldr	r3, [r5, #8]
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	eb0a 060b 	add.w	r6, sl, fp
 80037d4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80037d8:	4444      	add	r4, r8
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68eb      	ldr	r3, [r5, #12]
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	f003 fb8e 	bl	8006f00 <ai_array_to_buffer_fmt>
 80037e4:	69ab      	ldr	r3, [r5, #24]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	d0c7      	beq.n	800377c <ai_platform_outputs_get+0xcc>
 80037ec:	2300      	movs	r3, #0
 80037ee:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 80037f2:	682b      	ldr	r3, [r5, #0]
 80037f4:	6073      	str	r3, [r6, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1b9      	bne.n	800376e <ai_platform_outputs_get+0xbe>
 80037fa:	69ab      	ldr	r3, [r5, #24]
 80037fc:	2600      	movs	r6, #0
 80037fe:	e7bd      	b.n	800377c <ai_platform_outputs_get+0xcc>
 8003800:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <ai_platform_outputs_get+0x2c0>)
 8003802:	2201      	movs	r2, #1
 8003804:	4619      	mov	r1, r3
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	680b      	ldr	r3, [r1, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1fc      	bne.n	8003808 <ai_platform_outputs_get+0x158>
 800380e:	4b59      	ldr	r3, [pc, #356]	; (8003974 <ai_platform_outputs_get+0x2c4>)
 8003810:	4959      	ldr	r1, [pc, #356]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 8003812:	4a5a      	ldr	r2, [pc, #360]	; (800397c <ai_platform_outputs_get+0x2cc>)
 8003814:	6019      	str	r1, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4293      	cmp	r3, r2
 800381a:	d083      	beq.n	8003724 <ai_platform_outputs_get+0x74>
 800381c:	e7fe      	b.n	800381c <ai_platform_outputs_get+0x16c>
 800381e:	463e      	mov	r6, r7
 8003820:	e9dd 7b02 	ldrd	r7, fp, [sp, #8]
 8003824:	f1bc 0f00 	cmp.w	ip, #0
 8003828:	d071      	beq.n	800390e <ai_platform_outputs_get+0x25e>
 800382a:	6973      	ldr	r3, [r6, #20]
 800382c:	6858      	ldr	r0, [r3, #4]
 800382e:	f1bb 0f00 	cmp.w	fp, #0
 8003832:	d001      	beq.n	8003838 <ai_platform_outputs_get+0x188>
 8003834:	f8ab c000 	strh.w	ip, [fp]
 8003838:	b005      	add	sp, #20
 800383a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383e:	4a49      	ldr	r2, [pc, #292]	; (8003964 <ai_platform_outputs_get+0x2b4>)
 8003840:	6813      	ldr	r3, [r2, #0]
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	f7ff fbe6 	bl	8003018 <_ai_platform_acquire_crc>
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <ai_platform_outputs_get+0x2b8>)
 800384e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003858:	185a      	adds	r2, r3, r1
 800385a:	2a01      	cmp	r2, #1
 800385c:	d91b      	bls.n	8003896 <ai_platform_outputs_get+0x1e6>
 800385e:	f240 4249 	movw	r2, #1097	; 0x449
 8003862:	4293      	cmp	r3, r2
 8003864:	d017      	beq.n	8003896 <ai_platform_outputs_get+0x1e6>
 8003866:	4b41      	ldr	r3, [pc, #260]	; (800396c <ai_platform_outputs_get+0x2bc>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800386e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003872:	d03d      	beq.n	80038f0 <ai_platform_outputs_get+0x240>
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f240 4183 	movw	r1, #1155	; 0x483
 800387a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800387e:	428a      	cmp	r2, r1
 8003880:	d027      	beq.n	80038d2 <ai_platform_outputs_get+0x222>
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003888:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800388c:	d012      	beq.n	80038b4 <ai_platform_outputs_get+0x204>
 800388e:	f7ff fbc5 	bl	800301c <_ai_platform_release_crc>
 8003892:	2000      	movs	r0, #0
 8003894:	e7d0      	b.n	8003838 <ai_platform_outputs_get+0x188>
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <ai_platform_outputs_get+0x2c0>)
 8003898:	2201      	movs	r2, #1
 800389a:	4619      	mov	r1, r3
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	680b      	ldr	r3, [r1, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1fc      	bne.n	800389e <ai_platform_outputs_get+0x1ee>
 80038a4:	4b33      	ldr	r3, [pc, #204]	; (8003974 <ai_platform_outputs_get+0x2c4>)
 80038a6:	4934      	ldr	r1, [pc, #208]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 80038a8:	4a34      	ldr	r2, [pc, #208]	; (800397c <ai_platform_outputs_get+0x2cc>)
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d0ed      	beq.n	800388e <ai_platform_outputs_get+0x1de>
 80038b2:	e7fe      	b.n	80038b2 <ai_platform_outputs_get+0x202>
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <ai_platform_outputs_get+0x2c0>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	4619      	mov	r1, r3
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	680b      	ldr	r3, [r1, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1fc      	bne.n	80038bc <ai_platform_outputs_get+0x20c>
 80038c2:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <ai_platform_outputs_get+0x2c4>)
 80038c4:	492c      	ldr	r1, [pc, #176]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 80038c6:	4a2d      	ldr	r2, [pc, #180]	; (800397c <ai_platform_outputs_get+0x2cc>)
 80038c8:	6019      	str	r1, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d0de      	beq.n	800388e <ai_platform_outputs_get+0x1de>
 80038d0:	e7fe      	b.n	80038d0 <ai_platform_outputs_get+0x220>
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <ai_platform_outputs_get+0x2d0>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	4619      	mov	r1, r3
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	680b      	ldr	r3, [r1, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1fc      	bne.n	80038da <ai_platform_outputs_get+0x22a>
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <ai_platform_outputs_get+0x2d4>)
 80038e2:	4925      	ldr	r1, [pc, #148]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <ai_platform_outputs_get+0x2cc>)
 80038e6:	6019      	str	r1, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d0cf      	beq.n	800388e <ai_platform_outputs_get+0x1de>
 80038ee:	e7fe      	b.n	80038ee <ai_platform_outputs_get+0x23e>
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <ai_platform_outputs_get+0x2d0>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	4619      	mov	r1, r3
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	680b      	ldr	r3, [r1, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1fc      	bne.n	80038f8 <ai_platform_outputs_get+0x248>
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <ai_platform_outputs_get+0x2d4>)
 8003900:	491d      	ldr	r1, [pc, #116]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 8003902:	4a1e      	ldr	r2, [pc, #120]	; (800397c <ai_platform_outputs_get+0x2cc>)
 8003904:	6019      	str	r1, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4293      	cmp	r3, r2
 800390a:	d0c0      	beq.n	800388e <ai_platform_outputs_get+0x1de>
 800390c:	e7fe      	b.n	800390c <ai_platform_outputs_get+0x25c>
 800390e:	f107 0010 	add.w	r0, r7, #16
 8003912:	2218      	movs	r2, #24
 8003914:	2111      	movs	r1, #17
 8003916:	f000 ff7b 	bl	8004810 <core_set_error>
 800391a:	2000      	movs	r0, #0
 800391c:	e78c      	b.n	8003838 <ai_platform_outputs_get+0x188>
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <ai_platform_outputs_get+0x2c0>)
 8003920:	2201      	movs	r2, #1
 8003922:	4619      	mov	r1, r3
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	680b      	ldr	r3, [r1, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1fc      	bne.n	8003926 <ai_platform_outputs_get+0x276>
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <ai_platform_outputs_get+0x2c4>)
 800392e:	4912      	ldr	r1, [pc, #72]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <ai_platform_outputs_get+0x2cc>)
 8003932:	6019      	str	r1, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4293      	cmp	r3, r2
 8003938:	f43f aef4 	beq.w	8003724 <ai_platform_outputs_get+0x74>
 800393c:	e7fe      	b.n	800393c <ai_platform_outputs_get+0x28c>
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <ai_platform_outputs_get+0x2d0>)
 8003940:	2201      	movs	r2, #1
 8003942:	4619      	mov	r1, r3
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	680b      	ldr	r3, [r1, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1fc      	bne.n	8003946 <ai_platform_outputs_get+0x296>
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <ai_platform_outputs_get+0x2d4>)
 800394e:	490a      	ldr	r1, [pc, #40]	; (8003978 <ai_platform_outputs_get+0x2c8>)
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <ai_platform_outputs_get+0x2cc>)
 8003952:	6019      	str	r1, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4293      	cmp	r3, r2
 8003958:	f43f aee4 	beq.w	8003724 <ai_platform_outputs_get+0x74>
 800395c:	e7fe      	b.n	800395c <ai_platform_outputs_get+0x2ac>
 800395e:	bf00      	nop
 8003960:	a1c00100 	.word	0xa1c00100
 8003964:	e0002000 	.word	0xe0002000
 8003968:	e0042000 	.word	0xe0042000
 800396c:	5c001000 	.word	0x5c001000
 8003970:	40023008 	.word	0x40023008
 8003974:	40023000 	.word	0x40023000
 8003978:	f407a5c2 	.word	0xf407a5c2
 800397c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003980:	58024c08 	.word	0x58024c08
 8003984:	58024c00 	.word	0x58024c00
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <ai_platform_outputs_get+0x2f8>)
 800398a:	2201      	movs	r2, #1
 800398c:	4619      	mov	r1, r3
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1fc      	bne.n	8003990 <ai_platform_outputs_get+0x2e0>
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <ai_platform_outputs_get+0x2fc>)
 8003998:	4905      	ldr	r1, [pc, #20]	; (80039b0 <ai_platform_outputs_get+0x300>)
 800399a:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <ai_platform_outputs_get+0x304>)
 800399c:	6019      	str	r1, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	f43f aebf 	beq.w	8003724 <ai_platform_outputs_get+0x74>
 80039a6:	e7fe      	b.n	80039a6 <ai_platform_outputs_get+0x2f6>
 80039a8:	58024c08 	.word	0x58024c08
 80039ac:	58024c00 	.word	0x58024c00
 80039b0:	f407a5c2 	.word	0xf407a5c2
 80039b4:	b5e8b5cd 	.word	0xb5e8b5cd

080039b8 <ai_platform_network_create>:
 80039b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	4606      	mov	r6, r0
 80039c0:	4615      	mov	r5, r2
 80039c2:	461f      	mov	r7, r3
 80039c4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80039c8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80039cc:	f7ff fb24 	bl	8003018 <_ai_platform_acquire_crc>
 80039d0:	b328      	cbz	r0, 8003a1e <ai_platform_network_create+0x66>
 80039d2:	4baa      	ldr	r3, [pc, #680]	; (8003c7c <ai_platform_network_create+0x2c4>)
 80039d4:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 80039d8:	4602      	mov	r2, r0
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e0:	1919      	adds	r1, r3, r4
 80039e2:	2901      	cmp	r1, #1
 80039e4:	d921      	bls.n	8003a2a <ai_platform_network_create+0x72>
 80039e6:	f240 4149 	movw	r1, #1097	; 0x449
 80039ea:	428b      	cmp	r3, r1
 80039ec:	d01d      	beq.n	8003a2a <ai_platform_network_create+0x72>
 80039ee:	4ba4      	ldr	r3, [pc, #656]	; (8003c80 <ai_platform_network_create+0x2c8>)
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80039f6:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80039fa:	d01e      	beq.n	8003a3a <ai_platform_network_create+0x82>
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	f240 4483 	movw	r4, #1155	; 0x483
 8003a02:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8003a06:	42a1      	cmp	r1, r4
 8003a08:	f000 8085 	beq.w	8003b16 <ai_platform_network_create+0x15e>
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a12:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003a16:	f000 8157 	beq.w	8003cc8 <ai_platform_network_create+0x310>
 8003a1a:	f7ff faff 	bl	800301c <_ai_platform_release_crc>
 8003a1e:	f244 1333 	movw	r3, #16691	; 0x4133
 8003a22:	4618      	mov	r0, r3
 8003a24:	b002      	add	sp, #8
 8003a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2a:	4b96      	ldr	r3, [pc, #600]	; (8003c84 <ai_platform_network_create+0x2cc>)
 8003a2c:	2118      	movs	r1, #24
 8003a2e:	6019      	str	r1, [r3, #0]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	2918      	cmp	r1, #24
 8003a34:	d059      	beq.n	8003aea <ai_platform_network_create+0x132>
 8003a36:	4610      	mov	r0, r2
 8003a38:	e7ef      	b.n	8003a1a <ai_platform_network_create+0x62>
 8003a3a:	4b93      	ldr	r3, [pc, #588]	; (8003c88 <ai_platform_network_create+0x2d0>)
 8003a3c:	2118      	movs	r1, #24
 8003a3e:	6019      	str	r1, [r3, #0]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	2918      	cmp	r1, #24
 8003a44:	d1e9      	bne.n	8003a1a <ai_platform_network_create+0x62>
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	6803      	ldr	r3, [r0, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1fc      	bne.n	8003a4c <ai_platform_network_create+0x94>
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7ff fae2 	bl	800301c <_ai_platform_release_crc>
 8003a58:	4a8c      	ldr	r2, [pc, #560]	; (8003c8c <ai_platform_network_create+0x2d4>)
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	f7ff fad9 	bl	8003018 <_ai_platform_acquire_crc>
 8003a66:	4b85      	ldr	r3, [pc, #532]	; (8003c7c <ai_platform_network_create+0x2c4>)
 8003a68:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a72:	185a      	adds	r2, r3, r1
 8003a74:	2a01      	cmp	r2, #1
 8003a76:	d93f      	bls.n	8003af8 <ai_platform_network_create+0x140>
 8003a78:	f240 4249 	movw	r2, #1097	; 0x449
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <ai_platform_network_create+0x140>
 8003a80:	4b7f      	ldr	r3, [pc, #508]	; (8003c80 <ai_platform_network_create+0x2c8>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003a88:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003a8c:	f000 810c 	beq.w	8003ca8 <ai_platform_network_create+0x2f0>
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f240 4183 	movw	r1, #1155	; 0x483
 8003a96:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003a9a:	428a      	cmp	r2, r1
 8003a9c:	f000 80de 	beq.w	8003c5c <ai_platform_network_create+0x2a4>
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003aaa:	d07e      	beq.n	8003baa <ai_platform_network_create+0x1f2>
 8003aac:	f7ff fab6 	bl	800301c <_ai_platform_release_crc>
 8003ab0:	2e00      	cmp	r6, #0
 8003ab2:	d077      	beq.n	8003ba4 <ai_platform_network_create+0x1ec>
 8003ab4:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <ai_platform_network_create+0x2d8>)
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	6035      	str	r5, [r6, #0]
 8003aba:	f000 fea1 	bl	8004800 <core_init>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d137      	bne.n	8003b32 <ai_platform_network_create+0x17a>
 8003ac2:	2430      	movs	r4, #48	; 0x30
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f04f 0a10 	mov.w	sl, #16
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	464a      	mov	r2, r9
 8003ace:	4641      	mov	r1, r8
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f003 f9f7 	bl	8006ec4 <ai_version_get>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6468      	str	r0, [r5, #68]	; 0x44
 8003ada:	f364 0307 	bfi	r3, r4, #0, #8
 8003ade:	f36a 231f 	bfi	r3, sl, #8, #24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	b002      	add	sp, #8
 8003ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	6019      	str	r1, [r3, #0]
 8003af0:	6803      	ldr	r3, [r0, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1fc      	bne.n	8003af0 <ai_platform_network_create+0x138>
 8003af6:	e7ac      	b.n	8003a52 <ai_platform_network_create+0x9a>
 8003af8:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <ai_platform_network_create+0x2cc>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	4619      	mov	r1, r3
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1fc      	bne.n	8003b00 <ai_platform_network_create+0x148>
 8003b06:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <ai_platform_network_create+0x2dc>)
 8003b08:	4963      	ldr	r1, [pc, #396]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003b0a:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d0cb      	beq.n	8003aac <ai_platform_network_create+0xf4>
 8003b14:	e7fe      	b.n	8003b14 <ai_platform_network_create+0x15c>
 8003b16:	4b5c      	ldr	r3, [pc, #368]	; (8003c88 <ai_platform_network_create+0x2d0>)
 8003b18:	2118      	movs	r1, #24
 8003b1a:	6019      	str	r1, [r3, #0]
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	2918      	cmp	r1, #24
 8003b20:	f47f af7b 	bne.w	8003a1a <ai_platform_network_create+0x62>
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1fc      	bne.n	8003b2a <ai_platform_network_create+0x172>
 8003b30:	e78f      	b.n	8003a52 <ai_platform_network_create+0x9a>
 8003b32:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <ai_platform_network_create+0x2d4>)
 8003b34:	6813      	ldr	r3, [r2, #0]
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	f7ff fa6c 	bl	8003018 <_ai_platform_acquire_crc>
 8003b40:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <ai_platform_network_create+0x2c4>)
 8003b42:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4c:	189a      	adds	r2, r3, r2
 8003b4e:	2a01      	cmp	r2, #1
 8003b50:	d975      	bls.n	8003c3e <ai_platform_network_create+0x286>
 8003b52:	f240 4249 	movw	r2, #1097	; 0x449
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d071      	beq.n	8003c3e <ai_platform_network_create+0x286>
 8003b5a:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <ai_platform_network_create+0x2c8>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003b62:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003b66:	d05b      	beq.n	8003c20 <ai_platform_network_create+0x268>
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f240 4183 	movw	r1, #1155	; 0x483
 8003b6e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003b72:	428a      	cmp	r2, r1
 8003b74:	d045      	beq.n	8003c02 <ai_platform_network_create+0x24a>
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003b80:	d030      	beq.n	8003be4 <ai_platform_network_create+0x22c>
 8003b82:	f7ff fa4b 	bl	800301c <_ai_platform_release_crc>
 8003b86:	2200      	movs	r2, #0
 8003b88:	4641      	mov	r1, r8
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f003 f99a 	bl	8006ec4 <ai_version_get>
 8003b90:	4604      	mov	r4, r0
 8003b92:	2200      	movs	r2, #0
 8003b94:	2105      	movs	r1, #5
 8003b96:	2001      	movs	r0, #1
 8003b98:	f003 f994 	bl	8006ec4 <ai_version_get>
 8003b9c:	4284      	cmp	r4, r0
 8003b9e:	d014      	beq.n	8003bca <ai_platform_network_create+0x212>
 8003ba0:	2401      	movs	r4, #1
 8003ba2:	e78f      	b.n	8003ac4 <ai_platform_network_create+0x10c>
 8003ba4:	f241 0310 	movw	r3, #4112	; 0x1010
 8003ba8:	e73b      	b.n	8003a22 <ai_platform_network_create+0x6a>
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <ai_platform_network_create+0x2cc>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	4619      	mov	r1, r3
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	680b      	ldr	r3, [r1, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1fc      	bne.n	8003bb2 <ai_platform_network_create+0x1fa>
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <ai_platform_network_create+0x2dc>)
 8003bba:	4937      	ldr	r1, [pc, #220]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003bbc:	4a37      	ldr	r2, [pc, #220]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003bbe:	6019      	str	r1, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	f43f af72 	beq.w	8003aac <ai_platform_network_create+0xf4>
 8003bc8:	e7fe      	b.n	8003bc8 <ai_platform_network_create+0x210>
 8003bca:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <ai_platform_network_create+0x2e8>)
 8003bcc:	a802      	add	r0, sp, #8
 8003bce:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003bd2:	f003 f8d7 	bl	8006d84 <ai_check_custom_types>
 8003bd6:	b118      	cbz	r0, 8003be0 <ai_platform_network_create+0x228>
 8003bd8:	f04f 0a00 	mov.w	sl, #0
 8003bdc:	4654      	mov	r4, sl
 8003bde:	e775      	b.n	8003acc <ai_platform_network_create+0x114>
 8003be0:	2402      	movs	r4, #2
 8003be2:	e76f      	b.n	8003ac4 <ai_platform_network_create+0x10c>
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <ai_platform_network_create+0x2cc>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	4619      	mov	r1, r3
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	680b      	ldr	r3, [r1, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1fc      	bne.n	8003bec <ai_platform_network_create+0x234>
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <ai_platform_network_create+0x2dc>)
 8003bf4:	4928      	ldr	r1, [pc, #160]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003bf6:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003bf8:	6019      	str	r1, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d0c0      	beq.n	8003b82 <ai_platform_network_create+0x1ca>
 8003c00:	e7fe      	b.n	8003c00 <ai_platform_network_create+0x248>
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <ai_platform_network_create+0x2d0>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	4619      	mov	r1, r3
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	680b      	ldr	r3, [r1, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1fc      	bne.n	8003c0a <ai_platform_network_create+0x252>
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <ai_platform_network_create+0x2ec>)
 8003c12:	4921      	ldr	r1, [pc, #132]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003c14:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003c16:	6019      	str	r1, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d0b1      	beq.n	8003b82 <ai_platform_network_create+0x1ca>
 8003c1e:	e7fe      	b.n	8003c1e <ai_platform_network_create+0x266>
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <ai_platform_network_create+0x2d0>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	4619      	mov	r1, r3
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	680b      	ldr	r3, [r1, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1fc      	bne.n	8003c28 <ai_platform_network_create+0x270>
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <ai_platform_network_create+0x2ec>)
 8003c30:	4919      	ldr	r1, [pc, #100]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003c34:	6019      	str	r1, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d0a2      	beq.n	8003b82 <ai_platform_network_create+0x1ca>
 8003c3c:	e7fe      	b.n	8003c3c <ai_platform_network_create+0x284>
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <ai_platform_network_create+0x2cc>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	4619      	mov	r1, r3
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	680b      	ldr	r3, [r1, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1fc      	bne.n	8003c46 <ai_platform_network_create+0x28e>
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <ai_platform_network_create+0x2dc>)
 8003c4e:	4912      	ldr	r1, [pc, #72]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003c50:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003c52:	6019      	str	r1, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d093      	beq.n	8003b82 <ai_platform_network_create+0x1ca>
 8003c5a:	e7fe      	b.n	8003c5a <ai_platform_network_create+0x2a2>
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <ai_platform_network_create+0x2d0>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4619      	mov	r1, r3
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	680b      	ldr	r3, [r1, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1fc      	bne.n	8003c64 <ai_platform_network_create+0x2ac>
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <ai_platform_network_create+0x2ec>)
 8003c6c:	490a      	ldr	r1, [pc, #40]	; (8003c98 <ai_platform_network_create+0x2e0>)
 8003c6e:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <ai_platform_network_create+0x2e4>)
 8003c70:	6019      	str	r1, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4293      	cmp	r3, r2
 8003c76:	f43f af19 	beq.w	8003aac <ai_platform_network_create+0xf4>
 8003c7a:	e7fe      	b.n	8003c7a <ai_platform_network_create+0x2c2>
 8003c7c:	e0042000 	.word	0xe0042000
 8003c80:	5c001000 	.word	0x5c001000
 8003c84:	40023008 	.word	0x40023008
 8003c88:	58024c08 	.word	0x58024c08
 8003c8c:	e0002000 	.word	0xe0002000
 8003c90:	a1c00100 	.word	0xa1c00100
 8003c94:	40023000 	.word	0x40023000
 8003c98:	f407a5c2 	.word	0xf407a5c2
 8003c9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ca0:	84048403 	.word	0x84048403
 8003ca4:	58024c00 	.word	0x58024c00
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <ai_platform_network_create+0x32c>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	4619      	mov	r1, r3
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	680b      	ldr	r3, [r1, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1fc      	bne.n	8003cb0 <ai_platform_network_create+0x2f8>
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <ai_platform_network_create+0x330>)
 8003cb8:	490c      	ldr	r1, [pc, #48]	; (8003cec <ai_platform_network_create+0x334>)
 8003cba:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <ai_platform_network_create+0x338>)
 8003cbc:	6019      	str	r1, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	f43f aef3 	beq.w	8003aac <ai_platform_network_create+0xf4>
 8003cc6:	e7fe      	b.n	8003cc6 <ai_platform_network_create+0x30e>
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <ai_platform_network_create+0x33c>)
 8003cca:	2118      	movs	r1, #24
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	2918      	cmp	r1, #24
 8003cd2:	f47f aea2 	bne.w	8003a1a <ai_platform_network_create+0x62>
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	6019      	str	r1, [r3, #0]
 8003cdc:	6803      	ldr	r3, [r0, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1fc      	bne.n	8003cdc <ai_platform_network_create+0x324>
 8003ce2:	e6b6      	b.n	8003a52 <ai_platform_network_create+0x9a>
 8003ce4:	58024c08 	.word	0x58024c08
 8003ce8:	58024c00 	.word	0x58024c00
 8003cec:	f407a5c2 	.word	0xf407a5c2
 8003cf0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003cf4:	40023008 	.word	0x40023008

08003cf8 <ai_platform_network_init>:
 8003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d05a      	beq.n	8003db6 <ai_platform_network_init+0xbe>
 8003d00:	4ba7      	ldr	r3, [pc, #668]	; (8003fa0 <ai_platform_network_init+0x2a8>)
 8003d02:	4604      	mov	r4, r0
 8003d04:	6802      	ldr	r2, [r0, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d155      	bne.n	8003db6 <ai_platform_network_init+0xbe>
 8003d0a:	4aa6      	ldr	r2, [pc, #664]	; (8003fa4 <ai_platform_network_init+0x2ac>)
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	f7ff f97f 	bl	8003018 <_ai_platform_acquire_crc>
 8003d1a:	4ba3      	ldr	r3, [pc, #652]	; (8003fa8 <ai_platform_network_init+0x2b0>)
 8003d1c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d26:	189a      	adds	r2, r3, r2
 8003d28:	2a01      	cmp	r2, #1
 8003d2a:	d935      	bls.n	8003d98 <ai_platform_network_init+0xa0>
 8003d2c:	f240 4249 	movw	r2, #1097	; 0x449
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <ai_platform_network_init+0xa0>
 8003d34:	4b9d      	ldr	r3, [pc, #628]	; (8003fac <ai_platform_network_init+0x2b4>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003d3c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003d40:	f000 8154 	beq.w	8003fec <ai_platform_network_init+0x2f4>
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	f240 4183 	movw	r1, #1155	; 0x483
 8003d4a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003d4e:	428a      	cmp	r2, r1
 8003d50:	f000 813c 	beq.w	8003fcc <ai_platform_network_init+0x2d4>
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003d5e:	f000 8107 	beq.w	8003f70 <ai_platform_network_init+0x278>
 8003d62:	f7ff f95b 	bl	800301c <_ai_platform_release_crc>
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	f000 8112 	beq.w	8003f90 <ai_platform_network_init+0x298>
 8003d6c:	4b90      	ldr	r3, [pc, #576]	; (8003fb0 <ai_platform_network_init+0x2b8>)
 8003d6e:	682a      	ldr	r2, [r5, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d14e      	bne.n	8003e12 <ai_platform_network_init+0x11a>
 8003d74:	6928      	ldr	r0, [r5, #16]
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	89ee      	ldrh	r6, [r5, #14]
 8003d7a:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 8003d7e:	62a0      	str	r0, [r4, #40]	; 0x28
 8003d80:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003d84:	2203      	movs	r2, #3
 8003d86:	84e6      	strh	r6, [r4, #38]	; 0x26
 8003d88:	84a3      	strh	r3, [r4, #36]	; 0x24
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	60e2      	str	r2, [r4, #12]
 8003d8e:	f003 f823 	bl	8006dd8 <ai_layers_init_all>
 8003d92:	4620      	mov	r0, r4
 8003d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d98:	4b86      	ldr	r3, [pc, #536]	; (8003fb4 <ai_platform_network_init+0x2bc>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	680b      	ldr	r3, [r1, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1fc      	bne.n	8003da0 <ai_platform_network_init+0xa8>
 8003da6:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <ai_platform_network_init+0x2c0>)
 8003da8:	4984      	ldr	r1, [pc, #528]	; (8003fbc <ai_platform_network_init+0x2c4>)
 8003daa:	4a85      	ldr	r2, [pc, #532]	; (8003fc0 <ai_platform_network_init+0x2c8>)
 8003dac:	6019      	str	r1, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d0d6      	beq.n	8003d62 <ai_platform_network_init+0x6a>
 8003db4:	e7fe      	b.n	8003db4 <ai_platform_network_init+0xbc>
 8003db6:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <ai_platform_network_init+0x2ac>)
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	f7ff f92a 	bl	8003018 <_ai_platform_acquire_crc>
 8003dc4:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <ai_platform_network_init+0x2b0>)
 8003dc6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd0:	185a      	adds	r2, r3, r1
 8003dd2:	2a01      	cmp	r2, #1
 8003dd4:	d93f      	bls.n	8003e56 <ai_platform_network_init+0x15e>
 8003dd6:	f240 4249 	movw	r2, #1097	; 0x449
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <ai_platform_network_init+0x15e>
 8003dde:	4b73      	ldr	r3, [pc, #460]	; (8003fac <ai_platform_network_init+0x2b4>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003de6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003dea:	f000 80a5 	beq.w	8003f38 <ai_platform_network_init+0x240>
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f240 4183 	movw	r1, #1155	; 0x483
 8003df4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003df8:	428a      	cmp	r2, r1
 8003dfa:	f000 808d 	beq.w	8003f18 <ai_platform_network_init+0x220>
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e04:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003e08:	d076      	beq.n	8003ef8 <ai_platform_network_init+0x200>
 8003e0a:	f7ff f907 	bl	800301c <_ai_platform_release_crc>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	e7c0      	b.n	8003d94 <ai_platform_network_init+0x9c>
 8003e12:	2101      	movs	r1, #1
 8003e14:	4628      	mov	r0, r5
 8003e16:	f105 081c 	add.w	r8, r5, #28
 8003e1a:	686f      	ldr	r7, [r5, #4]
 8003e1c:	f7ff f8b0 	bl	8002f80 <ai_buffer_get_size>
 8003e20:	4681      	mov	r9, r0
 8003e22:	2101      	movs	r1, #1
 8003e24:	4640      	mov	r0, r8
 8003e26:	6a2e      	ldr	r6, [r5, #32]
 8003e28:	f7ff f8aa 	bl	8002f80 <ai_buffer_get_size>
 8003e2c:	f1b9 0f00 	cmp.w	r9, #0
 8003e30:	d020      	beq.n	8003e74 <ai_platform_network_init+0x17c>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	f040 8090 	bne.w	8003f58 <ai_platform_network_init+0x260>
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	2f00      	cmp	r7, #0
 8003e3e:	f000 808f 	beq.w	8003f60 <ai_platform_network_init+0x268>
 8003e42:	8be7      	ldrh	r7, [r4, #30]
 8003e44:	bb7f      	cbnz	r7, 8003ea6 <ai_platform_network_init+0x1ae>
 8003e46:	f104 0010 	add.w	r0, r4, #16
 8003e4a:	2212      	movs	r2, #18
 8003e4c:	2116      	movs	r1, #22
 8003e4e:	f000 fcdf 	bl	8004810 <core_set_error>
 8003e52:	4638      	mov	r0, r7
 8003e54:	e79e      	b.n	8003d94 <ai_platform_network_init+0x9c>
 8003e56:	4b57      	ldr	r3, [pc, #348]	; (8003fb4 <ai_platform_network_init+0x2bc>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1fc      	bne.n	8003e5e <ai_platform_network_init+0x166>
 8003e64:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <ai_platform_network_init+0x2c0>)
 8003e66:	4955      	ldr	r1, [pc, #340]	; (8003fbc <ai_platform_network_init+0x2c4>)
 8003e68:	4a55      	ldr	r2, [pc, #340]	; (8003fc0 <ai_platform_network_init+0x2c8>)
 8003e6a:	6019      	str	r1, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d0cb      	beq.n	8003e0a <ai_platform_network_init+0x112>
 8003e72:	e7fe      	b.n	8003e72 <ai_platform_network_init+0x17a>
 8003e74:	b970      	cbnz	r0, 8003e94 <ai_platform_network_init+0x19c>
 8003e76:	4680      	mov	r8, r0
 8003e78:	4606      	mov	r6, r0
 8003e7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	42b3      	cmp	r3, r6
 8003e80:	61e2      	str	r2, [r4, #28]
 8003e82:	d21e      	bcs.n	8003ec2 <ai_platform_network_init+0x1ca>
 8003e84:	f104 0010 	add.w	r0, r4, #16
 8003e88:	2213      	movs	r2, #19
 8003e8a:	2116      	movs	r1, #22
 8003e8c:	f000 fcc0 	bl	8004810 <core_set_error>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e77f      	b.n	8003d94 <ai_platform_network_init+0x9c>
 8003e94:	bb66      	cbnz	r6, 8003ef0 <ai_platform_network_init+0x1f8>
 8003e96:	f104 0010 	add.w	r0, r4, #16
 8003e9a:	2213      	movs	r2, #19
 8003e9c:	2110      	movs	r1, #16
 8003e9e:	f000 fcb7 	bl	8004810 <core_set_error>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e776      	b.n	8003d94 <ai_platform_network_init+0x9c>
 8003ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ea8:	6a27      	ldr	r7, [r4, #32]
 8003eaa:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 8003eae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003eb4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003eb8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003eba:	f8c4 c01c 	str.w	ip, [r4, #28]
 8003ebe:	42b3      	cmp	r3, r6
 8003ec0:	d3e0      	bcc.n	8003e84 <ai_platform_network_init+0x18c>
 8003ec2:	b1be      	cbz	r6, 8003ef4 <ai_platform_network_init+0x1fc>
 8003ec4:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8003ec8:	f04f 0e00 	mov.w	lr, #0
 8003ecc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003ed0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003ed2:	eb08 070e 	add.w	r7, r8, lr
 8003ed6:	4475      	add	r5, lr
 8003ed8:	f10e 0e1c 	add.w	lr, lr, #28
 8003edc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003ede:	45f4      	cmp	ip, lr
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003ee6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003eea:	d1f1      	bne.n	8003ed0 <ai_platform_network_init+0x1d8>
 8003eec:	2300      	movs	r3, #0
 8003eee:	e749      	b.n	8003d84 <ai_platform_network_init+0x8c>
 8003ef0:	2601      	movs	r6, #1
 8003ef2:	e7c2      	b.n	8003e7a <ai_platform_network_init+0x182>
 8003ef4:	4633      	mov	r3, r6
 8003ef6:	e745      	b.n	8003d84 <ai_platform_network_init+0x8c>
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <ai_platform_network_init+0x2bc>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	4619      	mov	r1, r3
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	680b      	ldr	r3, [r1, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1fc      	bne.n	8003f00 <ai_platform_network_init+0x208>
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <ai_platform_network_init+0x2c0>)
 8003f08:	492c      	ldr	r1, [pc, #176]	; (8003fbc <ai_platform_network_init+0x2c4>)
 8003f0a:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <ai_platform_network_init+0x2c8>)
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f43f af7a 	beq.w	8003e0a <ai_platform_network_init+0x112>
 8003f16:	e7fe      	b.n	8003f16 <ai_platform_network_init+0x21e>
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <ai_platform_network_init+0x2cc>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	680b      	ldr	r3, [r1, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1fc      	bne.n	8003f20 <ai_platform_network_init+0x228>
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <ai_platform_network_init+0x2d0>)
 8003f28:	4924      	ldr	r1, [pc, #144]	; (8003fbc <ai_platform_network_init+0x2c4>)
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <ai_platform_network_init+0x2c8>)
 8003f2c:	6019      	str	r1, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4293      	cmp	r3, r2
 8003f32:	f43f af6a 	beq.w	8003e0a <ai_platform_network_init+0x112>
 8003f36:	e7fe      	b.n	8003f36 <ai_platform_network_init+0x23e>
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <ai_platform_network_init+0x2cc>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	680b      	ldr	r3, [r1, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1fc      	bne.n	8003f40 <ai_platform_network_init+0x248>
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <ai_platform_network_init+0x2d0>)
 8003f48:	491c      	ldr	r1, [pc, #112]	; (8003fbc <ai_platform_network_init+0x2c4>)
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <ai_platform_network_init+0x2c8>)
 8003f4c:	6019      	str	r1, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	f43f af5a 	beq.w	8003e0a <ai_platform_network_init+0x112>
 8003f56:	e7fe      	b.n	8003f56 <ai_platform_network_init+0x25e>
 8003f58:	2e00      	cmp	r6, #0
 8003f5a:	d09c      	beq.n	8003e96 <ai_platform_network_init+0x19e>
 8003f5c:	2601      	movs	r6, #1
 8003f5e:	e76d      	b.n	8003e3c <ai_platform_network_init+0x144>
 8003f60:	f104 0010 	add.w	r0, r4, #16
 8003f64:	2212      	movs	r2, #18
 8003f66:	2110      	movs	r1, #16
 8003f68:	f000 fc52 	bl	8004810 <core_set_error>
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	e711      	b.n	8003d94 <ai_platform_network_init+0x9c>
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <ai_platform_network_init+0x2bc>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	4619      	mov	r1, r3
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	680b      	ldr	r3, [r1, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1fc      	bne.n	8003f78 <ai_platform_network_init+0x280>
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <ai_platform_network_init+0x2c0>)
 8003f80:	490e      	ldr	r1, [pc, #56]	; (8003fbc <ai_platform_network_init+0x2c4>)
 8003f82:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <ai_platform_network_init+0x2c8>)
 8003f84:	6019      	str	r1, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	f43f aeea 	beq.w	8003d62 <ai_platform_network_init+0x6a>
 8003f8e:	e7fe      	b.n	8003f8e <ai_platform_network_init+0x296>
 8003f90:	f104 0010 	add.w	r0, r4, #16
 8003f94:	2211      	movs	r2, #17
 8003f96:	2110      	movs	r1, #16
 8003f98:	f000 fc3a 	bl	8004810 <core_set_error>
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	e6f9      	b.n	8003d94 <ai_platform_network_init+0x9c>
 8003fa0:	a1c00100 	.word	0xa1c00100
 8003fa4:	e0002000 	.word	0xe0002000
 8003fa8:	e0042000 	.word	0xe0042000
 8003fac:	5c001000 	.word	0x5c001000
 8003fb0:	a1facade 	.word	0xa1facade
 8003fb4:	40023008 	.word	0x40023008
 8003fb8:	40023000 	.word	0x40023000
 8003fbc:	f407a5c2 	.word	0xf407a5c2
 8003fc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003fc4:	58024c08 	.word	0x58024c08
 8003fc8:	58024c00 	.word	0x58024c00
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <ai_platform_network_init+0x314>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	680b      	ldr	r3, [r1, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1fc      	bne.n	8003fd4 <ai_platform_network_init+0x2dc>
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <ai_platform_network_init+0x318>)
 8003fdc:	490d      	ldr	r1, [pc, #52]	; (8004014 <ai_platform_network_init+0x31c>)
 8003fde:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <ai_platform_network_init+0x320>)
 8003fe0:	6019      	str	r1, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f43f aebc 	beq.w	8003d62 <ai_platform_network_init+0x6a>
 8003fea:	e7fe      	b.n	8003fea <ai_platform_network_init+0x2f2>
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <ai_platform_network_init+0x314>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	680b      	ldr	r3, [r1, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1fc      	bne.n	8003ff4 <ai_platform_network_init+0x2fc>
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <ai_platform_network_init+0x318>)
 8003ffc:	4905      	ldr	r1, [pc, #20]	; (8004014 <ai_platform_network_init+0x31c>)
 8003ffe:	4a06      	ldr	r2, [pc, #24]	; (8004018 <ai_platform_network_init+0x320>)
 8004000:	6019      	str	r1, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4293      	cmp	r3, r2
 8004006:	f43f aeac 	beq.w	8003d62 <ai_platform_network_init+0x6a>
 800400a:	e7fe      	b.n	800400a <ai_platform_network_init+0x312>
 800400c:	58024c08 	.word	0x58024c08
 8004010:	58024c00 	.word	0x58024c00
 8004014:	f407a5c2 	.word	0xf407a5c2
 8004018:	b5e8b5cd 	.word	0xb5e8b5cd

0800401c <ai_platform_network_post_init>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	b120      	cbz	r0, 800402a <ai_platform_network_post_init+0xe>
 8004020:	4b7f      	ldr	r3, [pc, #508]	; (8004220 <ai_platform_network_post_init+0x204>)
 8004022:	4604      	mov	r4, r0
 8004024:	6802      	ldr	r2, [r0, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d03c      	beq.n	80040a4 <ai_platform_network_post_init+0x88>
 800402a:	4a7e      	ldr	r2, [pc, #504]	; (8004224 <ai_platform_network_post_init+0x208>)
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	f7fe fff0 	bl	8003018 <_ai_platform_acquire_crc>
 8004038:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <ai_platform_network_post_init+0x20c>)
 800403a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004044:	185a      	adds	r2, r3, r1
 8004046:	2a01      	cmp	r2, #1
 8004048:	d91d      	bls.n	8004086 <ai_platform_network_post_init+0x6a>
 800404a:	f240 4249 	movw	r2, #1097	; 0x449
 800404e:	4293      	cmp	r3, r2
 8004050:	d019      	beq.n	8004086 <ai_platform_network_post_init+0x6a>
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <ai_platform_network_post_init+0x210>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800405a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800405e:	f000 80a7 	beq.w	80041b0 <ai_platform_network_post_init+0x194>
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	f240 4183 	movw	r1, #1155	; 0x483
 8004068:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800406c:	428a      	cmp	r2, r1
 800406e:	f000 808f 	beq.w	8004190 <ai_platform_network_post_init+0x174>
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004078:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800407c:	d05b      	beq.n	8004136 <ai_platform_network_post_init+0x11a>
 800407e:	f7fe ffcd 	bl	800301c <_ai_platform_release_crc>
 8004082:	2000      	movs	r0, #0
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <ai_platform_network_post_init+0x214>)
 8004088:	2201      	movs	r2, #1
 800408a:	4619      	mov	r1, r3
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	680b      	ldr	r3, [r1, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1fc      	bne.n	800408e <ai_platform_network_post_init+0x72>
 8004094:	4b67      	ldr	r3, [pc, #412]	; (8004234 <ai_platform_network_post_init+0x218>)
 8004096:	4968      	ldr	r1, [pc, #416]	; (8004238 <ai_platform_network_post_init+0x21c>)
 8004098:	4a68      	ldr	r2, [pc, #416]	; (800423c <ai_platform_network_post_init+0x220>)
 800409a:	6019      	str	r1, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d0ed      	beq.n	800407e <ai_platform_network_post_init+0x62>
 80040a2:	e7fe      	b.n	80040a2 <ai_platform_network_post_init+0x86>
 80040a4:	4a5f      	ldr	r2, [pc, #380]	; (8004224 <ai_platform_network_post_init+0x208>)
 80040a6:	6813      	ldr	r3, [r2, #0]
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	f7fe ffb3 	bl	8003018 <_ai_platform_acquire_crc>
 80040b2:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <ai_platform_network_post_init+0x20c>)
 80040b4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040be:	189a      	adds	r2, r3, r2
 80040c0:	2a01      	cmp	r2, #1
 80040c2:	d956      	bls.n	8004172 <ai_platform_network_post_init+0x156>
 80040c4:	f240 4249 	movw	r2, #1097	; 0x449
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d052      	beq.n	8004172 <ai_platform_network_post_init+0x156>
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <ai_platform_network_post_init+0x210>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80040d4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80040d8:	d03c      	beq.n	8004154 <ai_platform_network_post_init+0x138>
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f240 4183 	movw	r1, #1155	; 0x483
 80040e0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80040e4:	428a      	cmp	r2, r1
 80040e6:	f000 8082 	beq.w	80041ee <ai_platform_network_post_init+0x1d2>
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040f0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80040f4:	d06c      	beq.n	80041d0 <ai_platform_network_post_init+0x1b4>
 80040f6:	f7fe ff91 	bl	800301c <_ai_platform_release_crc>
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	f013 0502 	ands.w	r5, r3, #2
 8004100:	f000 8085 	beq.w	800420e <ai_platform_network_post_init+0x1f2>
 8004104:	4620      	mov	r0, r4
 8004106:	f002 fe7b 	bl	8006e00 <ai_layers_post_init_all>
 800410a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800410c:	b18b      	cbz	r3, 8004132 <ai_platform_network_post_init+0x116>
 800410e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004110:	b90d      	cbnz	r5, 8004116 <ai_platform_network_post_init+0xfa>
 8004112:	e00e      	b.n	8004132 <ai_platform_network_post_init+0x116>
 8004114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004116:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004118:	4629      	mov	r1, r5
 800411a:	2000      	movs	r0, #0
 800411c:	4798      	blx	r3
 800411e:	692a      	ldr	r2, [r5, #16]
 8004120:	1b53      	subs	r3, r2, r5
 8004122:	4615      	mov	r5, r2
 8004124:	bf18      	it	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2a00      	cmp	r2, #0
 800412a:	bf08      	it	eq
 800412c:	2300      	moveq	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <ai_platform_network_post_init+0xf8>
 8004132:	2001      	movs	r0, #1
 8004134:	bd38      	pop	{r3, r4, r5, pc}
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <ai_platform_network_post_init+0x214>)
 8004138:	2201      	movs	r2, #1
 800413a:	4619      	mov	r1, r3
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	680b      	ldr	r3, [r1, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1fc      	bne.n	800413e <ai_platform_network_post_init+0x122>
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <ai_platform_network_post_init+0x218>)
 8004146:	493c      	ldr	r1, [pc, #240]	; (8004238 <ai_platform_network_post_init+0x21c>)
 8004148:	4a3c      	ldr	r2, [pc, #240]	; (800423c <ai_platform_network_post_init+0x220>)
 800414a:	6019      	str	r1, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4293      	cmp	r3, r2
 8004150:	d095      	beq.n	800407e <ai_platform_network_post_init+0x62>
 8004152:	e7fe      	b.n	8004152 <ai_platform_network_post_init+0x136>
 8004154:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <ai_platform_network_post_init+0x224>)
 8004156:	2201      	movs	r2, #1
 8004158:	4619      	mov	r1, r3
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	680b      	ldr	r3, [r1, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1fc      	bne.n	800415c <ai_platform_network_post_init+0x140>
 8004162:	4b38      	ldr	r3, [pc, #224]	; (8004244 <ai_platform_network_post_init+0x228>)
 8004164:	4934      	ldr	r1, [pc, #208]	; (8004238 <ai_platform_network_post_init+0x21c>)
 8004166:	4a35      	ldr	r2, [pc, #212]	; (800423c <ai_platform_network_post_init+0x220>)
 8004168:	6019      	str	r1, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4293      	cmp	r3, r2
 800416e:	d0c2      	beq.n	80040f6 <ai_platform_network_post_init+0xda>
 8004170:	e7fe      	b.n	8004170 <ai_platform_network_post_init+0x154>
 8004172:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <ai_platform_network_post_init+0x214>)
 8004174:	2201      	movs	r2, #1
 8004176:	4619      	mov	r1, r3
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	680b      	ldr	r3, [r1, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1fc      	bne.n	800417a <ai_platform_network_post_init+0x15e>
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <ai_platform_network_post_init+0x218>)
 8004182:	492d      	ldr	r1, [pc, #180]	; (8004238 <ai_platform_network_post_init+0x21c>)
 8004184:	4a2d      	ldr	r2, [pc, #180]	; (800423c <ai_platform_network_post_init+0x220>)
 8004186:	6019      	str	r1, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4293      	cmp	r3, r2
 800418c:	d0b3      	beq.n	80040f6 <ai_platform_network_post_init+0xda>
 800418e:	e7fe      	b.n	800418e <ai_platform_network_post_init+0x172>
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <ai_platform_network_post_init+0x224>)
 8004192:	2201      	movs	r2, #1
 8004194:	4619      	mov	r1, r3
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	680b      	ldr	r3, [r1, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1fc      	bne.n	8004198 <ai_platform_network_post_init+0x17c>
 800419e:	4b29      	ldr	r3, [pc, #164]	; (8004244 <ai_platform_network_post_init+0x228>)
 80041a0:	4925      	ldr	r1, [pc, #148]	; (8004238 <ai_platform_network_post_init+0x21c>)
 80041a2:	4a26      	ldr	r2, [pc, #152]	; (800423c <ai_platform_network_post_init+0x220>)
 80041a4:	6019      	str	r1, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4293      	cmp	r3, r2
 80041aa:	f43f af68 	beq.w	800407e <ai_platform_network_post_init+0x62>
 80041ae:	e7fe      	b.n	80041ae <ai_platform_network_post_init+0x192>
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <ai_platform_network_post_init+0x224>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	4619      	mov	r1, r3
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	680b      	ldr	r3, [r1, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1fc      	bne.n	80041b8 <ai_platform_network_post_init+0x19c>
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <ai_platform_network_post_init+0x228>)
 80041c0:	491d      	ldr	r1, [pc, #116]	; (8004238 <ai_platform_network_post_init+0x21c>)
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <ai_platform_network_post_init+0x220>)
 80041c4:	6019      	str	r1, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4293      	cmp	r3, r2
 80041ca:	f43f af58 	beq.w	800407e <ai_platform_network_post_init+0x62>
 80041ce:	e7fe      	b.n	80041ce <ai_platform_network_post_init+0x1b2>
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <ai_platform_network_post_init+0x214>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	4619      	mov	r1, r3
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	680b      	ldr	r3, [r1, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1fc      	bne.n	80041d8 <ai_platform_network_post_init+0x1bc>
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <ai_platform_network_post_init+0x218>)
 80041e0:	4915      	ldr	r1, [pc, #84]	; (8004238 <ai_platform_network_post_init+0x21c>)
 80041e2:	4a16      	ldr	r2, [pc, #88]	; (800423c <ai_platform_network_post_init+0x220>)
 80041e4:	6019      	str	r1, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d084      	beq.n	80040f6 <ai_platform_network_post_init+0xda>
 80041ec:	e7fe      	b.n	80041ec <ai_platform_network_post_init+0x1d0>
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <ai_platform_network_post_init+0x224>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	4619      	mov	r1, r3
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	680b      	ldr	r3, [r1, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1fc      	bne.n	80041f6 <ai_platform_network_post_init+0x1da>
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <ai_platform_network_post_init+0x228>)
 80041fe:	490e      	ldr	r1, [pc, #56]	; (8004238 <ai_platform_network_post_init+0x21c>)
 8004200:	4a0e      	ldr	r2, [pc, #56]	; (800423c <ai_platform_network_post_init+0x220>)
 8004202:	6019      	str	r1, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4293      	cmp	r3, r2
 8004208:	f43f af75 	beq.w	80040f6 <ai_platform_network_post_init+0xda>
 800420c:	e7fe      	b.n	800420c <ai_platform_network_post_init+0x1f0>
 800420e:	f104 0010 	add.w	r0, r4, #16
 8004212:	2210      	movs	r2, #16
 8004214:	2111      	movs	r1, #17
 8004216:	f000 fafb 	bl	8004810 <core_set_error>
 800421a:	4628      	mov	r0, r5
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	a1c00100 	.word	0xa1c00100
 8004224:	e0002000 	.word	0xe0002000
 8004228:	e0042000 	.word	0xe0042000
 800422c:	5c001000 	.word	0x5c001000
 8004230:	40023008 	.word	0x40023008
 8004234:	40023000 	.word	0x40023000
 8004238:	f407a5c2 	.word	0xf407a5c2
 800423c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004240:	58024c08 	.word	0x58024c08
 8004244:	58024c00 	.word	0x58024c00

08004248 <ai_platform_network_process>:
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	460f      	mov	r7, r1
 800424e:	b083      	sub	sp, #12
 8004250:	4615      	mov	r5, r2
 8004252:	4604      	mov	r4, r0
 8004254:	b120      	cbz	r0, 8004260 <ai_platform_network_process+0x18>
 8004256:	4ba8      	ldr	r3, [pc, #672]	; (80044f8 <ai_platform_network_process+0x2b0>)
 8004258:	6802      	ldr	r2, [r0, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf18      	it	ne
 800425e:	2400      	movne	r4, #0
 8004260:	4aa6      	ldr	r2, [pc, #664]	; (80044fc <ai_platform_network_process+0x2b4>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	f7fe fed5 	bl	8003018 <_ai_platform_acquire_crc>
 800426e:	4ba4      	ldr	r3, [pc, #656]	; (8004500 <ai_platform_network_process+0x2b8>)
 8004270:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427a:	185a      	adds	r2, r3, r1
 800427c:	2a01      	cmp	r2, #1
 800427e:	f240 80d3 	bls.w	8004428 <ai_platform_network_process+0x1e0>
 8004282:	f240 4249 	movw	r2, #1097	; 0x449
 8004286:	4293      	cmp	r3, r2
 8004288:	f000 80ce 	beq.w	8004428 <ai_platform_network_process+0x1e0>
 800428c:	4b9d      	ldr	r3, [pc, #628]	; (8004504 <ai_platform_network_process+0x2bc>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004294:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8004298:	f000 80e4 	beq.w	8004464 <ai_platform_network_process+0x21c>
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	f240 4183 	movw	r1, #1155	; 0x483
 80042a2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80042a6:	428a      	cmp	r2, r1
 80042a8:	f000 8104 	beq.w	80044b4 <ai_platform_network_process+0x26c>
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80042b6:	f000 80ed 	beq.w	8004494 <ai_platform_network_process+0x24c>
 80042ba:	f7fe feaf 	bl	800301c <_ai_platform_release_crc>
 80042be:	2c00      	cmp	r4, #0
 80042c0:	f000 80cb 	beq.w	800445a <ai_platform_network_process+0x212>
 80042c4:	68e2      	ldr	r2, [r4, #12]
 80042c6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80042c8:	f002 0203 	and.w	r2, r2, #3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80bb 	beq.w	8004448 <ai_platform_network_process+0x200>
 80042d2:	2100      	movs	r1, #0
 80042d4:	2a03      	cmp	r2, #3
 80042d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80042da:	6161      	str	r1, [r4, #20]
 80042dc:	f040 80b7 	bne.w	800444e <ai_platform_network_process+0x206>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	f000 80cf 	beq.w	8004484 <ai_platform_network_process+0x23c>
 80042e6:	faba f28a 	clz	r2, sl
 80042ea:	0952      	lsrs	r2, r2, #5
 80042ec:	2a00      	cmp	r2, #0
 80042ee:	f040 80c9 	bne.w	8004484 <ai_platform_network_process+0x23c>
 80042f2:	f8ba 1000 	ldrh.w	r1, [sl]
 80042f6:	2900      	cmp	r1, #0
 80042f8:	f000 80c4 	beq.w	8004484 <ai_platform_network_process+0x23c>
 80042fc:	69b8      	ldr	r0, [r7, #24]
 80042fe:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004302:	6806      	ldr	r6, [r0, #0]
 8004304:	2900      	cmp	r1, #0
 8004306:	f000 810c 	beq.w	8004522 <ai_platform_network_process+0x2da>
 800430a:	f8d1 9000 	ldr.w	r9, [r1]
 800430e:	f1b9 0f00 	cmp.w	r9, #0
 8004312:	f000 8106 	beq.w	8004522 <ai_platform_network_process+0x2da>
 8004316:	f8da 3008 	ldr.w	r3, [sl, #8]
 800431a:	4690      	mov	r8, r2
 800431c:	f8d3 b000 	ldr.w	fp, [r3]
 8004320:	f1bb 0f00 	cmp.w	fp, #0
 8004324:	d16d      	bne.n	8004402 <ai_platform_network_process+0x1ba>
 8004326:	e0ad      	b.n	8004484 <ai_platform_network_process+0x23c>
 8004328:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	68c2      	ldr	r2, [r0, #12]
 8004330:	68cb      	ldr	r3, [r1, #12]
 8004332:	429a      	cmp	r2, r3
 8004334:	d170      	bne.n	8004418 <ai_platform_network_process+0x1d0>
 8004336:	6882      	ldr	r2, [r0, #8]
 8004338:	688b      	ldr	r3, [r1, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d16c      	bne.n	8004418 <ai_platform_network_process+0x1d0>
 800433e:	6842      	ldr	r2, [r0, #4]
 8004340:	684b      	ldr	r3, [r1, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d168      	bne.n	8004418 <ai_platform_network_process+0x1d0>
 8004346:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800434a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800434e:	f002 fe57 	bl	8007000 <ai_array_get_data_byte_size>
 8004352:	9000      	str	r0, [sp, #0]
 8004354:	4648      	mov	r0, r9
 8004356:	f002 fdbb 	bl	8006ed0 <get_tensor_byte_size>
 800435a:	9b00      	ldr	r3, [sp, #0]
 800435c:	4283      	cmp	r3, r0
 800435e:	d35b      	bcc.n	8004418 <ai_platform_network_process+0x1d0>
 8004360:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f002 fdcb 	bl	8006f00 <ai_array_to_buffer_fmt>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	4043      	eors	r3, r0
 800436e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004372:	f040 823c 	bne.w	80047ee <ai_platform_network_process+0x5a6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80b4 	beq.w	80044e6 <ai_platform_network_process+0x29e>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80a6 	beq.w	80044d4 <ai_platform_network_process+0x28c>
 8004388:	429e      	cmp	r6, r3
 800438a:	4648      	mov	r0, r9
 800438c:	bf38      	it	cc
 800438e:	461e      	movcc	r6, r3
 8004390:	f002 fd9e 	bl	8006ed0 <get_tensor_byte_size>
 8004394:	f8cb 0008 	str.w	r0, [fp, #8]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	fb02 f200 	mul.w	r2, r2, r0
 80043a0:	f8cb 200c 	str.w	r2, [fp, #12]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f8cb 0004 	str.w	r0, [fp, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	f8cb 3000 	str.w	r3, [fp]
 80043b2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80043b6:	680b      	ldr	r3, [r1, #0]
 80043b8:	009a      	lsls	r2, r3, #2
 80043ba:	d409      	bmi.n	80043d0 <ai_platform_network_process+0x188>
 80043bc:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	4418      	add	r0, r3
 80043c4:	6088      	str	r0, [r1, #8]
 80043c6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80043ca:	f8db 2004 	ldr.w	r2, [fp, #4]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	f108 0801 	add.w	r8, r8, #1
 80043d4:	f8ba 3000 	ldrh.w	r3, [sl]
 80043d8:	4598      	cmp	r8, r3
 80043da:	f080 80a1 	bcs.w	8004520 <ai_platform_network_process+0x2d8>
 80043de:	f8da 3004 	ldr.w	r3, [sl, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 809c 	beq.w	8004520 <ai_platform_network_process+0x2d8>
 80043e8:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 80043ec:	f1b9 0f00 	cmp.w	r9, #0
 80043f0:	f000 8096 	beq.w	8004520 <ai_platform_network_process+0x2d8>
 80043f4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80043f8:	371c      	adds	r7, #28
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 8004400:	d040      	beq.n	8004484 <ai_platform_network_process+0x23c>
 8004402:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004406:	2101      	movs	r1, #1
 8004408:	4638      	mov	r0, r7
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	f7fe fdb7 	bl	8002f80 <ai_buffer_get_size>
 8004412:	9b00      	ldr	r3, [sp, #0]
 8004414:	4283      	cmp	r3, r0
 8004416:	d287      	bcs.n	8004328 <ai_platform_network_process+0xe0>
 8004418:	f104 0010 	add.w	r0, r4, #16
 800441c:	2218      	movs	r2, #24
 800441e:	2112      	movs	r1, #18
 8004420:	f000 f9f6 	bl	8004810 <core_set_error>
 8004424:	2300      	movs	r3, #0
 8004426:	e019      	b.n	800445c <ai_platform_network_process+0x214>
 8004428:	4b37      	ldr	r3, [pc, #220]	; (8004508 <ai_platform_network_process+0x2c0>)
 800442a:	2201      	movs	r2, #1
 800442c:	4619      	mov	r1, r3
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	680b      	ldr	r3, [r1, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1fc      	bne.n	8004430 <ai_platform_network_process+0x1e8>
 8004436:	4b35      	ldr	r3, [pc, #212]	; (800450c <ai_platform_network_process+0x2c4>)
 8004438:	4935      	ldr	r1, [pc, #212]	; (8004510 <ai_platform_network_process+0x2c8>)
 800443a:	4a36      	ldr	r2, [pc, #216]	; (8004514 <ai_platform_network_process+0x2cc>)
 800443c:	6019      	str	r1, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4293      	cmp	r3, r2
 8004442:	f43f af3a 	beq.w	80042ba <ai_platform_network_process+0x72>
 8004446:	e7fe      	b.n	8004446 <ai_platform_network_process+0x1fe>
 8004448:	2a03      	cmp	r2, #3
 800444a:	6163      	str	r3, [r4, #20]
 800444c:	d01a      	beq.n	8004484 <ai_platform_network_process+0x23c>
 800444e:	f104 0010 	add.w	r0, r4, #16
 8004452:	2230      	movs	r2, #48	; 0x30
 8004454:	2111      	movs	r1, #17
 8004456:	f000 f9db 	bl	8004810 <core_set_error>
 800445a:	2300      	movs	r3, #0
 800445c:	4618      	mov	r0, r3
 800445e:	b003      	add	sp, #12
 8004460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004464:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <ai_platform_network_process+0x2d0>)
 8004466:	2201      	movs	r2, #1
 8004468:	4619      	mov	r1, r3
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	680b      	ldr	r3, [r1, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1fc      	bne.n	800446c <ai_platform_network_process+0x224>
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <ai_platform_network_process+0x2d4>)
 8004474:	4926      	ldr	r1, [pc, #152]	; (8004510 <ai_platform_network_process+0x2c8>)
 8004476:	4a27      	ldr	r2, [pc, #156]	; (8004514 <ai_platform_network_process+0x2cc>)
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4293      	cmp	r3, r2
 800447e:	f43f af1c 	beq.w	80042ba <ai_platform_network_process+0x72>
 8004482:	e7fe      	b.n	8004482 <ai_platform_network_process+0x23a>
 8004484:	f104 0010 	add.w	r0, r4, #16
 8004488:	2217      	movs	r2, #23
 800448a:	2112      	movs	r1, #18
 800448c:	f000 f9c0 	bl	8004810 <core_set_error>
 8004490:	2300      	movs	r3, #0
 8004492:	e7e3      	b.n	800445c <ai_platform_network_process+0x214>
 8004494:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <ai_platform_network_process+0x2c0>)
 8004496:	2201      	movs	r2, #1
 8004498:	4619      	mov	r1, r3
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	680b      	ldr	r3, [r1, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1fc      	bne.n	800449c <ai_platform_network_process+0x254>
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <ai_platform_network_process+0x2c4>)
 80044a4:	491a      	ldr	r1, [pc, #104]	; (8004510 <ai_platform_network_process+0x2c8>)
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <ai_platform_network_process+0x2cc>)
 80044a8:	6019      	str	r1, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	f43f af04 	beq.w	80042ba <ai_platform_network_process+0x72>
 80044b2:	e7fe      	b.n	80044b2 <ai_platform_network_process+0x26a>
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <ai_platform_network_process+0x2d0>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	4619      	mov	r1, r3
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	680b      	ldr	r3, [r1, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1fc      	bne.n	80044bc <ai_platform_network_process+0x274>
 80044c2:	4b16      	ldr	r3, [pc, #88]	; (800451c <ai_platform_network_process+0x2d4>)
 80044c4:	4912      	ldr	r1, [pc, #72]	; (8004510 <ai_platform_network_process+0x2c8>)
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <ai_platform_network_process+0x2cc>)
 80044c8:	6019      	str	r1, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	f43f aef4 	beq.w	80042ba <ai_platform_network_process+0x72>
 80044d2:	e7fe      	b.n	80044d2 <ai_platform_network_process+0x28a>
 80044d4:	f104 0010 	add.w	r0, r4, #16
 80044d8:	2221      	movs	r2, #33	; 0x21
 80044da:	2112      	movs	r1, #18
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	f000 f997 	bl	8004810 <core_set_error>
 80044e2:	9b00      	ldr	r3, [sp, #0]
 80044e4:	e7ba      	b.n	800445c <ai_platform_network_process+0x214>
 80044e6:	f104 0010 	add.w	r0, r4, #16
 80044ea:	2217      	movs	r2, #23
 80044ec:	2112      	movs	r1, #18
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	f000 f98e 	bl	8004810 <core_set_error>
 80044f4:	9b00      	ldr	r3, [sp, #0]
 80044f6:	e7b1      	b.n	800445c <ai_platform_network_process+0x214>
 80044f8:	a1c00100 	.word	0xa1c00100
 80044fc:	e0002000 	.word	0xe0002000
 8004500:	e0042000 	.word	0xe0042000
 8004504:	5c001000 	.word	0x5c001000
 8004508:	40023008 	.word	0x40023008
 800450c:	40023000 	.word	0x40023000
 8004510:	f407a5c2 	.word	0xf407a5c2
 8004514:	b5e8b5cd 	.word	0xb5e8b5cd
 8004518:	58024c08 	.word	0x58024c08
 800451c:	58024c00 	.word	0x58024c00
 8004520:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004522:	2d00      	cmp	r5, #0
 8004524:	f000 80ad 	beq.w	8004682 <ai_platform_network_process+0x43a>
 8004528:	2b01      	cmp	r3, #1
 800452a:	f240 8158 	bls.w	80047de <ai_platform_network_process+0x596>
 800452e:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8004532:	f119 0f0c 	cmn.w	r9, #12
 8004536:	f000 8152 	beq.w	80047de <ai_platform_network_process+0x596>
 800453a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 814d 	beq.w	80047de <ai_platform_network_process+0x596>
 8004544:	f04f 0800 	mov.w	r8, #0
 8004548:	4598      	cmp	r8, r3
 800454a:	f080 8099 	bcs.w	8004680 <ai_platform_network_process+0x438>
 800454e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8094 	beq.w	8004680 <ai_platform_network_process+0x438>
 8004558:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 800455c:	f1bb 0f00 	cmp.w	fp, #0
 8004560:	f000 808e 	beq.w	8004680 <ai_platform_network_process+0x438>
 8004564:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004568:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	eb13 070a 	adds.w	r7, r3, sl
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	d07c      	beq.n	8004670 <ai_platform_network_process+0x428>
 8004576:	f8db 3018 	ldr.w	r3, [fp, #24]
 800457a:	2101      	movs	r1, #1
 800457c:	4628      	mov	r0, r5
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	f7fe fcfd 	bl	8002f80 <ai_buffer_get_size>
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	4283      	cmp	r3, r0
 800458a:	f0c0 8128 	bcc.w	80047de <ai_platform_network_process+0x596>
 800458e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	68c2      	ldr	r2, [r0, #12]
 8004596:	68cb      	ldr	r3, [r1, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	f040 8120 	bne.w	80047de <ai_platform_network_process+0x596>
 800459e:	6882      	ldr	r2, [r0, #8]
 80045a0:	688b      	ldr	r3, [r1, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	f040 811b 	bne.w	80047de <ai_platform_network_process+0x596>
 80045a8:	6842      	ldr	r2, [r0, #4]
 80045aa:	684b      	ldr	r3, [r1, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	f040 8116 	bne.w	80047de <ai_platform_network_process+0x596>
 80045b2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80045b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ba:	f002 fd21 	bl	8007000 <ai_array_get_data_byte_size>
 80045be:	9001      	str	r0, [sp, #4]
 80045c0:	4658      	mov	r0, fp
 80045c2:	f002 fc85 	bl	8006ed0 <get_tensor_byte_size>
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	4283      	cmp	r3, r0
 80045ca:	f0c0 8108 	bcc.w	80047de <ai_platform_network_process+0x596>
 80045ce:	f8db 3018 	ldr.w	r3, [fp, #24]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	f002 fc94 	bl	8006f00 <ai_array_to_buffer_fmt>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	4043      	eors	r3, r0
 80045dc:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80045e0:	d13e      	bne.n	8004660 <ai_platform_network_process+0x418>
 80045e2:	686b      	ldr	r3, [r5, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d032      	beq.n	800464e <ai_platform_network_process+0x406>
 80045e8:	69ab      	ldr	r3, [r5, #24]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b333      	cbz	r3, 800463c <ai_platform_network_process+0x3f4>
 80045ee:	429e      	cmp	r6, r3
 80045f0:	4658      	mov	r0, fp
 80045f2:	bf38      	it	cc
 80045f4:	461e      	movcc	r6, r3
 80045f6:	f002 fc6b 	bl	8006ed0 <get_tensor_byte_size>
 80045fa:	60b8      	str	r0, [r7, #8]
 80045fc:	69ab      	ldr	r3, [r5, #24]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	fb02 f200 	mul.w	r2, r2, r0
 8004604:	60fa      	str	r2, [r7, #12]
 8004606:	6868      	ldr	r0, [r5, #4]
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	686b      	ldr	r3, [r5, #4]
 800460c:	4413      	add	r3, r2
 800460e:	9a00      	ldr	r2, [sp, #0]
 8004610:	f842 300a 	str.w	r3, [r2, sl]
 8004614:	f8db 1018 	ldr.w	r1, [fp, #24]
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	d408      	bmi.n	8004630 <ai_platform_network_process+0x3e8>
 800461e:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	4418      	add	r0, r3
 8004626:	6088      	str	r0, [r1, #8]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	f108 0801 	add.w	r8, r8, #1
 8004634:	351c      	adds	r5, #28
 8004636:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800463a:	e785      	b.n	8004548 <ai_platform_network_process+0x300>
 800463c:	f104 0010 	add.w	r0, r4, #16
 8004640:	2221      	movs	r2, #33	; 0x21
 8004642:	2113      	movs	r1, #19
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	f000 f8e3 	bl	8004810 <core_set_error>
 800464a:	9b00      	ldr	r3, [sp, #0]
 800464c:	e706      	b.n	800445c <ai_platform_network_process+0x214>
 800464e:	f104 0010 	add.w	r0, r4, #16
 8004652:	2217      	movs	r2, #23
 8004654:	2113      	movs	r1, #19
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	f000 f8da 	bl	8004810 <core_set_error>
 800465c:	9b00      	ldr	r3, [sp, #0]
 800465e:	e6fd      	b.n	800445c <ai_platform_network_process+0x214>
 8004660:	f104 0010 	add.w	r0, r4, #16
 8004664:	2219      	movs	r2, #25
 8004666:	2113      	movs	r1, #19
 8004668:	f000 f8d2 	bl	8004810 <core_set_error>
 800466c:	2300      	movs	r3, #0
 800466e:	e6f5      	b.n	800445c <ai_platform_network_process+0x214>
 8004670:	f104 0010 	add.w	r0, r4, #16
 8004674:	2217      	movs	r2, #23
 8004676:	2113      	movs	r1, #19
 8004678:	f000 f8ca 	bl	8004810 <core_set_error>
 800467c:	463b      	mov	r3, r7
 800467e:	e6ed      	b.n	800445c <ai_platform_network_process+0x214>
 8004680:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004682:	82a6      	strh	r6, [r4, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80a5 	beq.w	80047d4 <ai_platform_network_process+0x58c>
 800468a:	2b01      	cmp	r3, #1
 800468c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800468e:	f240 80a4 	bls.w	80047da <ai_platform_network_process+0x592>
 8004692:	f105 070c 	add.w	r7, r5, #12
 8004696:	8ae3      	ldrh	r3, [r4, #22]
 8004698:	8aa2      	ldrh	r2, [r4, #20]
 800469a:	429a      	cmp	r2, r3
 800469c:	f67f aede 	bls.w	800445c <ai_platform_network_process+0x214>
 80046a0:	2d00      	cmp	r5, #0
 80046a2:	d03a      	beq.n	800471a <ai_platform_network_process+0x4d2>
 80046a4:	882b      	ldrh	r3, [r5, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d037      	beq.n	800471a <ai_platform_network_process+0x4d2>
 80046aa:	686b      	ldr	r3, [r5, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d034      	beq.n	800471a <ai_platform_network_process+0x4d2>
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	2a00      	cmp	r2, #0
 80046b4:	d031      	beq.n	800471a <ai_platform_network_process+0x4d2>
 80046b6:	f04f 0800 	mov.w	r8, #0
 80046ba:	e01b      	b.n	80046f4 <ai_platform_network_process+0x4ac>
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	1a40      	subs	r0, r0, r1
 80046c0:	eb0c 0100 	add.w	r1, ip, r0
 80046c4:	6099      	str	r1, [r3, #8]
 80046c6:	6993      	ldr	r3, [r2, #24]
 80046c8:	6872      	ldr	r2, [r6, #4]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	6873      	ldr	r3, [r6, #4]
 80046ce:	f108 0801 	add.w	r8, r8, #1
 80046d2:	68b1      	ldr	r1, [r6, #8]
 80046d4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80046d8:	440b      	add	r3, r1
 80046da:	4293      	cmp	r3, r2
 80046dc:	d301      	bcc.n	80046e2 <ai_platform_network_process+0x49a>
 80046de:	68f3      	ldr	r3, [r6, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	6073      	str	r3, [r6, #4]
 80046e4:	882b      	ldrh	r3, [r5, #0]
 80046e6:	4598      	cmp	r8, r3
 80046e8:	d217      	bcs.n	800471a <ai_platform_network_process+0x4d2>
 80046ea:	686b      	ldr	r3, [r5, #4]
 80046ec:	b1ab      	cbz	r3, 800471a <ai_platform_network_process+0x4d2>
 80046ee:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80046f2:	b192      	cbz	r2, 800471a <ai_platform_network_process+0x4d2>
 80046f4:	68a9      	ldr	r1, [r5, #8]
 80046f6:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80046fa:	6993      	ldr	r3, [r2, #24]
 80046fc:	f8d1 a000 	ldr.w	sl, [r1]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	eb0a 0609 	add.w	r6, sl, r9
 8004706:	6898      	ldr	r0, [r3, #8]
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800470e:	d5d5      	bpl.n	80046bc <ai_platform_network_process+0x474>
 8004710:	4661      	mov	r1, ip
 8004712:	68b2      	ldr	r2, [r6, #8]
 8004714:	f002 fcae 	bl	8007074 <memcpy>
 8004718:	e7d8      	b.n	80046cc <ai_platform_network_process+0x484>
 800471a:	4620      	mov	r0, r4
 800471c:	f002 fb86 	bl	8006e2c <ai_layers_forward_all>
 8004720:	2f00      	cmp	r7, #0
 8004722:	d04b      	beq.n	80047bc <ai_platform_network_process+0x574>
 8004724:	883b      	ldrh	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d048      	beq.n	80047bc <ai_platform_network_process+0x574>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d045      	beq.n	80047bc <ai_platform_network_process+0x574>
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	2800      	cmp	r0, #0
 8004734:	d042      	beq.n	80047bc <ai_platform_network_process+0x574>
 8004736:	f04f 0800 	mov.w	r8, #0
 800473a:	e01c      	b.n	8004776 <ai_platform_network_process+0x52e>
 800473c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004740:	4596      	cmp	lr, r2
 8004742:	d302      	bcc.n	800474a <ai_platform_network_process+0x502>
 8004744:	68f3      	ldr	r3, [r6, #12]
 8004746:	eba2 0e03 	sub.w	lr, r2, r3
 800474a:	f8c6 e004 	str.w	lr, [r6, #4]
 800474e:	f108 0801 	add.w	r8, r8, #1
 8004752:	6981      	ldr	r1, [r0, #24]
 8004754:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	eb0e 0302 	add.w	r3, lr, r2
 800475e:	608b      	str	r3, [r1, #8]
 8004760:	6983      	ldr	r3, [r0, #24]
 8004762:	6872      	ldr	r2, [r6, #4]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	883b      	ldrh	r3, [r7, #0]
 8004768:	4598      	cmp	r8, r3
 800476a:	d227      	bcs.n	80047bc <ai_platform_network_process+0x574>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	b32b      	cbz	r3, 80047bc <ai_platform_network_process+0x574>
 8004770:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004774:	b310      	cbz	r0, 80047bc <ai_platform_network_process+0x574>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800477c:	6981      	ldr	r1, [r0, #24]
 800477e:	f8d3 a000 	ldr.w	sl, [r3]
 8004782:	680b      	ldr	r3, [r1, #0]
 8004784:	eb0a 0609 	add.w	r6, sl, r9
 8004788:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800478c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8004790:	eb0c 0e02 	add.w	lr, ip, r2
 8004794:	d0d2      	beq.n	800473c <ai_platform_network_process+0x4f4>
 8004796:	6889      	ldr	r1, [r1, #8]
 8004798:	4660      	mov	r0, ip
 800479a:	f002 fc6b 	bl	8007074 <memcpy>
 800479e:	f85a 2009 	ldr.w	r2, [sl, r9]
 80047a2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80047a6:	440b      	add	r3, r1
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d301      	bcc.n	80047b0 <ai_platform_network_process+0x568>
 80047ac:	68f3      	ldr	r3, [r6, #12]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	6073      	str	r3, [r6, #4]
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	883b      	ldrh	r3, [r7, #0]
 80047b8:	4598      	cmp	r8, r3
 80047ba:	d3d7      	bcc.n	800476c <ai_platform_network_process+0x524>
 80047bc:	8ae3      	ldrh	r3, [r4, #22]
 80047be:	8aa2      	ldrh	r2, [r4, #20]
 80047c0:	3301      	adds	r3, #1
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	429a      	cmp	r2, r3
 80047c6:	82e3      	strh	r3, [r4, #22]
 80047c8:	f63f af6a 	bhi.w	80046a0 <ai_platform_network_process+0x458>
 80047cc:	4618      	mov	r0, r3
 80047ce:	b003      	add	sp, #12
 80047d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d4:	461d      	mov	r5, r3
 80047d6:	461f      	mov	r7, r3
 80047d8:	e75d      	b.n	8004696 <ai_platform_network_process+0x44e>
 80047da:	2700      	movs	r7, #0
 80047dc:	e75b      	b.n	8004696 <ai_platform_network_process+0x44e>
 80047de:	f104 0010 	add.w	r0, r4, #16
 80047e2:	2218      	movs	r2, #24
 80047e4:	2113      	movs	r1, #19
 80047e6:	f000 f813 	bl	8004810 <core_set_error>
 80047ea:	2300      	movs	r3, #0
 80047ec:	e636      	b.n	800445c <ai_platform_network_process+0x214>
 80047ee:	f104 0010 	add.w	r0, r4, #16
 80047f2:	2219      	movs	r2, #25
 80047f4:	2112      	movs	r1, #18
 80047f6:	f000 f80b 	bl	8004810 <core_set_error>
 80047fa:	2300      	movs	r3, #0
 80047fc:	e62e      	b.n	800445c <ai_platform_network_process+0x214>
 80047fe:	bf00      	nop

08004800 <core_init>:
 8004800:	2001      	movs	r0, #1
 8004802:	4770      	bx	lr

08004804 <core_get_error>:
 8004804:	4603      	mov	r3, r0
 8004806:	2200      	movs	r2, #0
 8004808:	6800      	ldr	r0, [r0, #0]
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <core_set_error>:
 8004810:	4603      	mov	r3, r0
 8004812:	7800      	ldrb	r0, [r0, #0]
 8004814:	b930      	cbnz	r0, 8004824 <core_set_error+0x14>
 8004816:	7019      	strb	r1, [r3, #0]
 8004818:	2001      	movs	r0, #1
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	f362 211f 	bfi	r1, r2, #8, #24
 8004820:	6019      	str	r1, [r3, #0]
 8004822:	4770      	bx	lr
 8004824:	2000      	movs	r0, #0
 8004826:	4770      	bx	lr

08004828 <func_dummy>:
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop

0800482c <ai_dict_decompress_f32>:
 800482c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004830:	9f08      	ldr	r7, [sp, #32]
 8004832:	2b04      	cmp	r3, #4
 8004834:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004838:	d00e      	beq.n	8004858 <ai_dict_decompress_f32+0x2c>
 800483a:	2b08      	cmp	r3, #8
 800483c:	d10a      	bne.n	8004854 <ai_dict_decompress_f32+0x28>
 800483e:	42b8      	cmp	r0, r7
 8004840:	d208      	bcs.n	8004854 <ai_dict_decompress_f32+0x28>
 8004842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f840 3b04 	str.w	r3, [r0], #4
 8004850:	4287      	cmp	r7, r0
 8004852:	d8f6      	bhi.n	8004842 <ai_dict_decompress_f32+0x16>
 8004854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800485e:	f003 0e01 	and.w	lr, r3, #1
 8004862:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8004866:	f10c 38ff 	add.w	r8, ip, #4294967295
 800486a:	42b8      	cmp	r0, r7
 800486c:	d2f2      	bcs.n	8004854 <ai_dict_decompress_f32+0x28>
 800486e:	f1bc 0f00 	cmp.w	ip, #0
 8004872:	d019      	beq.n	80048a8 <ai_dict_decompress_f32+0x7c>
 8004874:	f100 0508 	add.w	r5, r0, #8
 8004878:	1e4c      	subs	r4, r1, #1
 800487a:	eb01 0608 	add.w	r6, r1, r8
 800487e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004882:	3508      	adds	r5, #8
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	42a6      	cmp	r6, r4
 8004888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f845 3c10 	str.w	r3, [r5, #-16]
 8004892:	7823      	ldrb	r3, [r4, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f845 3c0c 	str.w	r3, [r5, #-12]
 80048a2:	d1ec      	bne.n	800487e <ai_dict_decompress_f32+0x52>
 80048a4:	4461      	add	r1, ip
 80048a6:	4448      	add	r0, r9
 80048a8:	f1be 0f00 	cmp.w	lr, #0
 80048ac:	d103      	bne.n	80048b6 <ai_dict_decompress_f32+0x8a>
 80048ae:	4287      	cmp	r7, r0
 80048b0:	d8dd      	bhi.n	800486e <ai_dict_decompress_f32+0x42>
 80048b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048b6:	780b      	ldrb	r3, [r1, #0]
 80048b8:	3004      	adds	r0, #4
 80048ba:	3101      	adds	r1, #1
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f840 3c04 	str.w	r3, [r0, #-4]
 80048c8:	e7cf      	b.n	800486a <ai_dict_decompress_f32+0x3e>
 80048ca:	bf00      	nop

080048cc <forward_conv2d_nl_pool>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	ed2d 8b08 	vpush	{d8-d11}
 80048d4:	b0e1      	sub	sp, #388	; 0x184
 80048d6:	6983      	ldr	r3, [r0, #24]
 80048d8:	af0a      	add	r7, sp, #40	; 0x28
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	f001 8105 	beq.w	8005af0 <forward_conv2d_nl_pool+0x1224>
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	684d      	ldr	r5, [r1, #4]
 80048ea:	b105      	cbz	r5, 80048ee <forward_conv2d_nl_pool+0x22>
 80048ec:	682d      	ldr	r5, [r5, #0]
 80048ee:	2a01      	cmp	r2, #1
 80048f0:	f241 8104 	bls.w	8005afc <forward_conv2d_nl_pool+0x1230>
 80048f4:	690a      	ldr	r2, [r1, #16]
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	f001 80f7 	beq.w	8005aea <forward_conv2d_nl_pool+0x121e>
 80048fc:	f8d2 9000 	ldr.w	r9, [r2]
 8004900:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004904:	2a02      	cmp	r2, #2
 8004906:	f001 80f9 	beq.w	8005afc <forward_conv2d_nl_pool+0x1230>
 800490a:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 800490e:	f1bc 0f00 	cmp.w	ip, #0
 8004912:	f001 80e3 	beq.w	8005adc <forward_conv2d_nl_pool+0x1210>
 8004916:	f111 0218 	adds.w	r2, r1, #24
 800491a:	f8dc 4000 	ldr.w	r4, [ip]
 800491e:	d005      	beq.n	800492c <forward_conv2d_nl_pool+0x60>
 8004920:	8b0a      	ldrh	r2, [r1, #24]
 8004922:	2a01      	cmp	r2, #1
 8004924:	f241 80e7 	bls.w	8005af6 <forward_conv2d_nl_pool+0x122a>
 8004928:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800492c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004930:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8004934:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8004938:	f8db 6008 	ldr.w	r6, [fp, #8]
 800493c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8004940:	f8c7 60bc 	str.w	r6, [r7, #188]	; 0xbc
 8004944:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8004948:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800494a:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
 800494e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004952:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8004956:	f8c7 6094 	str.w	r6, [r7, #148]	; 0x94
 800495a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800495e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8004962:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8004966:	f8de 6004 	ldr.w	r6, [lr, #4]
 800496a:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 800496e:	f8de 600c 	ldr.w	r6, [lr, #12]
 8004972:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
 8004976:	f8de 6008 	ldr.w	r6, [lr, #8]
 800497a:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
 800497e:	682e      	ldr	r6, [r5, #0]
 8004980:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 8004984:	686e      	ldr	r6, [r5, #4]
 8004986:	68ad      	ldr	r5, [r5, #8]
 8004988:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 800498c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004990:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8004994:	f8da 6008 	ldr.w	r6, [sl, #8]
 8004998:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 800499c:	6d46      	ldr	r6, [r0, #84]	; 0x54
 800499e:	6836      	ldr	r6, [r6, #0]
 80049a0:	f8c7 6134 	str.w	r6, [r7, #308]	; 0x134
 80049a4:	6d46      	ldr	r6, [r0, #84]	; 0x54
 80049a6:	6876      	ldr	r6, [r6, #4]
 80049a8:	647e      	str	r6, [r7, #68]	; 0x44
 80049aa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80049ae:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
 80049b2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80049b4:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 80049b8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80049ba:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 80049be:	69c6      	ldr	r6, [r0, #28]
 80049c0:	f8c7 6124 	str.w	r6, [r7, #292]	; 0x124
 80049c4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80049c6:	64fe      	str	r6, [r7, #76]	; 0x4c
 80049c8:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80049ca:	64be      	str	r6, [r7, #72]	; 0x48
 80049cc:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80049ce:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 80049d2:	f8c7 60c0 	str.w	r6, [r7, #192]	; 0xc0
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	f001 807c 	beq.w	8005ad4 <forward_conv2d_nl_pool+0x1208>
 80049dc:	6992      	ldr	r2, [r2, #24]
 80049de:	6892      	ldr	r2, [r2, #8]
 80049e0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80049e4:	4680      	mov	r8, r0
 80049e6:	6a00      	ldr	r0, [r0, #32]
 80049e8:	2900      	cmp	r1, #0
 80049ea:	f001 8056 	beq.w	8005a9a <forward_conv2d_nl_pool+0x11ce>
 80049ee:	698a      	ldr	r2, [r1, #24]
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	f001 8047 	beq.w	8005a84 <forward_conv2d_nl_pool+0x11b8>
 80049f6:	694b      	ldr	r3, [r1, #20]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80049fe:	6893      	ldr	r3, [r2, #8]
 8004a00:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004a04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a08:	f002 fad0 	bl	8006fac <ai_array_get_byte_size>
 8004a0c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004a10:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8004a1a:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004a1e:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8004a22:	fa1f f28a 	uxth.w	r2, sl
 8004a26:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 8004a2a:	fa11 f085 	uxtah	r0, r1, r5
 8004a2e:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8004a32:	f8b7 1150 	ldrh.w	r1, [r7, #336]	; 0x150
 8004a36:	1e74      	subs	r4, r6, #1
 8004a38:	f8dc e000 	ldr.w	lr, [ip]
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8004a42:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004a46:	fb04 6402 	mla	r4, r4, r2, r6
 8004a4a:	f3ce 15c6 	ubfx	r5, lr, #7, #7
 8004a4e:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8004a52:	4408      	add	r0, r1
 8004a54:	f3ce 5141 	ubfx	r1, lr, #21, #2
 8004a58:	fa1f f28b 	uxth.w	r2, fp
 8004a5c:	63fc      	str	r4, [r7, #60]	; 0x3c
 8004a5e:	fa45 f101 	asr.w	r1, r5, r1
 8004a62:	f3ce 4543 	ubfx	r5, lr, #17, #4
 8004a66:	eba0 0e04 	sub.w	lr, r0, r4
 8004a6a:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
 8004a6e:	3a01      	subs	r2, #1
 8004a70:	1e70      	subs	r0, r6, #1
 8004a72:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8004a76:	b289      	uxth	r1, r1
 8004a78:	fb00 6602 	mla	r6, r0, r2, r6
 8004a7c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004a80:	4a85      	ldr	r2, [pc, #532]	; (8004c98 <forward_conv2d_nl_pool+0x3cc>)
 8004a82:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8004a86:	4606      	mov	r6, r0
 8004a88:	f8b7 4140 	ldrh.w	r4, [r7, #320]	; 0x140
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	bf08      	it	eq
 8004a90:	4616      	moveq	r6, r2
 8004a92:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8004a96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a9a:	2d04      	cmp	r5, #4
 8004a9c:	6438      	str	r0, [r7, #64]	; 0x40
 8004a9e:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8004aa2:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 8004aa6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8004aaa:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 8004aae:	fbbe f0f2 	udiv	r0, lr, r2
 8004ab2:	f100 0201 	add.w	r2, r0, #1
 8004ab6:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004aba:	f000 837b 	beq.w	80051b4 <forward_conv2d_nl_pool+0x8e8>
 8004abe:	2d08      	cmp	r5, #8
 8004ac0:	f000 8378 	beq.w	80051b4 <forward_conv2d_nl_pool+0x8e8>
 8004ac4:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8004ac8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004acc:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8004ad0:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004ad4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004ad8:	2a03      	cmp	r2, #3
 8004ada:	f241 800f 	bls.w	8005afc <forward_conv2d_nl_pool+0x1230>
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8364 	beq.w	80051b0 <forward_conv2d_nl_pool+0x8e4>
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004af4:	4249      	negs	r1, r1
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	6896      	ldr	r6, [r2, #8]
 8004afa:	6898      	ldr	r0, [r3, #8]
 8004afc:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8004b00:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8004b04:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004b08:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	f000 82da 	beq.w	80050c6 <forward_conv2d_nl_pool+0x7fa>
 8004b12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b16:	fa0f fc8b 	sxth.w	ip, fp
 8004b1a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8004b1e:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 8004b22:	fb03 f200 	mul.w	r2, r3, r0
 8004b26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b2a:	00ab      	lsls	r3, r5, #2
 8004b2c:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 8004b30:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 8004b34:	008c      	lsls	r4, r1, #2
 8004b36:	426d      	negs	r5, r5
 8004b38:	fb01 fc02 	mul.w	ip, r1, r2
 8004b3c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b40:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 8004b44:	f8d7 5138 	ldr.w	r5, [r7, #312]	; 0x138
 8004b48:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 8004b4c:	fa0f fc8a 	sxth.w	ip, sl
 8004b50:	fb05 f803 	mul.w	r8, r5, r3
 8004b54:	462b      	mov	r3, r5
 8004b56:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8004b5a:	00ad      	lsls	r5, r5, #2
 8004b5c:	fb02 f203 	mul.w	r2, r2, r3
 8004b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b64:	fb04 f000 	mul.w	r0, r4, r0
 8004b68:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8004c9c <forward_conv2d_nl_pool+0x3d0>
 8004b6c:	f8c7 c0cc 	str.w	ip, [r7, #204]	; 0xcc
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	f8b7 c130 	ldrh.w	ip, [r7, #304]	; 0x130
 8004b76:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8004b7a:	f8c7 c0ec 	str.w	ip, [r7, #236]	; 0xec
 8004b7e:	f04f 0c00 	mov.w	ip, #0
 8004b82:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b8e:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
 8004b92:	460d      	mov	r5, r1
 8004b94:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8004b98:	469c      	mov	ip, r3
 8004b9a:	fb00 f101 	mul.w	r1, r0, r1
 8004b9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ba2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004ba6:	fb0c fc03 	mul.w	ip, ip, r3
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8004bb0:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8004bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb6:	468e      	mov	lr, r1
 8004bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bbc:	fb06 fc08 	mul.w	ip, r6, r8
 8004bc0:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8004bc4:	469c      	mov	ip, r3
 8004bc6:	0093      	lsls	r3, r2, #2
 8004bc8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004bcc:	fb0c fc01 	mul.w	ip, ip, r1
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8004bd8:	fb00 fc02 	mul.w	ip, r0, r2
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 8004be2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8004be6:	fb01 f005 	mul.w	r0, r1, r5
 8004bea:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8004bee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004bf2:	6238      	str	r0, [r7, #32]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004bfc:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c06:	469c      	mov	ip, r3
 8004c08:	4623      	mov	r3, r4
 8004c0a:	fb05 f303 	mul.w	r3, r5, r3
 8004c0e:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 8004c12:	fb0c f404 	mul.w	r4, ip, r4
 8004c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c1c:	66bc      	str	r4, [r7, #104]	; 0x68
 8004c1e:	0114      	lsls	r4, r2, #4
 8004c20:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8004c24:	46a2      	mov	sl, r4
 8004c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c28:	fb05 f306 	mul.w	r3, r5, r6
 8004c2c:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 8004c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c32:	4603      	mov	r3, r0
 8004c34:	fb00 f005 	mul.w	r0, r0, r5
 8004c38:	fb03 f301 	mul.w	r3, r3, r1
 8004c3c:	6778      	str	r0, [r7, #116]	; 0x74
 8004c3e:	00d0      	lsls	r0, r2, #3
 8004c40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c44:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8004c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f340 81ca 	ble.w	8004ff6 <forward_conv2d_nl_pool+0x72a>
 8004c62:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c72:	441a      	add	r2, r3
 8004c74:	bfb4      	ite	lt
 8004c76:	2100      	movlt	r1, #0
 8004c78:	2300      	movge	r3, #0
 8004c7a:	4282      	cmp	r2, r0
 8004c7c:	bf28      	it	cs
 8004c7e:	4602      	movcs	r2, r0
 8004c80:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004c84:	2801      	cmp	r0, #1
 8004c86:	f000 8403 	beq.w	8005490 <forward_conv2d_nl_pool+0xbc4>
 8004c8a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c8e:	4281      	cmp	r1, r0
 8004c90:	f000 82be 	beq.w	8005210 <forward_conv2d_nl_pool+0x944>
 8004c94:	e004      	b.n	8004ca0 <forward_conv2d_nl_pool+0x3d4>
 8004c96:	bf00      	nop
 8004c98:	08004829 	.word	0x08004829
 8004c9c:	00000000 	.word	0x00000000
 8004ca0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	f000 8199 	beq.w	8004fdc <forward_conv2d_nl_pool+0x710>
 8004caa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8004cb4:	181d      	adds	r5, r3, r0
 8004cb6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8004cba:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8004cbe:	3d01      	subs	r5, #1
 8004cc0:	fb93 f1f0 	sdiv	r1, r3, r0
 8004cc4:	fb00 3111 	mls	r1, r0, r1, r3
 8004cc8:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8004ccc:	2400      	movs	r4, #0
 8004cce:	1a41      	subs	r1, r0, r1
 8004cd0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	fb91 f0f0 	sdiv	r0, r1, r0
 8004cda:	fb04 1110 	mls	r1, r4, r0, r1
 8004cde:	4620      	mov	r0, r4
 8004ce0:	1a52      	subs	r2, r2, r1
 8004ce2:	4419      	add	r1, r3
 8004ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ce8:	4422      	add	r2, r4
 8004cea:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8004cee:	fb03 f301 	mul.w	r3, r3, r1
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004cfa:	fb92 f8f0 	sdiv	r8, r2, r0
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004d04:	fbb1 f3f4 	udiv	r3, r1, r4
 8004d08:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8004d0c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8004d10:	fb95 f5f0 	sdiv	r5, r5, r0
 8004d14:	eba1 0008 	sub.w	r0, r1, r8
 8004d18:	6a39      	ldr	r1, [r7, #32]
 8004d1a:	eba1 0c03 	sub.w	ip, r1, r3
 8004d1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d22:	fbb2 f2f4 	udiv	r2, r2, r4
 8004d26:	fb0e f403 	mul.w	r4, lr, r3
 8004d2a:	0096      	lsls	r6, r2, #2
 8004d2c:	fb03 f305 	mul.w	r3, r3, r5
 8004d30:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8004d34:	667a      	str	r2, [r7, #100]	; 0x64
 8004d36:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8004d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3c:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8004d40:	fb04 f300 	mul.w	r3, r4, r0
 8004d44:	673e      	str	r6, [r7, #112]	; 0x70
 8004d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d4a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d4e:	1b9b      	subs	r3, r3, r6
 8004d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5c:	46c2      	mov	sl, r8
 8004d5e:	00d3      	lsls	r3, r2, #3
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004d68:	189e      	adds	r6, r3, r2
 8004d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f2c0 811f 	blt.w	8004fb2 <forward_conv2d_nl_pool+0x6e6>
 8004d74:	2100      	movs	r1, #0
 8004d76:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d7c:	4688      	mov	r8, r1
 8004d7e:	460d      	mov	r5, r1
 8004d80:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 8004d84:	f103 3cff 	add.w	ip, r3, #4294967295
 8004d88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004d8c:	0080      	lsls	r0, r0, #2
 8004d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004d96:	4422      	add	r2, r4
 8004d98:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8004d9c:	4423      	add	r3, r4
 8004d9e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8004da2:	42a2      	cmp	r2, r4
 8004da4:	bf94      	ite	ls
 8004da6:	ebc5 0202 	rsbls	r2, r5, r2
 8004daa:	ebc5 0204 	rsbhi	r2, r5, r4
 8004dae:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8004db2:	eb08 0403 	add.w	r4, r8, r3
 8004db6:	1a52      	subs	r2, r2, r1
 8004db8:	462b      	mov	r3, r5
 8004dba:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8004dbe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	bf08      	it	eq
 8004dc6:	4633      	moveq	r3, r6
 8004dc8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004dcc:	440a      	add	r2, r1
 8004dce:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8004dd2:	42b3      	cmp	r3, r6
 8004dd4:	f102 36ff 	add.w	r6, r2, #4294967295
 8004dd8:	fb00 5004 	mla	r0, r0, r4, r5
 8004ddc:	460a      	mov	r2, r1
 8004dde:	fe08 6a06 	vseleq.f32	s12, s16, s12
 8004de2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8004de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de8:	fb96 f6f1 	sdiv	r6, r6, r1
 8004dec:	fb9c f5f1 	sdiv	r5, ip, r1
 8004df0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004df2:	440d      	add	r5, r1
 8004df4:	fb06 0112 	mls	r1, r6, r2, r0
 8004df8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004dfc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e00:	fb0e 0505 	mla	r5, lr, r5, r0
 8004e04:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004e08:	1b92      	subs	r2, r2, r6
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d06f      	beq.n	8004eee <forward_conv2d_nl_pool+0x622>
 8004e0e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8004e12:	fb0e f802 	mul.w	r8, lr, r2
 8004e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e18:	fb00 fb01 	mul.w	fp, r0, r1
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d066      	beq.n	8004eee <forward_conv2d_nl_pool+0x622>
 8004e20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e22:	189a      	adds	r2, r3, r2
 8004e24:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8004e28:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e30:	2300      	movs	r3, #0
 8004e32:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e34:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3c:	4413      	add	r3, r2
 8004e3e:	188a      	adds	r2, r1, r2
 8004e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e42:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8004e46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004e4e:	f1ba 0f00 	cmp.w	sl, #0
 8004e52:	ecf3 7a01 	vldmia	r3!, {s15}
 8004e56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e5e:	f340 80a6 	ble.w	8004fae <forward_conv2d_nl_pool+0x6e2>
 8004e62:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004e66:	f04f 0c00 	mov.w	ip, #0
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	dd19      	ble.n	8004ea2 <forward_conv2d_nl_pool+0x5d6>
 8004e6e:	2100      	movs	r1, #0
 8004e70:	eb00 040e 	add.w	r4, r0, lr
 8004e74:	4284      	cmp	r4, r0
 8004e76:	d910      	bls.n	8004e9a <forward_conv2d_nl_pool+0x5ce>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	ecb3 7a01 	vldmia	r3!, {s14}
 8004e80:	ecf2 6a01 	vldmia	r2!, {s13}
 8004e84:	429c      	cmp	r4, r3
 8004e86:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004e8a:	d8f7      	bhi.n	8004e7c <forward_conv2d_nl_pool+0x5b0>
 8004e8c:	43c3      	mvns	r3, r0
 8004e8e:	441c      	add	r4, r3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	3404      	adds	r4, #4
 8004e96:	4425      	add	r5, r4
 8004e98:	4420      	add	r0, r4
 8004e9a:	3101      	adds	r1, #1
 8004e9c:	4448      	add	r0, r9
 8004e9e:	428e      	cmp	r6, r1
 8004ea0:	d1e6      	bne.n	8004e70 <forward_conv2d_nl_pool+0x5a4>
 8004ea2:	f10c 0c01 	add.w	ip, ip, #1
 8004ea6:	4458      	add	r0, fp
 8004ea8:	4445      	add	r5, r8
 8004eaa:	45e2      	cmp	sl, ip
 8004eac:	d1dd      	bne.n	8004e6a <forward_conv2d_nl_pool+0x59e>
 8004eae:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eb6:	441d      	add	r5, r3
 8004eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ebc:	ece3 7a01 	vstmia	r3!, {s15}
 8004ec0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d1be      	bne.n	8004e4a <forward_conv2d_nl_pool+0x57e>
 8004ecc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004ed0:	69f9      	ldr	r1, [r7, #28]
 8004ed2:	4472      	add	r2, lr
 8004ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004eda:	3301      	adds	r3, #1
 8004edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ede:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee0:	1a52      	subs	r2, r2, r1
 8004ee2:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8004ee6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d1a2      	bne.n	8004e34 <forward_conv2d_nl_pool+0x568>
 8004eee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004ef2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f00:	4410      	add	r0, r2
 8004f02:	3301      	adds	r3, #1
 8004f04:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8004f08:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8004f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f10:	4401      	add	r1, r0
 8004f12:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8004f16:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004f1a:	1a8a      	subs	r2, r1, r2
 8004f1c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004f20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f24:	429a      	cmp	r2, r3
 8004f26:	f47f af1c 	bne.w	8004d62 <forward_conv2d_nl_pool+0x496>
 8004f2a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	f000 8167 	beq.w	800520c <forward_conv2d_nl_pool+0x940>
 8004f3e:	2400      	movs	r4, #0
 8004f40:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 8004f44:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8004f48:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8004f4c:	f8d7 910c 	ldr.w	r9, [r7, #268]	; 0x10c
 8004f50:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8004f54:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8004f58:	4641      	mov	r1, r8
 8004f5a:	609e      	str	r6, [r3, #8]
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	462b      	mov	r3, r5
 8004f60:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004f64:	4425      	add	r5, r4
 8004f66:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8004f6a:	47a0      	blx	r4
 8004f6c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004f70:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f74:	eba5 0009 	sub.w	r0, r5, r9
 8004f78:	6859      	ldr	r1, [r3, #4]
 8004f7a:	4416      	add	r6, r2
 8004f7c:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8004f80:	0089      	lsls	r1, r1, #2
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	bfa8      	it	ge
 8004f88:	464d      	movge	r5, r9
 8004f8a:	1850      	adds	r0, r2, r1
 8004f8c:	4286      	cmp	r6, r0
 8004f8e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004f92:	bf28      	it	cs
 8004f94:	1a76      	subcs	r6, r6, r1
 8004f96:	3001      	adds	r0, #1
 8004f98:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004f9c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
 8004fa0:	4281      	cmp	r1, r0
 8004fa2:	d1d7      	bne.n	8004f54 <forward_conv2d_nl_pool+0x688>
 8004fa4:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 8004fa8:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8004fac:	e01a      	b.n	8004fe4 <forward_conv2d_nl_pool+0x718>
 8004fae:	461a      	mov	r2, r3
 8004fb0:	e77f      	b.n	8004eb2 <forward_conv2d_nl_pool+0x5e6>
 8004fb2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004fb6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004fba:	460d      	mov	r5, r1
 8004fbc:	4688      	mov	r8, r1
 8004fbe:	1853      	adds	r3, r2, r1
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	fb95 f2f2 	sdiv	r2, r5, r2
 8004fc6:	fb01 5212 	mls	r2, r1, r2, r5
 8004fca:	460c      	mov	r4, r1
 8004fcc:	1a8a      	subs	r2, r1, r2
 8004fce:	fb92 f1f1 	sdiv	r1, r2, r1
 8004fd2:	fb04 2111 	mls	r1, r4, r1, r2
 8004fd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fd8:	1888      	adds	r0, r1, r2
 8004fda:	e6d1      	b.n	8004d80 <forward_conv2d_nl_pool+0x4b4>
 8004fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004fe8:	609a      	str	r2, [r3, #8]
 8004fea:	3101      	adds	r1, #1
 8004fec:	b20b      	sxth	r3, r1
 8004fee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004ff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ffc:	f100 808b 	bmi.w	8005116 <forward_conv2d_nl_pool+0x84a>
 8005000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005004:	f8d7 5140 	ldr.w	r5, [r7, #320]	; 0x140
 8005008:	42ab      	cmp	r3, r5
 800500a:	d869      	bhi.n	80050e0 <forward_conv2d_nl_pool+0x814>
 800500c:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 8005010:	b29c      	uxth	r4, r3
 8005012:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005016:	2101      	movs	r1, #1
 8005018:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800501c:	6998      	ldr	r0, [r3, #24]
 800501e:	fa1f f389 	uxth.w	r3, r9
 8005022:	9401      	str	r4, [sp, #4]
 8005024:	1aa2      	subs	r2, r4, r2
 8005026:	1aee      	subs	r6, r5, r3
 8005028:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 800502c:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 8005030:	b292      	uxth	r2, r2
 8005032:	9508      	str	r5, [sp, #32]
 8005034:	b236      	sxth	r6, r6
 8005036:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 800503a:	9305      	str	r3, [sp, #20]
 800503c:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 8005040:	9107      	str	r1, [sp, #28]
 8005042:	fa1f f388 	uxth.w	r3, r8
 8005046:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800504a:	9406      	str	r4, [sp, #24]
 800504c:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 8005050:	9504      	str	r5, [sp, #16]
 8005052:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8005056:	9303      	str	r3, [sp, #12]
 8005058:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800505c:	9102      	str	r1, [sp, #8]
 800505e:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 8005062:	9400      	str	r4, [sp, #0]
 8005064:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8005068:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 800506a:	3401      	adds	r4, #1
 800506c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005070:	47b0      	blx	r6
 8005072:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8005076:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800507a:	fa0f f389 	sxth.w	r3, r9
 800507e:	462e      	mov	r6, r5
 8005080:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8005082:	688a      	ldr	r2, [r1, #8]
 8005084:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005088:	442a      	add	r2, r5
 800508a:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800508e:	4406      	add	r6, r0
 8005090:	1a28      	subs	r0, r5, r0
 8005092:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8005094:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8005098:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800509c:	4640      	mov	r0, r8
 800509e:	608a      	str	r2, [r1, #8]
 80050a0:	1ac3      	subs	r3, r0, r3
 80050a2:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80050a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80050aa:	4428      	add	r0, r5
 80050ac:	b21b      	sxth	r3, r3
 80050ae:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 80050b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050ba:	42a3      	cmp	r3, r4
 80050bc:	f63f adcc 	bhi.w	8004c58 <forward_conv2d_nl_pool+0x38c>
 80050c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ce:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80050d2:	68d3      	ldr	r3, [r2, #12]
 80050d4:	6093      	str	r3, [r2, #8]
 80050d6:	46bd      	mov	sp, r7
 80050d8:	ecbd 8b08 	vpop	{d8-d11}
 80050dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80050e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e8:	4611      	mov	r1, r2
 80050ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80050ee:	4419      	add	r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80050fc:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8005100:	4413      	add	r3, r2
 8005102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005106:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800510a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800510e:	4293      	cmp	r3, r2
 8005110:	f63f ada2 	bhi.w	8004c58 <forward_conv2d_nl_pool+0x38c>
 8005114:	e7d4      	b.n	80050c0 <forward_conv2d_nl_pool+0x7f4>
 8005116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800511a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800511e:	6999      	ldr	r1, [r3, #24]
 8005120:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005126:	fb02 0213 	mls	r2, r2, r3, r0
 800512a:	68c8      	ldr	r0, [r1, #12]
 800512c:	684b      	ldr	r3, [r1, #4]
 800512e:	4290      	cmp	r0, r2
 8005130:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005134:	bf88      	it	hi
 8005136:	18d2      	addhi	r2, r2, r3
 8005138:	18c1      	adds	r1, r0, r3
 800513a:	4290      	cmp	r0, r2
 800513c:	d216      	bcs.n	800516c <forward_conv2d_nl_pool+0x8a0>
 800513e:	f9b7 00b8 	ldrsh.w	r0, [r7, #184]	; 0xb8
 8005142:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8005146:	42a0      	cmp	r0, r4
 8005148:	d010      	beq.n	800516c <forward_conv2d_nl_pool+0x8a0>
 800514a:	428a      	cmp	r2, r1
 800514c:	d20e      	bcs.n	800516c <forward_conv2d_nl_pool+0x8a0>
 800514e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8005152:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8005156:	f852 3b04 	ldr.w	r3, [r2], #4
 800515a:	f840 3b04 	str.w	r3, [r0], #4
 800515e:	69a1      	ldr	r1, [r4, #24]
 8005160:	684b      	ldr	r3, [r1, #4]
 8005162:	68c9      	ldr	r1, [r1, #12]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4419      	add	r1, r3
 8005168:	4291      	cmp	r1, r2
 800516a:	d8f4      	bhi.n	8005156 <forward_conv2d_nl_pool+0x88a>
 800516c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005170:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8005174:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8005176:	4420      	add	r0, r4
 8005178:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800517c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8005180:	442c      	add	r4, r5
 8005182:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 8005186:	1a80      	subs	r0, r0, r2
 8005188:	442a      	add	r2, r5
 800518a:	428c      	cmp	r4, r1
 800518c:	b200      	sxth	r0, r0
 800518e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8005192:	b212      	sxth	r2, r2
 8005194:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 8005198:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800519c:	4622      	mov	r2, r4
 800519e:	f4ff af2f 	bcc.w	8005000 <forward_conv2d_nl_pool+0x734>
 80051a2:	425b      	negs	r3, r3
 80051a4:	441a      	add	r2, r3
 80051a6:	428a      	cmp	r2, r1
 80051a8:	d2fc      	bcs.n	80051a4 <forward_conv2d_nl_pool+0x8d8>
 80051aa:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80051ae:	e727      	b.n	8005000 <forward_conv2d_nl_pool+0x734>
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	deff      	udf	#255	; 0xff
 80051b4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	f43f ac83 	beq.w	8004ac4 <forward_conv2d_nl_pool+0x1f8>
 80051be:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80051c2:	2803      	cmp	r0, #3
 80051c4:	f240 849a 	bls.w	8005afc <forward_conv2d_nl_pool+0x1230>
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	b1db      	cbz	r3, 8005206 <forward_conv2d_nl_pool+0x93a>
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	b1cb      	cbz	r3, 8005206 <forward_conv2d_nl_pool+0x93a>
 80051d2:	6998      	ldr	r0, [r3, #24]
 80051d4:	460b      	mov	r3, r1
 80051d6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80051da:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 80051de:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80051e2:	9501      	str	r5, [sp, #4]
 80051e4:	9000      	str	r0, [sp, #0]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7ff fb20 	bl	800482c <ai_dict_decompress_f32>
 80051ec:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80051f0:	b12c      	cbz	r4, 80051fe <forward_conv2d_nl_pool+0x932>
 80051f2:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80051fc:	e462      	b.n	8004ac4 <forward_conv2d_nl_pool+0x1f8>
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005204:	e45e      	b.n	8004ac4 <forward_conv2d_nl_pool+0x1f8>
 8005206:	2300      	movs	r3, #0
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	deff      	udf	#255	; 0xff
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	e6e9      	b.n	8004fe4 <forward_conv2d_nl_pool+0x718>
 8005210:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005214:	2901      	cmp	r1, #1
 8005216:	f47f ad43 	bne.w	8004ca0 <forward_conv2d_nl_pool+0x3d4>
 800521a:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800521e:	2900      	cmp	r1, #0
 8005220:	f43f aedc 	beq.w	8004fdc <forward_conv2d_nl_pool+0x710>
 8005224:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005228:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800522c:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8005230:	fbb1 f1f0 	udiv	r1, r1, r0
 8005234:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 8005238:	fb03 f506 	mul.w	r5, r3, r6
 800523c:	1ad0      	subs	r0, r2, r3
 800523e:	00b2      	lsls	r2, r6, #2
 8005240:	00a4      	lsls	r4, r4, #2
 8005242:	67fd      	str	r5, [r7, #124]	; 0x7c
 8005244:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 8005248:	65fc      	str	r4, [r7, #92]	; 0x5c
 800524a:	69bc      	ldr	r4, [r7, #24]
 800524c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8005250:	1a28      	subs	r0, r5, r0
 8005252:	fb04 f303 	mul.w	r3, r4, r3
 8005256:	460d      	mov	r5, r1
 8005258:	62f9      	str	r1, [r7, #44]	; 0x2c
 800525a:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	fb02 f300 	mul.w	r3, r2, r0
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	00cb      	lsls	r3, r1, #3
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	00ab      	lsls	r3, r5, #2
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005272:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005276:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800527a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800527e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005282:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005286:	2300      	movs	r3, #0
 8005288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800528c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005290:	2b00      	cmp	r3, #0
 8005292:	f2c0 826a 	blt.w	800576a <forward_conv2d_nl_pool+0xe9e>
 8005296:	2400      	movs	r4, #0
 8005298:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800529a:	4621      	mov	r1, r4
 800529c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80052a0:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80052a4:	1818      	adds	r0, r3, r0
 80052a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052aa:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80052ae:	18f3      	adds	r3, r6, r3
 80052b0:	4420      	add	r0, r4
 80052b2:	461c      	mov	r4, r3
 80052b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052b8:	0080      	lsls	r0, r0, #2
 80052ba:	429c      	cmp	r4, r3
 80052bc:	bf28      	it	cs
 80052be:	461c      	movcs	r4, r3
 80052c0:	1a64      	subs	r4, r4, r1
 80052c2:	2d00      	cmp	r5, #0
 80052c4:	f000 8242 	beq.w	800574c <forward_conv2d_nl_pool+0xe80>
 80052c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052cc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80052d0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80052d4:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 80052d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80052dc:	428d      	cmp	r5, r1
 80052de:	462a      	mov	r2, r5
 80052e0:	eba6 0104 	sub.w	r1, r6, r4
 80052e4:	eba3 0304 	sub.w	r3, r3, r4
 80052e8:	fe48 3a23 	vseleq.f32	s7, s16, s7
 80052ec:	697d      	ldr	r5, [r7, #20]
 80052ee:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 80052f2:	4428      	add	r0, r5
 80052f4:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 80052f8:	fb05 6e00 	mla	lr, r5, r0, r6
 80052fc:	eb0e 000b 	add.w	r0, lr, fp
 8005300:	4586      	cmp	lr, r0
 8005302:	61f8      	str	r0, [r7, #28]
 8005304:	f080 80a5 	bcs.w	8005452 <forward_conv2d_nl_pool+0xb86>
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	fb01 f10b 	mul.w	r1, r1, fp
 800530e:	f024 0803 	bic.w	r8, r4, #3
 8005312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8098 	beq.w	8005452 <forward_conv2d_nl_pool+0xb86>
 8005322:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005324:	f108 33ff 	add.w	r3, r8, #4294967295
 8005328:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	4401      	add	r1, r0
 8005330:	68b8      	ldr	r0, [r7, #8]
 8005332:	3301      	adds	r3, #1
 8005334:	1810      	adds	r0, r2, r0
 8005336:	1a8a      	subs	r2, r1, r2
 8005338:	613a      	str	r2, [r7, #16]
 800533a:	fb03 f20a 	mul.w	r2, r3, sl
 800533e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8005342:	667a      	str	r2, [r7, #100]	; 0x64
 8005344:	011a      	lsls	r2, r3, #4
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	673a      	str	r2, [r7, #112]	; 0x70
 800534a:	663b      	str	r3, [r7, #96]	; 0x60
 800534c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005352:	6939      	ldr	r1, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	188a      	adds	r2, r1, r2
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	67ba      	str	r2, [r7, #120]	; 0x78
 800535c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005364:	ecf3 6a01 	vldmia	r3!, {s13}
 8005368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800536c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005370:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005374:	2b00      	cmp	r3, #0
 8005376:	dd57      	ble.n	8005428 <forward_conv2d_nl_pool+0xb5c>
 8005378:	4676      	mov	r6, lr
 800537a:	f04f 0c00 	mov.w	ip, #0
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	f340 81e1 	ble.w	8005748 <forward_conv2d_nl_pool+0xe7c>
 8005386:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800538a:	f109 0310 	add.w	r3, r9, #16
 800538e:	2000      	movs	r0, #0
 8005390:	18b1      	adds	r1, r6, r2
 8005392:	4632      	mov	r2, r6
 8005394:	eb02 050b 	add.w	r5, r2, fp
 8005398:	ed53 7a03 	vldr	s15, [r3, #-12]
 800539c:	ed92 4a00 	vldr	s8, [r2]
 80053a0:	3004      	adds	r0, #4
 80053a2:	ed95 7a00 	vldr	s14, [r5]
 80053a6:	eb01 050b 	add.w	r5, r1, fp
 80053aa:	ed53 4a04 	vldr	s9, [r3, #-16]
 80053ae:	4540      	cmp	r0, r8
 80053b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b4:	ed91 5a00 	vldr	s10, [r1]
 80053b8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80053bc:	4452      	add	r2, sl
 80053be:	ed13 7a01 	vldr	s14, [r3, #-4]
 80053c2:	4451      	add	r1, sl
 80053c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80053c8:	ed95 6a00 	vldr	s12, [r5]
 80053cc:	f103 0310 	add.w	r3, r3, #16
 80053d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80053d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80053d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80053dc:	dbda      	blt.n	8005394 <forward_conv2d_nl_pool+0xac8>
 80053de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80053e2:	441e      	add	r6, r3
 80053e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e6:	4499      	add	r9, r3
 80053e8:	42a0      	cmp	r0, r4
 80053ea:	da11      	bge.n	8005410 <forward_conv2d_nl_pool+0xb44>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4633      	mov	r3, r6
 80053f0:	4649      	mov	r1, r9
 80053f2:	3201      	adds	r2, #1
 80053f4:	edd3 7a00 	vldr	s15, [r3]
 80053f8:	ecb1 7a01 	vldmia	r1!, {s14}
 80053fc:	445b      	add	r3, fp
 80053fe:	42a2      	cmp	r2, r4
 8005400:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005404:	d1f5      	bne.n	80053f2 <forward_conv2d_nl_pool+0xb26>
 8005406:	1a20      	subs	r0, r4, r0
 8005408:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800540c:	fb00 660b 	mla	r6, r0, fp, r6
 8005410:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005414:	f10c 0c01 	add.w	ip, ip, #1
 8005418:	441e      	add	r6, r3
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	4499      	add	r9, r3
 8005420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005424:	4563      	cmp	r3, ip
 8005426:	d1aa      	bne.n	800537e <forward_conv2d_nl_pool+0xab2>
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	4499      	add	r9, r3
 800542c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542e:	ece3 6a01 	vstmia	r3!, {s13}
 8005432:	67bb      	str	r3, [r7, #120]	; 0x78
 8005434:	e9d7 2335 	ldrd	r2, r3, [r7, #212]	; 0xd4
 8005438:	4293      	cmp	r3, r2
 800543a:	d191      	bne.n	8005360 <forward_conv2d_nl_pool+0xa94>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f10e 0e04 	add.w	lr, lr, #4
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	459e      	cmp	lr, r3
 800544e:	f4ff af7d 	bcc.w	800534c <forward_conv2d_nl_pool+0xa80>
 8005452:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8005456:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800545a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800545e:	440a      	add	r2, r1
 8005460:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005464:	3301      	adds	r3, #1
 8005466:	4608      	mov	r0, r1
 8005468:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800546c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8005470:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005478:	4410      	add	r0, r2
 800547a:	1a8a      	subs	r2, r1, r2
 800547c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005480:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005484:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8005488:	429a      	cmp	r2, r3
 800548a:	f47f aeff 	bne.w	800528c <forward_conv2d_nl_pool+0x9c0>
 800548e:	e54e      	b.n	8004f2e <forward_conv2d_nl_pool+0x662>
 8005490:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005494:	2801      	cmp	r0, #1
 8005496:	f47f ac03 	bne.w	8004ca0 <forward_conv2d_nl_pool+0x3d4>
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800549e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80054a2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80054a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a8:	fb00 4101 	mla	r1, r0, r1, r4
 80054ac:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80054b0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80054b4:	f080 8172 	bcs.w	800579c <forward_conv2d_nl_pool+0xed0>
 80054b8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80054bc:	2a00      	cmp	r2, #0
 80054be:	f43f ad36 	beq.w	8004f2e <forward_conv2d_nl_pool+0x662>
 80054c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ce:	4411      	add	r1, r2
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	6639      	str	r1, [r7, #96]	; 0x60
 80054d4:	667b      	str	r3, [r7, #100]	; 0x64
 80054d6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80054da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054de:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80054e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e6:	2300      	movs	r3, #0
 80054e8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80054ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054f0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80054f4:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 814a 	beq.w	8005796 <forward_conv2d_nl_pool+0xeca>
 8005502:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005506:	ed93 6a00 	vldr	s12, [r3]
 800550a:	3304      	adds	r3, #4
 800550c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005510:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80fe 	beq.w	8005716 <forward_conv2d_nl_pool+0xe4a>
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	f04f 0b00 	mov.w	fp, #0
 8005522:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005526:	eb03 0802 	add.w	r8, r3, r2
 800552a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800553a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005540:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f2c0 811b 	blt.w	8005784 <forward_conv2d_nl_pool+0xeb8>
 800554e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005552:	2300      	movs	r3, #0
 8005554:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005556:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800555a:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800555e:	4540      	cmp	r0, r8
 8005560:	bf94      	ite	ls
 8005562:	ebc3 0300 	rsbls	r3, r3, r0
 8005566:	ebc3 0308 	rsbhi	r3, r3, r8
 800556a:	4422      	add	r2, r4
 800556c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8005570:	1ac0      	subs	r0, r0, r3
 8005572:	eba4 0903 	sub.w	r9, r4, r3
 8005576:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 800557a:	fb03 f304 	mul.w	r3, r3, r4
 800557e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8005582:	2c00      	cmp	r4, #0
 8005584:	f340 80fb 	ble.w	800577e <forward_conv2d_nl_pool+0xeb2>
 8005588:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800558c:	f023 050f 	bic.w	r5, r3, #15
 8005590:	eef0 6a46 	vmov.f32	s13, s12
 8005594:	f04f 0e00 	mov.w	lr, #0
 8005598:	fb04 f000 	mul.w	r0, r4, r0
 800559c:	fb04 f909 	mul.w	r9, r4, r9
 80055a0:	6738      	str	r0, [r7, #112]	; 0x70
 80055a2:	1e68      	subs	r0, r5, #1
 80055a4:	0900      	lsrs	r0, r0, #4
 80055a6:	3001      	adds	r0, #1
 80055a8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80055ac:	0100      	lsls	r0, r0, #4
 80055ae:	65f8      	str	r0, [r7, #92]	; 0x5c
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	f340 80e2 	ble.w	800577a <forward_conv2d_nl_pool+0xeae>
 80055b6:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80055ba:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80055be:	2600      	movs	r6, #0
 80055c0:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80055c4:	3610      	adds	r6, #16
 80055c6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80055ca:	3040      	adds	r0, #64	; 0x40
 80055cc:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 80055d0:	42ae      	cmp	r6, r5
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 80055da:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 80055de:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80055e2:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 80055e6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80055ea:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 80055ee:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 80055f2:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 80055f6:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 80055fa:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 80055fe:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8005602:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005606:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 800560a:	ed14 ba1a 	vldr	s22, [r4, #-104]	; 0xffffff98
 800560e:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 8005612:	ed14 aa19 	vldr	s20, [r4, #-100]	; 0xffffff9c
 8005616:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 800561a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800561e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005622:	ed54 8a17 	vldr	s17, [r4, #-92]	; 0xffffffa4
 8005626:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800562a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800562e:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8005632:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 8005636:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800563a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800563e:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8005642:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8005646:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800564a:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 800564e:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8005652:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8005656:	eee5 7a87 	vfma.f32	s15, s11, s14
 800565a:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 800565e:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8005662:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005666:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800566a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800566e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8005672:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005676:	eee1 7a82 	vfma.f32	s15, s3, s4
 800567a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800567e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005682:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005686:	eee5 7a87 	vfma.f32	s15, s11, s14
 800568a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800568e:	db97      	blt.n	80055c0 <forward_conv2d_nl_pool+0xcf4>
 8005690:	4451      	add	r1, sl
 8005692:	4452      	add	r2, sl
 8005694:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005696:	4283      	cmp	r3, r0
 8005698:	dd0f      	ble.n	80056ba <forward_conv2d_nl_pool+0xdee>
 800569a:	4604      	mov	r4, r0
 800569c:	468c      	mov	ip, r1
 800569e:	4616      	mov	r6, r2
 80056a0:	3401      	adds	r4, #1
 80056a2:	ecb6 7a01 	vldmia	r6!, {s14}
 80056a6:	ecfc 7a01 	vldmia	ip!, {s15}
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80056b0:	d1f6      	bne.n	80056a0 <forward_conv2d_nl_pool+0xdd4>
 80056b2:	1a18      	subs	r0, r3, r0
 80056b4:	0080      	lsls	r0, r0, #2
 80056b6:	4402      	add	r2, r0
 80056b8:	4401      	add	r1, r0
 80056ba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80056bc:	f10e 0e01 	add.w	lr, lr, #1
 80056c0:	4449      	add	r1, r9
 80056c2:	4402      	add	r2, r0
 80056c4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80056c8:	4570      	cmp	r0, lr
 80056ca:	f47f af71 	bne.w	80055b0 <forward_conv2d_nl_pool+0xce4>
 80056ce:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80056d2:	f10b 0b01 	add.w	fp, fp, #1
 80056d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d8:	4608      	mov	r0, r1
 80056da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056de:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80056e2:	4410      	add	r0, r2
 80056e4:	edc3 6a00 	vstr	s13, [r3]
 80056e8:	440b      	add	r3, r1
 80056ea:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80056ee:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80056f2:	eba8 0802 	sub.w	r8, r8, r2
 80056f6:	4608      	mov	r0, r1
 80056f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056fa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80056fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005700:	4418      	add	r0, r3
 8005702:	1acb      	subs	r3, r1, r3
 8005704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005708:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800570c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8005710:	455b      	cmp	r3, fp
 8005712:	f47f af17 	bne.w	8005544 <forward_conv2d_nl_pool+0xc78>
 8005716:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800571a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800571c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005720:	440a      	add	r2, r1
 8005722:	3301      	adds	r3, #1
 8005724:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8005728:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800572c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005730:	3204      	adds	r2, #4
 8005732:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005736:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800573a:	429a      	cmp	r2, r3
 800573c:	f47f aedc 	bne.w	80054f8 <forward_conv2d_nl_pool+0xc2c>
 8005740:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005744:	f7ff bbf3 	b.w	8004f2e <forward_conv2d_nl_pool+0x662>
 8005748:	2000      	movs	r0, #0
 800574a:	e64d      	b.n	80053e8 <forward_conv2d_nl_pool+0xb1c>
 800574c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005750:	eef0 3a48 	vmov.f32	s7, s16
 8005754:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 8005758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800575c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8005760:	1b19      	subs	r1, r3, r4
 8005762:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005766:	1b1b      	subs	r3, r3, r4
 8005768:	e5c0      	b.n	80052ec <forward_conv2d_nl_pool+0xa20>
 800576a:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800576e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005770:	4621      	mov	r1, r4
 8005772:	191a      	adds	r2, r3, r4
 8005774:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005778:	e590      	b.n	800529c <forward_conv2d_nl_pool+0x9d0>
 800577a:	2000      	movs	r0, #0
 800577c:	e78b      	b.n	8005696 <forward_conv2d_nl_pool+0xdca>
 800577e:	eef0 6a46 	vmov.f32	s13, s12
 8005782:	e7a4      	b.n	80056ce <forward_conv2d_nl_pool+0xe02>
 8005784:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005788:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800578c:	eba8 0303 	sub.w	r3, r8, r3
 8005790:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005794:	e6df      	b.n	8005556 <forward_conv2d_nl_pool+0xc8a>
 8005796:	eeb0 6a48 	vmov.f32	s12, s16
 800579a:	e6b9      	b.n	8005510 <forward_conv2d_nl_pool+0xc44>
 800579c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057a0:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80057a4:	320a      	adds	r2, #10
 80057a6:	f022 0207 	bic.w	r2, r2, #7
 80057aa:	ebad 0d02 	sub.w	sp, sp, r2
 80057ae:	aa0a      	add	r2, sp, #40	; 0x28
 80057b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057b4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	f000 814e 	beq.w	8005a5a <forward_conv2d_nl_pool+0x118e>
 80057be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80057c2:	f8c7 b01c 	str.w	fp, [r7, #28]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057cc:	f8c7 a014 	str.w	sl, [r7, #20]
 80057d0:	4411      	add	r1, r2
 80057d2:	667b      	str	r3, [r7, #100]	; 0x64
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057da:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80057de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80057e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057ea:	2300      	movs	r3, #0
 80057ec:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80057f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057f4:	67f9      	str	r1, [r7, #124]	; 0x7c
 80057f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057fa:	b13b      	cbz	r3, 800580c <forward_conv2d_nl_pool+0xf40>
 80057fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005800:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005804:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005808:	f001 fc34 	bl	8007074 <memcpy>
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8134 	beq.w	8005a7e <forward_conv2d_nl_pool+0x11b2>
 8005816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005818:	ed93 6a00 	vldr	s12, [r3]
 800581c:	3304      	adds	r3, #4
 800581e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005820:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80fe 	beq.w	8005a26 <forward_conv2d_nl_pool+0x115a>
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582e:	f04f 0b00 	mov.w	fp, #0
 8005832:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005836:	eb03 0802 	add.w	r8, r3, r2
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800584a:	67bb      	str	r3, [r7, #120]	; 0x78
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005850:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005854:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005858:	2b00      	cmp	r3, #0
 800585a:	f2c0 8107 	blt.w	8005a6c <forward_conv2d_nl_pool+0x11a0>
 800585e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005862:	2300      	movs	r3, #0
 8005864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005866:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 800586a:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800586e:	4540      	cmp	r0, r8
 8005870:	bf94      	ite	ls
 8005872:	ebc3 0300 	rsbls	r3, r3, r0
 8005876:	ebc3 0308 	rsbhi	r3, r3, r8
 800587a:	4422      	add	r2, r4
 800587c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	eba4 0903 	sub.w	r9, r4, r3
 8005886:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 800588a:	fb03 f304 	mul.w	r3, r3, r4
 800588e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8005892:	2c00      	cmp	r4, #0
 8005894:	f340 80e7 	ble.w	8005a66 <forward_conv2d_nl_pool+0x119a>
 8005898:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800589c:	f023 050f 	bic.w	r5, r3, #15
 80058a0:	eef0 6a46 	vmov.f32	s13, s12
 80058a4:	f04f 0e00 	mov.w	lr, #0
 80058a8:	fb04 f000 	mul.w	r0, r4, r0
 80058ac:	fb04 f909 	mul.w	r9, r4, r9
 80058b0:	6638      	str	r0, [r7, #96]	; 0x60
 80058b2:	1e68      	subs	r0, r5, #1
 80058b4:	0900      	lsrs	r0, r0, #4
 80058b6:	3001      	adds	r0, #1
 80058b8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80058bc:	0100      	lsls	r0, r0, #4
 80058be:	62b8      	str	r0, [r7, #40]	; 0x28
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	f340 80ce 	ble.w	8005a62 <forward_conv2d_nl_pool+0x1196>
 80058c6:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80058ca:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80058ce:	2600      	movs	r6, #0
 80058d0:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 80058d4:	3610      	adds	r6, #16
 80058d6:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 80058da:	3040      	adds	r0, #64	; 0x40
 80058dc:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 80058e0:	42ae      	cmp	r6, r5
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 80058ea:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 80058ee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80058f2:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 80058f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80058fa:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 80058fe:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 8005902:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 8005906:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 800590a:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 800590e:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 8005912:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005916:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 800591a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800591e:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 8005922:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 8005926:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 800592a:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 800592e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005932:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8005936:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 800593a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800593e:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 8005942:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 8005946:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 800594a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800594e:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 8005952:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 8005956:	ed54 3a13 	vldr	s7, [r4, #-76]	; 0xffffffb4
 800595a:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800595e:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 8005962:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 8005966:	eee5 7a87 	vfma.f32	s15, s11, s14
 800596a:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 800596e:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 8005972:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005976:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800597a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800597e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8005982:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005986:	eee1 7a82 	vfma.f32	s15, s3, s4
 800598a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800598e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005992:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005996:	eee5 7a87 	vfma.f32	s15, s11, s14
 800599a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800599e:	db97      	blt.n	80058d0 <forward_conv2d_nl_pool+0x1004>
 80059a0:	4451      	add	r1, sl
 80059a2:	4452      	add	r2, sl
 80059a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a6:	4283      	cmp	r3, r0
 80059a8:	dd0f      	ble.n	80059ca <forward_conv2d_nl_pool+0x10fe>
 80059aa:	4604      	mov	r4, r0
 80059ac:	468c      	mov	ip, r1
 80059ae:	4616      	mov	r6, r2
 80059b0:	3401      	adds	r4, #1
 80059b2:	ecb6 7a01 	vldmia	r6!, {s14}
 80059b6:	ecfc 7a01 	vldmia	ip!, {s15}
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059c0:	d1f6      	bne.n	80059b0 <forward_conv2d_nl_pool+0x10e4>
 80059c2:	1a18      	subs	r0, r3, r0
 80059c4:	0080      	lsls	r0, r0, #2
 80059c6:	4402      	add	r2, r0
 80059c8:	4401      	add	r1, r0
 80059ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80059cc:	f10e 0e01 	add.w	lr, lr, #1
 80059d0:	4449      	add	r1, r9
 80059d2:	4402      	add	r2, r0
 80059d4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80059d8:	4570      	cmp	r0, lr
 80059da:	f47f af71 	bne.w	80058c0 <forward_conv2d_nl_pool+0xff4>
 80059de:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80059e2:	f10b 0b01 	add.w	fp, fp, #1
 80059e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059e8:	4608      	mov	r0, r1
 80059ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80059ee:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80059f2:	4410      	add	r0, r2
 80059f4:	edc3 6a00 	vstr	s13, [r3]
 80059f8:	440b      	add	r3, r1
 80059fa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80059fe:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8005a02:	eba8 0802 	sub.w	r8, r8, r2
 8005a06:	4608      	mov	r0, r1
 8005a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a0a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a10:	4418      	add	r0, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005a1c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8005a20:	455b      	cmp	r3, fp
 8005a22:	f47f af17 	bne.w	8005854 <forward_conv2d_nl_pool+0xf88>
 8005a26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005a2a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8005a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a32:	440a      	add	r2, r1
 8005a34:	3301      	adds	r3, #1
 8005a36:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8005a3a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a42:	3204      	adds	r2, #4
 8005a44:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005a48:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	f47f aed2 	bne.w	80057f6 <forward_conv2d_nl_pool+0xf2a>
 8005a52:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8005a56:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8005a5a:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8005a5e:	f7ff ba66 	b.w	8004f2e <forward_conv2d_nl_pool+0x662>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e79f      	b.n	80059a6 <forward_conv2d_nl_pool+0x10da>
 8005a66:	eef0 6a46 	vmov.f32	s13, s12
 8005a6a:	e7b8      	b.n	80059de <forward_conv2d_nl_pool+0x1112>
 8005a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a74:	eba8 0303 	sub.w	r3, r8, r3
 8005a78:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005a7c:	e6f3      	b.n	8005866 <forward_conv2d_nl_pool+0xf9a>
 8005a7e:	eeb0 6a48 	vmov.f32	s12, s16
 8005a82:	e6cd      	b.n	8005820 <forward_conv2d_nl_pool+0xf54>
 8005a84:	b1a0      	cbz	r0, 8005ab0 <forward_conv2d_nl_pool+0x11e4>
 8005a86:	6881      	ldr	r1, [r0, #8]
 8005a88:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8005a92:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005a96:	f7fe bfc2 	b.w	8004a1e <forward_conv2d_nl_pool+0x152>
 8005a9a:	b190      	cbz	r0, 8005ac2 <forward_conv2d_nl_pool+0x11f6>
 8005a9c:	6882      	ldr	r2, [r0, #8]
 8005a9e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8005aa2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005aac:	f7fe bfb7 	b.w	8004a1e <forward_conv2d_nl_pool+0x152>
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8005ab6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8005aba:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005abe:	f7fe bfae 	b.w	8004a1e <forward_conv2d_nl_pool+0x152>
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8005ac8:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8005acc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005ad0:	f7fe bfa5 	b.w	8004a1e <forward_conv2d_nl_pool+0x152>
 8005ad4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005ad8:	f7fe bf84 	b.w	80049e4 <forward_conv2d_nl_pool+0x118>
 8005adc:	3118      	adds	r1, #24
 8005ade:	d010      	beq.n	8005b02 <forward_conv2d_nl_pool+0x1236>
 8005ae0:	4662      	mov	r2, ip
 8005ae2:	4664      	mov	r4, ip
 8005ae4:	4661      	mov	r1, ip
 8005ae6:	f7fe bf23 	b.w	8004930 <forward_conv2d_nl_pool+0x64>
 8005aea:	4691      	mov	r9, r2
 8005aec:	f7fe bf08 	b.w	8004900 <forward_conv2d_nl_pool+0x34>
 8005af0:	4613      	mov	r3, r2
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	deff      	udf	#255	; 0xff
 8005af6:	2200      	movs	r2, #0
 8005af8:	f7fe bf18 	b.w	800492c <forward_conv2d_nl_pool+0x60>
 8005afc:	2300      	movs	r3, #0
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	deff      	udf	#255	; 0xff
 8005b02:	68cb      	ldr	r3, [r1, #12]
 8005b04:	deff      	udf	#255	; 0xff
 8005b06:	bf00      	nop

08005b08 <forward_dense>:
 8005b08:	6983      	ldr	r3, [r0, #24]
 8005b0a:	8819      	ldrh	r1, [r3, #0]
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	f000 810c 	beq.w	8005d2a <forward_dense+0x222>
 8005b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	ed2d 8b08 	vpush	{d8-d11}
 8005b1a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005b1e:	b09b      	sub	sp, #108	; 0x6c
 8005b20:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8005b24:	b107      	cbz	r7, 8005b28 <forward_dense+0x20>
 8005b26:	683f      	ldr	r7, [r7, #0]
 8005b28:	2901      	cmp	r1, #1
 8005b2a:	f240 80fb 	bls.w	8005d24 <forward_dense+0x21c>
 8005b2e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8005b32:	b104      	cbz	r4, 8005b36 <forward_dense+0x2e>
 8005b34:	6824      	ldr	r4, [r4, #0]
 8005b36:	2902      	cmp	r1, #2
 8005b38:	f000 80f9 	beq.w	8005d2e <forward_dense+0x226>
 8005b3c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8516 	beq.w	8006572 <forward_dense+0xa6a>
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	920d      	str	r2, [sp, #52]	; 0x34
 8005b4a:	f11c 0218 	adds.w	r2, ip, #24
 8005b4e:	f000 80f1 	beq.w	8005d34 <forward_dense+0x22c>
 8005b52:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8005b56:	2a01      	cmp	r2, #1
 8005b58:	f240 8507 	bls.w	800656a <forward_dense+0xa62>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80eb 	beq.w	8005d38 <forward_dense+0x230>
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	930e      	str	r3, [sp, #56]	; 0x38
 8005b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b68:	2903      	cmp	r1, #3
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	6998      	ldr	r0, [r3, #24]
 8005b6e:	9200      	str	r2, [sp, #0]
 8005b70:	6803      	ldr	r3, [r0, #0]
 8005b72:	68e5      	ldr	r5, [r4, #12]
 8005b74:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8005b78:	f3c3 5e41 	ubfx	lr, r3, #21, #2
 8005b7c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005b80:	fa49 f20e 	asr.w	r2, r9, lr
 8005b84:	68ae      	ldr	r6, [r5, #8]
 8005b86:	68ed      	ldr	r5, [r5, #12]
 8005b88:	9212      	str	r2, [sp, #72]	; 0x48
 8005b8a:	9a00      	ldr	r2, [sp, #0]
 8005b8c:	fb06 f608 	mul.w	r6, r6, r8
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	9204      	str	r2, [sp, #16]
 8005b94:	f000 84c7 	beq.w	8006526 <forward_dense+0xa1e>
 8005b98:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8005b9c:	2a00      	cmp	r2, #0
 8005b9e:	f000 84c5 	beq.w	800652c <forward_dense+0xa24>
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	f000 84c1 	beq.w	800652c <forward_dense+0xa24>
 8005baa:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8005bae:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	f000 84c0 	beq.w	8006538 <forward_dense+0xa30>
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	f000 84bd 	beq.w	8006538 <forward_dense+0xa30>
 8005bbe:	f04f 0b00 	mov.w	fp, #0
 8005bc2:	69a3      	ldr	r3, [r4, #24]
 8005bc4:	00b6      	lsls	r6, r6, #2
 8005bc6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	6899      	ldr	r1, [r3, #8]
 8005bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd0:	fb05 1506 	mla	r5, r5, r6, r1
 8005bd4:	6890      	ldr	r0, [r2, #8]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	eb01 0804 	add.w	r8, r1, r4
 8005bdc:	42a9      	cmp	r1, r5
 8005bde:	940f      	str	r4, [sp, #60]	; 0x3c
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	9103      	str	r1, [sp, #12]
 8005be4:	9510      	str	r5, [sp, #64]	; 0x40
 8005be6:	9302      	str	r3, [sp, #8]
 8005be8:	f080 8097 	bcs.w	8005d1a <forward_dense+0x212>
 8005bec:	9f04      	ldr	r7, [sp, #16]
 8005bee:	4ac4      	ldr	r2, [pc, #784]	; (8005f00 <forward_dense+0x3f8>)
 8005bf0:	f1a7 0310 	sub.w	r3, r7, #16
 8005bf4:	08fe      	lsrs	r6, r7, #3
 8005bf6:	443a      	add	r2, r7
 8005bf8:	f007 0501 	and.w	r5, r7, #1
 8005bfc:	091b      	lsrs	r3, r3, #4
 8005bfe:	9607      	str	r6, [sp, #28]
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	9509      	str	r5, [sp, #36]	; 0x24
 8005c04:	3301      	adds	r3, #1
 8005c06:	0174      	lsls	r4, r6, #5
 8005c08:	ebc6 65c6 	rsb	r5, r6, r6, lsl #27
 8005c0c:	1c56      	adds	r6, r2, #1
 8005c0e:	019b      	lsls	r3, r3, #6
 8005c10:	f027 0101 	bic.w	r1, r7, #1
 8005c14:	1907      	adds	r7, r0, r4
 8005c16:	3220      	adds	r2, #32
 8005c18:	9318      	str	r3, [sp, #96]	; 0x60
 8005c1a:	1983      	adds	r3, r0, r6
 8005c1c:	9700      	str	r7, [sp, #0]
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	ebc4 0381 	rsb	r3, r4, r1, lsl #2
 8005c24:	9f07      	ldr	r7, [sp, #28]
 8005c26:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c28:	016b      	lsls	r3, r5, #5
 8005c2a:	00bf      	lsls	r7, r7, #2
 8005c2c:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8005f04 <forward_dense+0x3fc>
 8005c30:	9306      	str	r3, [sp, #24]
 8005c32:	970b      	str	r7, [sp, #44]	; 0x2c
 8005c34:	1d3b      	adds	r3, r7, #4
 8005c36:	9f04      	ldr	r7, [sp, #16]
 8005c38:	930c      	str	r3, [sp, #48]	; 0x30
 8005c3a:	f007 030f 	and.w	r3, r7, #15
 8005c3e:	9211      	str	r2, [sp, #68]	; 0x44
 8005c40:	9319      	str	r3, [sp, #100]	; 0x64
 8005c42:	465b      	mov	r3, fp
 8005c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c46:	9906      	ldr	r1, [sp, #24]
 8005c48:	6992      	ldr	r2, [r2, #24]
 8005c4a:	9800      	ldr	r0, [sp, #0]
 8005c4c:	6894      	ldr	r4, [r2, #8]
 8005c4e:	4401      	add	r1, r0
 8005c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c52:	9101      	str	r1, [sp, #4]
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	f000 8261 	beq.w	800611c <forward_dense+0x614>
 8005c5a:	6992      	ldr	r2, [r2, #24]
 8005c5c:	6896      	ldr	r6, [r2, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8260 	beq.w	8006124 <forward_dense+0x61c>
 8005c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c66:	2a04      	cmp	r2, #4
 8005c68:	f000 837c 	beq.w	8006364 <forward_dense+0x85c>
 8005c6c:	9a03      	ldr	r2, [sp, #12]
 8005c6e:	4542      	cmp	r2, r8
 8005c70:	d245      	bcs.n	8005cfe <forward_dense+0x1f6>
 8005c72:	9805      	ldr	r0, [sp, #20]
 8005c74:	4696      	mov	lr, r2
 8005c76:	9a06      	ldr	r2, [sp, #24]
 8005c78:	f100 071f 	add.w	r7, r0, #31
 8005c7c:	3801      	subs	r0, #1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	3204      	adds	r2, #4
 8005c82:	9008      	str	r0, [sp, #32]
 8005c84:	3120      	adds	r1, #32
 8005c86:	9800      	ldr	r0, [sp, #0]
 8005c88:	4401      	add	r1, r0
 8005c8a:	4402      	add	r2, r0
 8005c8c:	920a      	str	r2, [sp, #40]	; 0x28
 8005c8e:	1a7a      	subs	r2, r7, r1
 8005c90:	9113      	str	r1, [sp, #76]	; 0x4c
 8005c92:	0952      	lsrs	r2, r2, #5
 8005c94:	00d1      	lsls	r1, r2, #3
 8005c96:	3201      	adds	r2, #1
 8005c98:	3110      	adds	r1, #16
 8005c9a:	9116      	str	r1, [sp, #88]	; 0x58
 8005c9c:	00d1      	lsls	r1, r2, #3
 8005c9e:	9114      	str	r1, [sp, #80]	; 0x50
 8005ca0:	9901      	ldr	r1, [sp, #4]
 8005ca2:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8005ca6:	9215      	str	r2, [sp, #84]	; 0x54
 8005ca8:	2e00      	cmp	r6, #0
 8005caa:	f000 8222 	beq.w	80060f2 <forward_dense+0x5ea>
 8005cae:	edd6 5a00 	vldr	s11, [r6]
 8005cb2:	3604      	adds	r6, #4
 8005cb4:	9a04      	ldr	r2, [sp, #16]
 8005cb6:	2a07      	cmp	r2, #7
 8005cb8:	d840      	bhi.n	8005d3c <forward_dense+0x234>
 8005cba:	9901      	ldr	r1, [sp, #4]
 8005cbc:	428f      	cmp	r7, r1
 8005cbe:	d910      	bls.n	8005ce2 <forward_dense+0x1da>
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	eddf 7a90 	vldr	s15, [pc, #576]	; 8005f04 <forward_dense+0x3fc>
 8005cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cca:	ecb1 7a01 	vldmia	r1!, {s14}
 8005cce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005cd2:	42b9      	cmp	r1, r7
 8005cd4:	ed92 6a00 	vldr	s12, [r2]
 8005cd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005cdc:	d3f3      	bcc.n	8005cc6 <forward_dense+0x1be>
 8005cde:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ce2:	9a02      	ldr	r2, [sp, #8]
 8005ce4:	ecee 5a01 	vstmia	lr!, {s11}
 8005ce8:	45c6      	cmp	lr, r8
 8005cea:	4414      	add	r4, r2
 8005cec:	d3dc      	bcc.n	8005ca8 <forward_dense+0x1a0>
 8005cee:	9903      	ldr	r1, [sp, #12]
 8005cf0:	43ca      	mvns	r2, r1
 8005cf2:	4442      	add	r2, r8
 8005cf4:	f022 0203 	bic.w	r2, r2, #3
 8005cf8:	3204      	adds	r2, #4
 8005cfa:	188a      	adds	r2, r1, r2
 8005cfc:	9203      	str	r2, [sp, #12]
 8005cfe:	9900      	ldr	r1, [sp, #0]
 8005d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d02:	4608      	mov	r0, r1
 8005d04:	9905      	ldr	r1, [sp, #20]
 8005d06:	4490      	add	r8, r2
 8005d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d0a:	4411      	add	r1, r2
 8005d0c:	4410      	add	r0, r2
 8005d0e:	9a03      	ldr	r2, [sp, #12]
 8005d10:	9105      	str	r1, [sp, #20]
 8005d12:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d14:	9000      	str	r0, [sp, #0]
 8005d16:	428a      	cmp	r2, r1
 8005d18:	d394      	bcc.n	8005c44 <forward_dense+0x13c>
 8005d1a:	b01b      	add	sp, #108	; 0x6c
 8005d1c:	ecbd 8b08 	vpop	{d8-d11}
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	2300      	movs	r3, #0
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	deff      	udf	#255	; 0xff
 8005d2a:	684b      	ldr	r3, [r1, #4]
 8005d2c:	deff      	udf	#255	; 0xff
 8005d2e:	2300      	movs	r3, #0
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	deff      	udf	#255	; 0xff
 8005d34:	920e      	str	r2, [sp, #56]	; 0x38
 8005d36:	e716      	b.n	8005b66 <forward_dense+0x5e>
 8005d38:	930e      	str	r3, [sp, #56]	; 0x38
 8005d3a:	e714      	b.n	8005b66 <forward_dense+0x5e>
 8005d3c:	f004 0203 	and.w	r2, r4, #3
 8005d40:	2a02      	cmp	r2, #2
 8005d42:	f000 80e1 	beq.w	8005f08 <forward_dense+0x400>
 8005d46:	2a03      	cmp	r2, #3
 8005d48:	f000 81e3 	beq.w	8006112 <forward_dense+0x60a>
 8005d4c:	2a01      	cmp	r2, #1
 8005d4e:	f000 81d3 	beq.w	80060f8 <forward_dense+0x5f0>
 8005d52:	9a08      	ldr	r2, [sp, #32]
 8005d54:	9901      	ldr	r1, [sp, #4]
 8005d56:	428a      	cmp	r2, r1
 8005d58:	f0c0 8402 	bcc.w	8006560 <forward_dense+0xa58>
 8005d5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005d5e:	f104 0208 	add.w	r2, r4, #8
 8005d62:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8005f04 <forward_dense+0x3fc>
 8005d66:	eb01 0c04 	add.w	ip, r1, r4
 8005d6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005d6c:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8005d70:	3208      	adds	r2, #8
 8005d72:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8005d76:	3120      	adds	r1, #32
 8005d78:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005d7c:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8005d80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d84:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8005d88:	ed95 7a00 	vldr	s14, [r5]
 8005d8c:	edd0 4a00 	vldr	s9, [r0]
 8005d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d94:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8005d98:	ed11 5a0e 	vldr	s10, [r1, #-56]	; 0xffffffc8
 8005d9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005da0:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 8005da4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005da8:	f812 5c0c 	ldrb.w	r5, [r2, #-12]
 8005dac:	edd0 3a00 	vldr	s7, [r0]
 8005db0:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8005db4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005db8:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8005dbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dc0:	ed11 3a0b 	vldr	s6, [r1, #-44]	; 0xffffffd4
 8005dc4:	ed11 4a0a 	vldr	s8, [r1, #-40]	; 0xffffffd8
 8005dc8:	eee3 7a85 	vfma.f32	s15, s7, s10
 8005dcc:	edd0 3a00 	vldr	s7, [r0]
 8005dd0:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8005dd4:	ed11 5a09 	vldr	s10, [r1, #-36]	; 0xffffffdc
 8005dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ddc:	eee3 7a87 	vfma.f32	s15, s7, s14
 8005de0:	ed95 7a00 	vldr	s14, [r5]
 8005de4:	edd0 3a00 	vldr	s7, [r0]
 8005de8:	f812 5c0a 	ldrb.w	r5, [r2, #-10]
 8005dec:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8005df0:	4594      	cmp	ip, r2
 8005df2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005df6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dfa:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005dfe:	edd5 4a00 	vldr	s9, [r5]
 8005e02:	ed90 7a00 	vldr	s14, [r0]
 8005e06:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005e0a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e0e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8005e12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e16:	d1a9      	bne.n	8005d6c <forward_dense+0x264>
 8005e18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e1a:	18a1      	adds	r1, r4, r2
 8005e1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e1e:	42ba      	cmp	r2, r7
 8005e20:	f080 8164 	bcs.w	80060ec <forward_dense+0x5e4>
 8005e24:	4610      	mov	r0, r2
 8005e26:	780d      	ldrb	r5, [r1, #0]
 8005e28:	ecf0 7a01 	vldmia	r0!, {s15}
 8005e2c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005e30:	4287      	cmp	r7, r0
 8005e32:	ed95 7a00 	vldr	s14, [r5]
 8005e36:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e3a:	f240 8157 	bls.w	80060ec <forward_dense+0x5e4>
 8005e3e:	784d      	ldrb	r5, [r1, #1]
 8005e40:	f102 0008 	add.w	r0, r2, #8
 8005e44:	edd2 7a01 	vldr	s15, [r2, #4]
 8005e48:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005e4c:	4287      	cmp	r7, r0
 8005e4e:	ed95 7a00 	vldr	s14, [r5]
 8005e52:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e56:	f240 8149 	bls.w	80060ec <forward_dense+0x5e4>
 8005e5a:	788d      	ldrb	r5, [r1, #2]
 8005e5c:	f102 000c 	add.w	r0, r2, #12
 8005e60:	edd2 7a02 	vldr	s15, [r2, #8]
 8005e64:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005e68:	4287      	cmp	r7, r0
 8005e6a:	ed95 7a00 	vldr	s14, [r5]
 8005e6e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e72:	f240 813b 	bls.w	80060ec <forward_dense+0x5e4>
 8005e76:	78cd      	ldrb	r5, [r1, #3]
 8005e78:	f102 0010 	add.w	r0, r2, #16
 8005e7c:	edd2 7a03 	vldr	s15, [r2, #12]
 8005e80:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005e84:	4287      	cmp	r7, r0
 8005e86:	ed95 7a00 	vldr	s14, [r5]
 8005e8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e8e:	f240 812d 	bls.w	80060ec <forward_dense+0x5e4>
 8005e92:	790d      	ldrb	r5, [r1, #4]
 8005e94:	f102 0014 	add.w	r0, r2, #20
 8005e98:	edd2 7a04 	vldr	s15, [r2, #16]
 8005e9c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005ea0:	4287      	cmp	r7, r0
 8005ea2:	ed95 7a00 	vldr	s14, [r5]
 8005ea6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005eaa:	f240 811f 	bls.w	80060ec <forward_dense+0x5e4>
 8005eae:	794d      	ldrb	r5, [r1, #5]
 8005eb0:	f102 0018 	add.w	r0, r2, #24
 8005eb4:	edd2 7a05 	vldr	s15, [r2, #20]
 8005eb8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005ebc:	4287      	cmp	r7, r0
 8005ebe:	ed95 7a00 	vldr	s14, [r5]
 8005ec2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005ec6:	f240 8111 	bls.w	80060ec <forward_dense+0x5e4>
 8005eca:	798d      	ldrb	r5, [r1, #6]
 8005ecc:	f102 001c 	add.w	r0, r2, #28
 8005ed0:	edd2 7a06 	vldr	s15, [r2, #24]
 8005ed4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005ed8:	4287      	cmp	r7, r0
 8005eda:	ed95 7a00 	vldr	s14, [r5]
 8005ede:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005ee2:	f240 8103 	bls.w	80060ec <forward_dense+0x5e4>
 8005ee6:	79c9      	ldrb	r1, [r1, #7]
 8005ee8:	edd2 7a07 	vldr	s15, [r2, #28]
 8005eec:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8005ef0:	ed92 7a00 	vldr	s14, [r2]
 8005ef4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005ef8:	ee75 5a86 	vadd.f32	s11, s11, s12
 8005efc:	e6f1      	b.n	8005ce2 <forward_dense+0x1da>
 8005efe:	bf00      	nop
 8005f00:	3ffffff8 	.word	0x3ffffff8
 8005f04:	00000000 	.word	0x00000000
 8005f08:	eeb0 6a66 	vmov.f32	s12, s13
 8005f0c:	9901      	ldr	r1, [sp, #4]
 8005f0e:	4622      	mov	r2, r4
 8005f10:	7810      	ldrb	r0, [r2, #0]
 8005f12:	3104      	adds	r1, #4
 8005f14:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005f18:	3201      	adds	r2, #1
 8005f1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f1e:	ed90 7a00 	vldr	s14, [r0]
 8005f22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005f26:	7810      	ldrb	r0, [r2, #0]
 8005f28:	f101 0c04 	add.w	ip, r1, #4
 8005f2c:	edd1 7a00 	vldr	s15, [r1]
 8005f30:	f102 0a01 	add.w	sl, r2, #1
 8005f34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f38:	ed90 7a00 	vldr	s14, [r0]
 8005f3c:	9808      	ldr	r0, [sp, #32]
 8005f3e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005f42:	4584      	cmp	ip, r0
 8005f44:	d865      	bhi.n	8006012 <forward_dense+0x50a>
 8005f46:	3124      	adds	r1, #36	; 0x24
 8005f48:	f102 0911 	add.w	r9, r2, #17
 8005f4c:	3209      	adds	r2, #9
 8005f4e:	eba7 0b01 	sub.w	fp, r7, r1
 8005f52:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8005f56:	eb09 09cb 	add.w	r9, r9, fp, lsl #3
 8005f5a:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8005f5e:	3208      	adds	r2, #8
 8005f60:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8005f64:	3120      	adds	r1, #32
 8005f66:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005f6a:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8005f6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f72:	ed51 4a10 	vldr	s9, [r1, #-64]	; 0xffffffc0
 8005f76:	ed95 7a00 	vldr	s14, [r5]
 8005f7a:	ed11 5a0e 	vldr	s10, [r1, #-56]	; 0xffffffc8
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	ed90 7a00 	vldr	s14, [r0]
 8005f86:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8005f8a:	ed51 3a0d 	vldr	s7, [r1, #-52]	; 0xffffffcc
 8005f8e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005f92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f96:	f812 5c0c 	ldrb.w	r5, [r2, #-12]
 8005f9a:	ed90 7a00 	vldr	s14, [r0]
 8005f9e:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8005fa2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005fa6:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8005faa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fae:	ed11 3a0b 	vldr	s6, [r1, #-44]	; 0xffffffd4
 8005fb2:	eee5 7a07 	vfma.f32	s15, s10, s14
 8005fb6:	ed11 4a0a 	vldr	s8, [r1, #-40]	; 0xffffffd8
 8005fba:	ed90 7a00 	vldr	s14, [r0]
 8005fbe:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8005fc2:	ed11 5a09 	vldr	s10, [r1, #-36]	; 0xffffffdc
 8005fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fca:	eee3 7a87 	vfma.f32	s15, s7, s14
 8005fce:	ed95 7a00 	vldr	s14, [r5]
 8005fd2:	edd0 3a00 	vldr	s7, [r0]
 8005fd6:	f812 5c0a 	ldrb.w	r5, [r2, #-10]
 8005fda:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8005fde:	4591      	cmp	r9, r2
 8005fe0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005fe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fe8:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005fec:	edd5 4a00 	vldr	s9, [r5]
 8005ff0:	ed90 7a00 	vldr	s14, [r0]
 8005ff4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005ff8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005ffc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8006000:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006004:	d1a9      	bne.n	8005f5a <forward_dense+0x452>
 8006006:	f10b 0b01 	add.w	fp, fp, #1
 800600a:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
 800600e:	eb0c 1c4b 	add.w	ip, ip, fp, lsl #5
 8006012:	45bc      	cmp	ip, r7
 8006014:	d26a      	bcs.n	80060ec <forward_dense+0x5e4>
 8006016:	4662      	mov	r2, ip
 8006018:	f89a 1000 	ldrb.w	r1, [sl]
 800601c:	ecf2 7a01 	vldmia	r2!, {s15}
 8006020:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006024:	4297      	cmp	r7, r2
 8006026:	ed91 7a00 	vldr	s14, [r1]
 800602a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800602e:	d95d      	bls.n	80060ec <forward_dense+0x5e4>
 8006030:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8006034:	f10c 0208 	add.w	r2, ip, #8
 8006038:	eddc 7a01 	vldr	s15, [ip, #4]
 800603c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006040:	4297      	cmp	r7, r2
 8006042:	ed91 7a00 	vldr	s14, [r1]
 8006046:	eea7 6a27 	vfma.f32	s12, s14, s15
 800604a:	d94f      	bls.n	80060ec <forward_dense+0x5e4>
 800604c:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8006050:	f10c 020c 	add.w	r2, ip, #12
 8006054:	eddc 7a02 	vldr	s15, [ip, #8]
 8006058:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800605c:	4297      	cmp	r7, r2
 800605e:	ed91 7a00 	vldr	s14, [r1]
 8006062:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006066:	d941      	bls.n	80060ec <forward_dense+0x5e4>
 8006068:	f89a 1003 	ldrb.w	r1, [sl, #3]
 800606c:	f10c 0210 	add.w	r2, ip, #16
 8006070:	eddc 7a03 	vldr	s15, [ip, #12]
 8006074:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006078:	4297      	cmp	r7, r2
 800607a:	ed91 7a00 	vldr	s14, [r1]
 800607e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006082:	d933      	bls.n	80060ec <forward_dense+0x5e4>
 8006084:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8006088:	f10c 0214 	add.w	r2, ip, #20
 800608c:	eddc 7a04 	vldr	s15, [ip, #16]
 8006090:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006094:	4297      	cmp	r7, r2
 8006096:	ed91 7a00 	vldr	s14, [r1]
 800609a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800609e:	d925      	bls.n	80060ec <forward_dense+0x5e4>
 80060a0:	f89a 1005 	ldrb.w	r1, [sl, #5]
 80060a4:	f10c 0218 	add.w	r2, ip, #24
 80060a8:	eddc 7a05 	vldr	s15, [ip, #20]
 80060ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80060b0:	4297      	cmp	r7, r2
 80060b2:	ed91 7a00 	vldr	s14, [r1]
 80060b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80060ba:	d917      	bls.n	80060ec <forward_dense+0x5e4>
 80060bc:	f89a 1006 	ldrb.w	r1, [sl, #6]
 80060c0:	f10c 021c 	add.w	r2, ip, #28
 80060c4:	eddc 7a06 	vldr	s15, [ip, #24]
 80060c8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80060cc:	4297      	cmp	r7, r2
 80060ce:	ed91 7a00 	vldr	s14, [r1]
 80060d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80060d6:	d909      	bls.n	80060ec <forward_dense+0x5e4>
 80060d8:	f89a 2007 	ldrb.w	r2, [sl, #7]
 80060dc:	eddc 7a07 	vldr	s15, [ip, #28]
 80060e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80060e4:	ed92 7a00 	vldr	s14, [r2]
 80060e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80060ec:	ee75 5a86 	vadd.f32	s11, s11, s12
 80060f0:	e5f7      	b.n	8005ce2 <forward_dense+0x1da>
 80060f2:	ed5f 5a7c 	vldr	s11, [pc, #-496]	; 8005f04 <forward_dense+0x3fc>
 80060f6:	e5dd      	b.n	8005cb4 <forward_dense+0x1ac>
 80060f8:	7820      	ldrb	r0, [r4, #0]
 80060fa:	1c62      	adds	r2, r4, #1
 80060fc:	9901      	ldr	r1, [sp, #4]
 80060fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006102:	edd1 7a00 	vldr	s15, [r1]
 8006106:	ed90 6a00 	vldr	s12, [r0]
 800610a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800610c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006110:	e6fe      	b.n	8005f10 <forward_dense+0x408>
 8006112:	9901      	ldr	r1, [sp, #4]
 8006114:	4622      	mov	r2, r4
 8006116:	eeb0 6a66 	vmov.f32	s12, s13
 800611a:	e704      	b.n	8005f26 <forward_dense+0x41e>
 800611c:	4616      	mov	r6, r2
 800611e:	2b00      	cmp	r3, #0
 8006120:	f47f ada0 	bne.w	8005c64 <forward_dense+0x15c>
 8006124:	9a03      	ldr	r2, [sp, #12]
 8006126:	4542      	cmp	r2, r8
 8006128:	f4bf ade9 	bcs.w	8005cfe <forward_dense+0x1f6>
 800612c:	4615      	mov	r5, r2
 800612e:	9a06      	ldr	r2, [sp, #24]
 8006130:	9901      	ldr	r1, [sp, #4]
 8006132:	f102 0c40 	add.w	ip, r2, #64	; 0x40
 8006136:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006138:	f8dd e010 	ldr.w	lr, [sp, #16]
 800613c:	188f      	adds	r7, r1, r2
 800613e:	9900      	ldr	r1, [sp, #0]
 8006140:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006144:	4692      	mov	sl, r2
 8006146:	448c      	add	ip, r1
 8006148:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800614c:	2e00      	cmp	r6, #0
 800614e:	f000 80fd 	beq.w	800634c <forward_dense+0x844>
 8006152:	f1be 0f0f 	cmp.w	lr, #15
 8006156:	edd6 5a00 	vldr	s11, [r6]
 800615a:	f106 0604 	add.w	r6, r6, #4
 800615e:	f240 80fb 	bls.w	8006358 <forward_dense+0x850>
 8006162:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006166:	4662      	mov	r2, ip
 8006168:	4670      	mov	r0, lr
 800616a:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 8005f04 <forward_dense+0x3fc>
 800616e:	ed11 7a0f 	vldr	s14, [r1, #-60]	; 0xffffffc4
 8006172:	3810      	subs	r0, #16
 8006174:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006178:	3140      	adds	r1, #64	; 0x40
 800617a:	ed11 5a20 	vldr	s10, [r1, #-128]	; 0xffffff80
 800617e:	280f      	cmp	r0, #15
 8006180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006184:	ed12 7a10 	vldr	s14, [r2, #-64]	; 0xffffffc0
 8006188:	ed11 2a1e 	vldr	s4, [r1, #-120]	; 0xffffff88
 800618c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006190:	ed52 2a1e 	vldr	s5, [r2, #-120]	; 0xffffff88
 8006194:	eee5 7a07 	vfma.f32	s15, s10, s14
 8006198:	ed11 3a1d 	vldr	s6, [r1, #-116]	; 0xffffff8c
 800619c:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 80061a0:	ed12 4a1c 	vldr	s8, [r2, #-112]	; 0xffffff90
 80061a4:	ed51 4a1c 	vldr	s9, [r1, #-112]	; 0xffffff90
 80061a8:	ed12 5a1b 	vldr	s10, [r2, #-108]	; 0xffffff94
 80061ac:	ed11 7a1b 	vldr	s14, [r1, #-108]	; 0xffffff94
 80061b0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80061b4:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 80061b8:	ed11 ba1a 	vldr	s22, [r1, #-104]	; 0xffffff98
 80061bc:	ed51 aa19 	vldr	s21, [r1, #-100]	; 0xffffff9c
 80061c0:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 80061c4:	ed51 9a18 	vldr	s19, [r1, #-96]	; 0xffffffa0
 80061c8:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 80061cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80061d0:	ed51 8a17 	vldr	s17, [r1, #-92]	; 0xffffffa4
 80061d4:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 80061d8:	ed11 0a16 	vldr	s0, [r1, #-88]	; 0xffffffa8
 80061dc:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 80061e0:	ed11 1a15 	vldr	s2, [r1, #-84]	; 0xffffffac
 80061e4:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 80061e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80061ec:	ed12 2a14 	vldr	s4, [r2, #-80]	; 0xffffffb0
 80061f0:	ed51 2a14 	vldr	s5, [r1, #-80]	; 0xffffffb0
 80061f4:	ed12 3a13 	vldr	s6, [r2, #-76]	; 0xffffffb4
 80061f8:	ed51 3a13 	vldr	s7, [r1, #-76]	; 0xffffffb4
 80061fc:	ed12 4a12 	vldr	s8, [r2, #-72]	; 0xffffffb8
 8006200:	ed51 4a12 	vldr	s9, [r1, #-72]	; 0xffffffb8
 8006204:	eee5 7a07 	vfma.f32	s15, s10, s14
 8006208:	ed12 5a11 	vldr	s10, [r2, #-68]	; 0xffffffbc
 800620c:	ed11 7a11 	vldr	s14, [r1, #-68]	; 0xffffffbc
 8006210:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006214:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006218:	eee9 7a89 	vfma.f32	s15, s19, s18
 800621c:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006220:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006224:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006228:	eee2 7a22 	vfma.f32	s15, s4, s5
 800622c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006230:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006234:	eee5 7a07 	vfma.f32	s15, s10, s14
 8006238:	ee36 6a27 	vadd.f32	s12, s12, s15
 800623c:	d897      	bhi.n	800616e <forward_dense+0x666>
 800623e:	eb04 000a 	add.w	r0, r4, sl
 8006242:	465a      	mov	r2, fp
 8006244:	4639      	mov	r1, r7
 8006246:	2a00      	cmp	r2, #0
 8006248:	d075      	beq.n	8006336 <forward_dense+0x82e>
 800624a:	ed90 7a00 	vldr	s14, [r0]
 800624e:	2a01      	cmp	r2, #1
 8006250:	edd1 7a00 	vldr	s15, [r1]
 8006254:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006258:	d06d      	beq.n	8006336 <forward_dense+0x82e>
 800625a:	ed90 7a01 	vldr	s14, [r0, #4]
 800625e:	2a02      	cmp	r2, #2
 8006260:	edd1 7a01 	vldr	s15, [r1, #4]
 8006264:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006268:	d065      	beq.n	8006336 <forward_dense+0x82e>
 800626a:	ed90 7a02 	vldr	s14, [r0, #8]
 800626e:	2a03      	cmp	r2, #3
 8006270:	edd1 7a02 	vldr	s15, [r1, #8]
 8006274:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006278:	d05d      	beq.n	8006336 <forward_dense+0x82e>
 800627a:	ed90 7a03 	vldr	s14, [r0, #12]
 800627e:	2a04      	cmp	r2, #4
 8006280:	edd1 7a03 	vldr	s15, [r1, #12]
 8006284:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006288:	d055      	beq.n	8006336 <forward_dense+0x82e>
 800628a:	ed90 7a04 	vldr	s14, [r0, #16]
 800628e:	2a05      	cmp	r2, #5
 8006290:	edd1 7a04 	vldr	s15, [r1, #16]
 8006294:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006298:	d04d      	beq.n	8006336 <forward_dense+0x82e>
 800629a:	ed90 7a05 	vldr	s14, [r0, #20]
 800629e:	2a06      	cmp	r2, #6
 80062a0:	edd1 7a05 	vldr	s15, [r1, #20]
 80062a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062a8:	d045      	beq.n	8006336 <forward_dense+0x82e>
 80062aa:	ed90 7a06 	vldr	s14, [r0, #24]
 80062ae:	2a07      	cmp	r2, #7
 80062b0:	edd1 7a06 	vldr	s15, [r1, #24]
 80062b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062b8:	d03d      	beq.n	8006336 <forward_dense+0x82e>
 80062ba:	ed90 7a07 	vldr	s14, [r0, #28]
 80062be:	2a08      	cmp	r2, #8
 80062c0:	edd1 7a07 	vldr	s15, [r1, #28]
 80062c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062c8:	d035      	beq.n	8006336 <forward_dense+0x82e>
 80062ca:	ed90 7a08 	vldr	s14, [r0, #32]
 80062ce:	2a09      	cmp	r2, #9
 80062d0:	edd1 7a08 	vldr	s15, [r1, #32]
 80062d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062d8:	d02d      	beq.n	8006336 <forward_dense+0x82e>
 80062da:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 80062de:	2a0a      	cmp	r2, #10
 80062e0:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 80062e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062e8:	d025      	beq.n	8006336 <forward_dense+0x82e>
 80062ea:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 80062ee:	2a0b      	cmp	r2, #11
 80062f0:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 80062f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062f8:	d01d      	beq.n	8006336 <forward_dense+0x82e>
 80062fa:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 80062fe:	2a0c      	cmp	r2, #12
 8006300:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8006304:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006308:	d015      	beq.n	8006336 <forward_dense+0x82e>
 800630a:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800630e:	2a0d      	cmp	r2, #13
 8006310:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8006314:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006318:	d00d      	beq.n	8006336 <forward_dense+0x82e>
 800631a:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800631e:	2a0e      	cmp	r2, #14
 8006320:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8006324:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006328:	d005      	beq.n	8006336 <forward_dense+0x82e>
 800632a:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800632e:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8006332:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006336:	ee35 6a86 	vadd.f32	s12, s11, s12
 800633a:	444c      	add	r4, r9
 800633c:	eca5 6a01 	vstmia	r5!, {s12}
 8006340:	4545      	cmp	r5, r8
 8006342:	f4bf acd4 	bcs.w	8005cee <forward_dense+0x1e6>
 8006346:	2e00      	cmp	r6, #0
 8006348:	f47f af03 	bne.w	8006152 <forward_dense+0x64a>
 800634c:	f1be 0f0f 	cmp.w	lr, #15
 8006350:	eef0 5a66 	vmov.f32	s11, s13
 8006354:	f63f af05 	bhi.w	8006162 <forward_dense+0x65a>
 8006358:	4672      	mov	r2, lr
 800635a:	4620      	mov	r0, r4
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	ed9f 6a86 	vldr	s12, [pc, #536]	; 8006578 <forward_dense+0xa70>
 8006362:	e770      	b.n	8006246 <forward_dense+0x73e>
 8006364:	9903      	ldr	r1, [sp, #12]
 8006366:	4541      	cmp	r1, r8
 8006368:	f4bf acc9 	bcs.w	8005cfe <forward_dense+0x1f6>
 800636c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800636e:	468a      	mov	sl, r1
 8006370:	9800      	ldr	r0, [sp, #0]
 8006372:	4615      	mov	r5, r2
 8006374:	9a06      	ldr	r2, [sp, #24]
 8006376:	eb05 0b00 	add.w	fp, r5, r0
 800637a:	3220      	adds	r2, #32
 800637c:	f10b 0107 	add.w	r1, fp, #7
 8006380:	4402      	add	r2, r0
 8006382:	910a      	str	r1, [sp, #40]	; 0x28
 8006384:	9208      	str	r2, [sp, #32]
 8006386:	2e00      	cmp	r6, #0
 8006388:	f000 80b6 	beq.w	80064f8 <forward_dense+0x9f0>
 800638c:	9a07      	ldr	r2, [sp, #28]
 800638e:	3604      	adds	r6, #4
 8006390:	ed56 5a01 	vldr	s11, [r6, #-4]
 8006394:	2a00      	cmp	r2, #0
 8006396:	f000 80b5 	beq.w	8006504 <forward_dense+0x9fc>
 800639a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800639c:	1d21      	adds	r1, r4, #4
 800639e:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8006578 <forward_dense+0xa70>
 80063a2:	1917      	adds	r7, r2, r4
 80063a4:	9a08      	ldr	r2, [sp, #32]
 80063a6:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 80063aa:	3104      	adds	r1, #4
 80063ac:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 80063b0:	3220      	adds	r2, #32
 80063b2:	f000 050f 	and.w	r5, r0, #15
 80063b6:	0900      	lsrs	r0, r0, #4
 80063b8:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 80063bc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80063c0:	ed12 3a0e 	vldr	s6, [r2, #-56]	; 0xffffffc8
 80063c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063c8:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 80063cc:	ed95 7a00 	vldr	s14, [r5]
 80063d0:	ed90 4a00 	vldr	s8, [r0]
 80063d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d8:	f811 0c07 	ldrb.w	r0, [r1, #-7]
 80063dc:	ed52 2a0c 	vldr	s5, [r2, #-48]	; 0xffffffd0
 80063e0:	0905      	lsrs	r5, r0, #4
 80063e2:	f000 000f 	and.w	r0, r0, #15
 80063e6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80063ea:	ed52 3a0b 	vldr	s7, [r2, #-44]	; 0xffffffd4
 80063ee:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80063f2:	ed52 4a0a 	vldr	s9, [r2, #-40]	; 0xffffffd8
 80063f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063fa:	ed12 7a09 	vldr	s14, [r2, #-36]	; 0xffffffdc
 80063fe:	ed95 2a00 	vldr	s4, [r5]
 8006402:	ed90 4a00 	vldr	s8, [r0]
 8006406:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800640a:	eee2 7a03 	vfma.f32	s15, s4, s6
 800640e:	f811 0c05 	ldrb.w	r0, [r1, #-5]
 8006412:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8006416:	f005 050f 	and.w	r5, r5, #15
 800641a:	428f      	cmp	r7, r1
 800641c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8006420:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006424:	ed9c 2a00 	vldr	s4, [ip]
 8006428:	ea4f 1c10 	mov.w	ip, r0, lsr #4
 800642c:	eee4 7a05 	vfma.f32	s15, s8, s10
 8006430:	ed95 3a00 	vldr	s6, [r5]
 8006434:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8006438:	f000 000f 	and.w	r0, r0, #15
 800643c:	ed95 4a00 	vldr	s8, [r5]
 8006440:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006444:	ed90 5a00 	vldr	s10, [r0]
 8006448:	eee2 7a22 	vfma.f32	s15, s4, s5
 800644c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006450:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006454:	eee5 7a07 	vfma.f32	s15, s10, s14
 8006458:	ee36 6a27 	vadd.f32	s12, s12, s15
 800645c:	d1a3      	bne.n	80063a6 <forward_dense+0x89e>
 800645e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006460:	f8dd e000 	ldr.w	lr, [sp]
 8006464:	eb04 0902 	add.w	r9, r4, r2
 8006468:	45de      	cmp	lr, fp
 800646a:	d22c      	bcs.n	80064c6 <forward_dense+0x9be>
 800646c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646e:	f10e 0108 	add.w	r1, lr, #8
 8006472:	f10e 0710 	add.w	r7, lr, #16
 8006476:	f109 35ff 	add.w	r5, r9, #4294967295
 800647a:	eba2 0c01 	sub.w	ip, r2, r1
 800647e:	f02c 0207 	bic.w	r2, ip, #7
 8006482:	4417      	add	r7, r2
 8006484:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006488:	3108      	adds	r1, #8
 800648a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800648e:	f002 000f 	and.w	r0, r2, #15
 8006492:	0912      	lsrs	r2, r2, #4
 8006494:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006498:	428f      	cmp	r7, r1
 800649a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800649e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80064a2:	ed90 7a00 	vldr	s14, [r0]
 80064a6:	edd2 4a00 	vldr	s9, [r2]
 80064aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 80064b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80064b6:	d1e5      	bne.n	8006484 <forward_dense+0x97c>
 80064b8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80064bc:	f10c 0c01 	add.w	ip, ip, #1
 80064c0:	44e1      	add	r9, ip
 80064c2:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 80064c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c8:	b312      	cbz	r2, 8006510 <forward_dense+0xa08>
 80064ca:	f899 2000 	ldrb.w	r2, [r9]
 80064ce:	edde 7a00 	vldr	s15, [lr]
 80064d2:	0912      	lsrs	r2, r2, #4
 80064d4:	9902      	ldr	r1, [sp, #8]
 80064d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80064da:	440c      	add	r4, r1
 80064dc:	ed92 7a00 	vldr	s14, [r2]
 80064e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80064e4:	ee76 5a25 	vadd.f32	s11, s12, s11
 80064e8:	ecea 5a01 	vstmia	sl!, {s11}
 80064ec:	45d0      	cmp	r8, sl
 80064ee:	f67f abfe 	bls.w	8005cee <forward_dense+0x1e6>
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	f47f af4a 	bne.w	800638c <forward_dense+0x884>
 80064f8:	9a07      	ldr	r2, [sp, #28]
 80064fa:	eef0 5a66 	vmov.f32	s11, s13
 80064fe:	2a00      	cmp	r2, #0
 8006500:	f47f af4b 	bne.w	800639a <forward_dense+0x892>
 8006504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006508:	46a1      	mov	r9, r4
 800650a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8006578 <forward_dense+0xa70>
 800650e:	e7ab      	b.n	8006468 <forward_dense+0x960>
 8006510:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006514:	9a02      	ldr	r2, [sp, #8]
 8006516:	4414      	add	r4, r2
 8006518:	ecaa 6a01 	vstmia	sl!, {s12}
 800651c:	45c2      	cmp	sl, r8
 800651e:	f4ff af32 	bcc.w	8006386 <forward_dense+0x87e>
 8006522:	f7ff bbe4 	b.w	8005cee <forward_dense+0x1e6>
 8006526:	2300      	movs	r3, #0
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	deff      	udf	#255	; 0xff
 800652c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006530:	4691      	mov	r9, r2
 8006532:	2b04      	cmp	r3, #4
 8006534:	f47f ab40 	bne.w	8005bb8 <forward_dense+0xb0>
 8006538:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 800653c:	f1b9 0f00 	cmp.w	r9, #0
 8006540:	f43f ab3f 	beq.w	8005bc2 <forward_dense+0xba>
 8006544:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006548:	f000 fd30 	bl	8006fac <ai_array_get_byte_size>
 800654c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006550:	4602      	mov	r2, r0
 8006552:	4659      	mov	r1, fp
 8006554:	4618      	mov	r0, r3
 8006556:	469b      	mov	fp, r3
 8006558:	f000 fd8c 	bl	8007074 <memcpy>
 800655c:	f7ff bb31 	b.w	8005bc2 <forward_dense+0xba>
 8006560:	460a      	mov	r2, r1
 8006562:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8006578 <forward_dense+0xa70>
 8006566:	4621      	mov	r1, r4
 8006568:	e459      	b.n	8005e1e <forward_dense+0x316>
 800656a:	2300      	movs	r3, #0
 800656c:	930e      	str	r3, [sp, #56]	; 0x38
 800656e:	f7ff bafa 	b.w	8005b66 <forward_dense+0x5e>
 8006572:	930d      	str	r3, [sp, #52]	; 0x34
 8006574:	f7ff bae9 	b.w	8005b4a <forward_dense+0x42>
 8006578:	00000000 	.word	0x00000000

0800657c <pool_func_mp_array_f32>:
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	b099      	sub	sp, #100	; 0x64
 8006582:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006584:	9303      	str	r3, [sp, #12]
 8006586:	6883      	ldr	r3, [r0, #8]
 8006588:	9100      	str	r1, [sp, #0]
 800658a:	9306      	str	r3, [sp, #24]
 800658c:	68a3      	ldr	r3, [r4, #8]
 800658e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8006598:	9215      	str	r2, [sp, #84]	; 0x54
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80065a0:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80065aa:	ea52 0401 	orrs.w	r4, r2, r1
 80065ae:	930e      	str	r3, [sp, #56]	; 0x38
 80065b0:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 80065b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80065b6:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 80065ba:	930c      	str	r3, [sp, #48]	; 0x30
 80065bc:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 80065c0:	9311      	str	r3, [sp, #68]	; 0x44
 80065c2:	f040 80a1 	bne.w	8006708 <pool_func_mp_array_f32+0x18c>
 80065c6:	9b08      	ldr	r3, [sp, #32]
 80065c8:	9d00      	ldr	r5, [sp, #0]
 80065ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80065cc:	1b58      	subs	r0, r3, r5
 80065ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80065d0:	1e73      	subs	r3, r6, #1
 80065d2:	3801      	subs	r0, #1
 80065d4:	fb13 0307 	smlabb	r3, r3, r7, r0
 80065d8:	0418      	lsls	r0, r3, #16
 80065da:	f140 8095 	bpl.w	8006708 <pool_func_mp_array_f32+0x18c>
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80065e2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80065e4:	1a18      	subs	r0, r3, r0
 80065e6:	1e7b      	subs	r3, r7, #1
 80065e8:	3801      	subs	r0, #1
 80065ea:	469c      	mov	ip, r3
 80065ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ee:	fb1c 0303 	smlabb	r3, ip, r3, r0
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	f140 8088 	bpl.w	8006708 <pool_func_mp_array_f32+0x18c>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	d07f      	beq.n	80066fc <pool_func_mp_array_f32+0x180>
 80065fc:	2e00      	cmp	r6, #0
 80065fe:	d07d      	beq.n	80066fc <pool_func_mp_array_f32+0x180>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d07a      	beq.n	80066fc <pool_func_mp_array_f32+0x180>
 8006606:	fb05 f203 	mul.w	r2, r5, r3
 800660a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800660e:	4623      	mov	r3, r4
 8006610:	9402      	str	r4, [sp, #8]
 8006612:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006616:	9409      	str	r4, [sp, #36]	; 0x24
 8006618:	990c      	ldr	r1, [sp, #48]	; 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8006628:	4690      	mov	r8, r2
 800662a:	9205      	str	r2, [sp, #20]
 800662c:	930b      	str	r3, [sp, #44]	; 0x2c
 800662e:	9b00      	ldr	r3, [sp, #0]
 8006630:	920a      	str	r2, [sp, #40]	; 0x28
 8006632:	fb03 f30e 	mul.w	r3, r3, lr
 8006636:	930d      	str	r3, [sp, #52]	; 0x34
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	9307      	str	r3, [sp, #28]
 800663c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800663e:	f04f 0c00 	mov.w	ip, #0
 8006642:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8006646:	4498      	add	r8, r3
 8006648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664a:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800664e:	4667      	mov	r7, ip
 8006650:	eb05 0903 	add.w	r9, r5, r3
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	fb03 f808 	mul.w	r8, r3, r8
 800665a:	fb03 f909 	mul.w	r9, r3, r9
 800665e:	4576      	cmp	r6, lr
 8006660:	dd4f      	ble.n	8006702 <pool_func_mp_array_f32+0x186>
 8006662:	eb07 0409 	add.w	r4, r7, r9
 8006666:	9b06      	ldr	r3, [sp, #24]
 8006668:	4670      	mov	r0, lr
 800666a:	eddf 7a89 	vldr	s15, [pc, #548]	; 8006890 <pool_func_mp_array_f32+0x314>
 800666e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006672:	42a9      	cmp	r1, r5
 8006674:	dd0a      	ble.n	800668c <pool_func_mp_array_f32+0x110>
 8006676:	4622      	mov	r2, r4
 8006678:	462b      	mov	r3, r5
 800667a:	3301      	adds	r3, #1
 800667c:	ed92 7a00 	vldr	s14, [r2]
 8006680:	4452      	add	r2, sl
 8006682:	b21b      	sxth	r3, r3
 8006684:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8006688:	4299      	cmp	r1, r3
 800668a:	d1f6      	bne.n	800667a <pool_func_mp_array_f32+0xfe>
 800668c:	3001      	adds	r0, #1
 800668e:	445c      	add	r4, fp
 8006690:	b200      	sxth	r0, r0
 8006692:	4286      	cmp	r6, r0
 8006694:	d1ed      	bne.n	8006672 <pool_func_mp_array_f32+0xf6>
 8006696:	eb08 0307 	add.w	r3, r8, r7
 800669a:	9a04      	ldr	r2, [sp, #16]
 800669c:	f10c 0c01 	add.w	ip, ip, #1
 80066a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066a4:	fa0f fc8c 	sxth.w	ip, ip
 80066a8:	edc3 7a00 	vstr	s15, [r3]
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	4667      	mov	r7, ip
 80066b0:	459c      	cmp	ip, r3
 80066b2:	dbd4      	blt.n	800665e <pool_func_mp_array_f32+0xe2>
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80066b8:	461a      	mov	r2, r3
 80066ba:	9b05      	ldr	r3, [sp, #20]
 80066bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066be:	4403      	add	r3, r0
 80066c0:	4402      	add	r2, r0
 80066c2:	3101      	adds	r1, #1
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	b209      	sxth	r1, r1
 80066c8:	9305      	str	r3, [sp, #20]
 80066ca:	b292      	uxth	r2, r2
 80066cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ce:	4688      	mov	r8, r1
 80066d0:	910a      	str	r1, [sp, #40]	; 0x28
 80066d2:	428b      	cmp	r3, r1
 80066d4:	9207      	str	r2, [sp, #28]
 80066d6:	dcb1      	bgt.n	800663c <pool_func_mp_array_f32+0xc0>
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80066dc:	461a      	mov	r2, r3
 80066de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066e0:	9b02      	ldr	r3, [sp, #8]
 80066e2:	4402      	add	r2, r0
 80066e4:	3101      	adds	r1, #1
 80066e6:	4403      	add	r3, r0
 80066e8:	b292      	uxth	r2, r2
 80066ea:	b209      	sxth	r1, r1
 80066ec:	9201      	str	r2, [sp, #4]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066f2:	9302      	str	r3, [sp, #8]
 80066f4:	460b      	mov	r3, r1
 80066f6:	428a      	cmp	r2, r1
 80066f8:	9109      	str	r1, [sp, #36]	; 0x24
 80066fa:	dc8d      	bgt.n	8006618 <pool_func_mp_array_f32+0x9c>
 80066fc:	b019      	add	sp, #100	; 0x64
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	eddf 7a63 	vldr	s15, [pc, #396]	; 8006890 <pool_func_mp_array_f32+0x314>
 8006706:	e7c6      	b.n	8006696 <pool_func_mp_array_f32+0x11a>
 8006708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f6      	beq.n	80066fc <pool_func_mp_array_f32+0x180>
 800670e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f3      	beq.n	80066fc <pool_func_mp_array_f32+0x180>
 8006714:	9d03      	ldr	r5, [sp, #12]
 8006716:	2d00      	cmp	r5, #0
 8006718:	d0f0      	beq.n	80066fc <pool_func_mp_array_f32+0x180>
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 8006720:	1a9c      	subs	r4, r3, r2
 8006722:	9b08      	ldr	r3, [sp, #32]
 8006724:	4252      	negs	r2, r2
 8006726:	1a58      	subs	r0, r3, r1
 8006728:	9b00      	ldr	r3, [sp, #0]
 800672a:	b292      	uxth	r2, r2
 800672c:	4249      	negs	r1, r1
 800672e:	461e      	mov	r6, r3
 8006730:	462b      	mov	r3, r5
 8006732:	b2a4      	uxth	r4, r4
 8006734:	9208      	str	r2, [sp, #32]
 8006736:	fb06 f303 	mul.w	r3, r6, r3
 800673a:	2600      	movs	r6, #0
 800673c:	b280      	uxth	r0, r0
 800673e:	9412      	str	r4, [sp, #72]	; 0x48
 8006740:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8006744:	4632      	mov	r2, r6
 8006746:	b289      	uxth	r1, r1
 8006748:	9614      	str	r6, [sp, #80]	; 0x50
 800674a:	46d1      	mov	r9, sl
 800674c:	9016      	str	r0, [sp, #88]	; 0x58
 800674e:	9117      	str	r1, [sp, #92]	; 0x5c
 8006750:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006752:	2000      	movs	r0, #0
 8006754:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006756:	1e4b      	subs	r3, r1, #1
 8006758:	9d08      	ldr	r5, [sp, #32]
 800675a:	fb04 f202 	mul.w	r2, r4, r2
 800675e:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 8006762:	4698      	mov	r8, r3
 8006764:	fa0f fa85 	sxth.w	sl, r5
 8006768:	920f      	str	r2, [sp, #60]	; 0x3c
 800676a:	b20a      	sxth	r2, r1
 800676c:	eba8 0805 	sub.w	r8, r8, r5
 8006770:	9b00      	ldr	r3, [sp, #0]
 8006772:	9207      	str	r2, [sp, #28]
 8006774:	fb03 f30a 	mul.w	r3, r3, sl
 8006778:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800677a:	fa1f f888 	uxth.w	r8, r8
 800677e:	900d      	str	r0, [sp, #52]	; 0x34
 8006780:	9310      	str	r3, [sp, #64]	; 0x40
 8006782:	4603      	mov	r3, r0
 8006784:	920b      	str	r2, [sp, #44]	; 0x2c
 8006786:	f108 0801 	add.w	r8, r8, #1
 800678a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800678c:	920a      	str	r2, [sp, #40]	; 0x28
 800678e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8006798:	189a      	adds	r2, r3, r2
 800679a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800679c:	9903      	ldr	r1, [sp, #12]
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 80067a4:	fb01 f202 	mul.w	r2, r1, r2
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	9205      	str	r2, [sp, #20]
 80067ae:	f8cd c004 	str.w	ip, [sp, #4]
 80067b2:	9309      	str	r3, [sp, #36]	; 0x24
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	4553      	cmp	r3, sl
 80067b8:	dd67      	ble.n	800688a <pool_func_mp_array_f32+0x30e>
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	2400      	movs	r4, #0
 80067be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067c0:	f8cd c008 	str.w	ip, [sp, #8]
 80067c4:	189e      	adds	r6, r3, r2
 80067c6:	9b06      	ldr	r3, [sp, #24]
 80067c8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006890 <pool_func_mp_array_f32+0x314>
 80067cc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80067d0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80067d4:	42bd      	cmp	r5, r7
 80067d6:	dd19      	ble.n	800680c <pool_func_mp_array_f32+0x290>
 80067d8:	eb0c 0204 	add.w	r2, ip, r4
 80067dc:	eb0a 0304 	add.w	r3, sl, r4
 80067e0:	43d2      	mvns	r2, r2
 80067e2:	459e      	cmp	lr, r3
 80067e4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80067e8:	dd10      	ble.n	800680c <pool_func_mp_array_f32+0x290>
 80067ea:	4631      	mov	r1, r6
 80067ec:	463b      	mov	r3, r7
 80067ee:	0418      	lsls	r0, r3, #16
 80067f0:	d407      	bmi.n	8006802 <pool_func_mp_array_f32+0x286>
 80067f2:	b132      	cbz	r2, 8006802 <pool_func_mp_array_f32+0x286>
 80067f4:	9800      	ldr	r0, [sp, #0]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	dd03      	ble.n	8006802 <pool_func_mp_array_f32+0x286>
 80067fa:	ed91 7a00 	vldr	s14, [r1]
 80067fe:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8006802:	3301      	adds	r3, #1
 8006804:	4459      	add	r1, fp
 8006806:	b218      	sxth	r0, r3
 8006808:	4285      	cmp	r5, r0
 800680a:	dcf0      	bgt.n	80067ee <pool_func_mp_array_f32+0x272>
 800680c:	3401      	adds	r4, #1
 800680e:	444e      	add	r6, r9
 8006810:	45a0      	cmp	r8, r4
 8006812:	d1df      	bne.n	80067d4 <pool_func_mp_array_f32+0x258>
 8006814:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	f10c 0c01 	add.w	ip, ip, #1
 800681e:	9a05      	ldr	r2, [sp, #20]
 8006820:	fa0f fc8c 	sxth.w	ip, ip
 8006824:	4413      	add	r3, r2
 8006826:	9a04      	ldr	r2, [sp, #16]
 8006828:	f8cd c004 	str.w	ip, [sp, #4]
 800682c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006830:	edc3 7a00 	vstr	s15, [r3]
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	459c      	cmp	ip, r3
 8006838:	dbbc      	blt.n	80067b4 <pool_func_mp_array_f32+0x238>
 800683a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800683c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800683e:	461a      	mov	r2, r3
 8006840:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	4402      	add	r2, r0
 8006846:	3101      	adds	r1, #1
 8006848:	4403      	add	r3, r0
 800684a:	b292      	uxth	r2, r2
 800684c:	b209      	sxth	r1, r1
 800684e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006850:	b29b      	uxth	r3, r3
 8006852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006854:	930a      	str	r3, [sp, #40]	; 0x28
 8006856:	460b      	mov	r3, r1
 8006858:	428a      	cmp	r2, r1
 800685a:	910d      	str	r1, [sp, #52]	; 0x34
 800685c:	dc97      	bgt.n	800678e <pool_func_mp_array_f32+0x212>
 800685e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006860:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006862:	461a      	mov	r2, r3
 8006864:	9b08      	ldr	r3, [sp, #32]
 8006866:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006868:	4403      	add	r3, r0
 800686a:	4402      	add	r2, r0
 800686c:	3101      	adds	r1, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	b209      	sxth	r1, r1
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	b292      	uxth	r2, r2
 8006876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006878:	9212      	str	r2, [sp, #72]	; 0x48
 800687a:	460a      	mov	r2, r1
 800687c:	428b      	cmp	r3, r1
 800687e:	9114      	str	r1, [sp, #80]	; 0x50
 8006880:	f73f af66 	bgt.w	8006750 <pool_func_mp_array_f32+0x1d4>
 8006884:	b019      	add	sp, #100	; 0x64
 8006886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8006890 <pool_func_mp_array_f32+0x314>
 800688e:	e7c3      	b.n	8006818 <pool_func_mp_array_f32+0x29c>
 8006890:	cf000000 	.word	0xcf000000

08006894 <nl_func_relu_array_f32>:
 8006894:	b430      	push	{r4, r5}
 8006896:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800689a:	698d      	ldr	r5, [r1, #24]
 800689c:	6981      	ldr	r1, [r0, #24]
 800689e:	4414      	add	r4, r2
 80068a0:	68ab      	ldr	r3, [r5, #8]
 80068a2:	6889      	ldr	r1, [r1, #8]
 80068a4:	00a4      	lsls	r4, r4, #2
 80068a6:	191b      	adds	r3, r3, r4
 80068a8:	d210      	bcs.n	80068cc <nl_func_relu_array_f32+0x38>
 80068aa:	3404      	adds	r4, #4
 80068ac:	3304      	adds	r3, #4
 80068ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80068d0 <nl_func_relu_array_f32+0x3c>
 80068b2:	4421      	add	r1, r4
 80068b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80068b8:	f1a3 0208 	sub.w	r2, r3, #8
 80068bc:	3b04      	subs	r3, #4
 80068be:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80068c2:	ed61 7a01 	vstmdb	r1!, {s15}
 80068c6:	68a8      	ldr	r0, [r5, #8]
 80068c8:	4290      	cmp	r0, r2
 80068ca:	d9f3      	bls.n	80068b4 <nl_func_relu_array_f32+0x20>
 80068cc:	bc30      	pop	{r4, r5}
 80068ce:	4770      	bx	lr
 80068d0:	00000000 	.word	0x00000000

080068d4 <nl_func_sm_array_f32>:
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	ed2d 8b04 	vpush	{d8-d9}
 80068dc:	b089      	sub	sp, #36	; 0x24
 80068de:	698f      	ldr	r7, [r1, #24]
 80068e0:	6986      	ldr	r6, [r0, #24]
 80068e2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80068e6:	68bd      	ldr	r5, [r7, #8]
 80068e8:	eba2 040e 	sub.w	r4, r2, lr
 80068ec:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80068f0:	9602      	str	r6, [sp, #8]
 80068f2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80068f6:	68fc      	ldr	r4, [r7, #12]
 80068f8:	68b6      	ldr	r6, [r6, #8]
 80068fa:	eba2 020c 	sub.w	r2, r2, ip
 80068fe:	42a5      	cmp	r5, r4
 8006900:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8006904:	d351      	bcc.n	80069aa <nl_func_sm_array_f32+0xd6>
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8006912:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006916:	f1ce 0200 	rsb	r2, lr, #0
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	f1cc 0300 	rsb	r3, ip, #0
 8006920:	9204      	str	r2, [sp, #16]
 8006922:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	9b02      	ldr	r3, [sp, #8]
 800692a:	9a07      	ldr	r2, [sp, #28]
 800692c:	60bd      	str	r5, [r7, #8]
 800692e:	609e      	str	r6, [r3, #8]
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	6992      	ldr	r2, [r2, #24]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	6894      	ldr	r4, [r2, #8]
 8006938:	9a03      	ldr	r2, [sp, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2a01      	cmp	r2, #1
 800693e:	ed93 8a00 	vldr	s16, [r3]
 8006942:	d93b      	bls.n	80069bc <nl_func_sm_array_f32+0xe8>
 8006944:	9901      	ldr	r1, [sp, #4]
 8006946:	1d1a      	adds	r2, r3, #4
 8006948:	eb03 0b01 	add.w	fp, r3, r1
 800694c:	ecf2 7a01 	vldmia	r2!, {s15}
 8006950:	4593      	cmp	fp, r2
 8006952:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8006956:	d1f9      	bne.n	800694c <nl_func_sm_array_f32+0x78>
 8006958:	469a      	mov	sl, r3
 800695a:	46a1      	mov	r9, r4
 800695c:	46a0      	mov	r8, r4
 800695e:	eddf 8a1a 	vldr	s17, [pc, #104]	; 80069c8 <nl_func_sm_array_f32+0xf4>
 8006962:	ecba 0a01 	vldmia	sl!, {s0}
 8006966:	ee30 0a48 	vsub.f32	s0, s0, s16
 800696a:	f000 fb99 	bl	80070a0 <expf>
 800696e:	45d3      	cmp	fp, sl
 8006970:	eca8 0a01 	vstmia	r8!, {s0}
 8006974:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006978:	d1f3      	bne.n	8006962 <nl_func_sm_array_f32+0x8e>
 800697a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800697e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006982:	d00b      	beq.n	800699c <nl_func_sm_array_f32+0xc8>
 8006984:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	441c      	add	r4, r3
 800698c:	edd9 7a00 	vldr	s15, [r9]
 8006990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006994:	ece9 7a01 	vstmia	r9!, {s15}
 8006998:	454c      	cmp	r4, r9
 800699a:	d1f7      	bne.n	800698c <nl_func_sm_array_f32+0xb8>
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	68fc      	ldr	r4, [r7, #12]
 80069a0:	441d      	add	r5, r3
 80069a2:	9b05      	ldr	r3, [sp, #20]
 80069a4:	42ac      	cmp	r4, r5
 80069a6:	441e      	add	r6, r3
 80069a8:	d9be      	bls.n	8006928 <nl_func_sm_array_f32+0x54>
 80069aa:	9a02      	ldr	r2, [sp, #8]
 80069ac:	60bc      	str	r4, [r7, #8]
 80069ae:	68d3      	ldr	r3, [r2, #12]
 80069b0:	6093      	str	r3, [r2, #8]
 80069b2:	b009      	add	sp, #36	; 0x24
 80069b4:	ecbd 8b04 	vpop	{d8-d9}
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	2a00      	cmp	r2, #0
 80069be:	d0ed      	beq.n	800699c <nl_func_sm_array_f32+0xc8>
 80069c0:	9a01      	ldr	r2, [sp, #4]
 80069c2:	eb03 0b02 	add.w	fp, r3, r2
 80069c6:	e7c7      	b.n	8006958 <nl_func_sm_array_f32+0x84>
 80069c8:	00000000 	.word	0x00000000

080069cc <nl_func_relu_generic_array_f32>:
 80069cc:	b470      	push	{r4, r5, r6}
 80069ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80069d2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80069d6:	6985      	ldr	r5, [r0, #24]
 80069d8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80069dc:	4414      	add	r4, r2
 80069de:	6989      	ldr	r1, [r1, #24]
 80069e0:	00a4      	lsls	r4, r4, #2
 80069e2:	68aa      	ldr	r2, [r5, #8]
 80069e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e8:	6888      	ldr	r0, [r1, #8]
 80069ea:	4422      	add	r2, r4
 80069ec:	ed93 7a00 	vldr	s14, [r3]
 80069f0:	4404      	add	r4, r0
 80069f2:	ed93 6a01 	vldr	s12, [r3, #4]
 80069f6:	d420      	bmi.n	8006a3a <nl_func_relu_generic_array_f32+0x6e>
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d83b      	bhi.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>
 80069fc:	1d23      	adds	r3, r4, #4
 80069fe:	3204      	adds	r2, #4
 8006a00:	e010      	b.n	8006a24 <nl_func_relu_generic_array_f32+0x58>
 8006a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a06:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	d501      	bpl.n	8006a14 <nl_func_relu_generic_array_f32+0x48>
 8006a10:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006a14:	f1a3 0408 	sub.w	r4, r3, #8
 8006a18:	ed62 7a01 	vstmdb	r2!, {s15}
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	6888      	ldr	r0, [r1, #8]
 8006a20:	4284      	cmp	r4, r0
 8006a22:	d327      	bcc.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>
 8006a24:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006a28:	1f18      	subs	r0, r3, #4
 8006a2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a32:	d4e6      	bmi.n	8006a02 <nl_func_relu_generic_array_f32+0x36>
 8006a34:	eef0 7a66 	vmov.f32	s15, s13
 8006a38:	e7ec      	b.n	8006a14 <nl_func_relu_generic_array_f32+0x48>
 8006a3a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a42:	d019      	beq.n	8006a78 <nl_func_relu_generic_array_f32+0xac>
 8006a44:	42a0      	cmp	r0, r4
 8006a46:	d815      	bhi.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>
 8006a48:	1d23      	adds	r3, r4, #4
 8006a4a:	3204      	adds	r2, #4
 8006a4c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006a50:	1f18      	subs	r0, r3, #4
 8006a52:	f1a3 0508 	sub.w	r5, r3, #8
 8006a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a64:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006a68:	d51c      	bpl.n	8006aa4 <nl_func_relu_generic_array_f32+0xd8>
 8006a6a:	ed62 6a01 	vstmdb	r2!, {s13}
 8006a6e:	6888      	ldr	r0, [r1, #8]
 8006a70:	42a8      	cmp	r0, r5
 8006a72:	d9eb      	bls.n	8006a4c <nl_func_relu_generic_array_f32+0x80>
 8006a74:	bc70      	pop	{r4, r5, r6}
 8006a76:	4770      	bx	lr
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d8fb      	bhi.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>
 8006a7c:	1d23      	adds	r3, r4, #4
 8006a7e:	3204      	adds	r2, #4
 8006a80:	2600      	movs	r6, #0
 8006a82:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006a86:	1f18      	subs	r0, r3, #4
 8006a88:	f1a3 0508 	sub.w	r5, r3, #8
 8006a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a90:	4603      	mov	r3, r0
 8006a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a96:	db0b      	blt.n	8006ab0 <nl_func_relu_generic_array_f32+0xe4>
 8006a98:	ed62 7a01 	vstmdb	r2!, {s15}
 8006a9c:	6888      	ldr	r0, [r1, #8]
 8006a9e:	42a8      	cmp	r0, r5
 8006aa0:	d9ef      	bls.n	8006a82 <nl_func_relu_generic_array_f32+0xb6>
 8006aa2:	e7e7      	b.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>
 8006aa4:	ed62 7a01 	vstmdb	r2!, {s15}
 8006aa8:	6888      	ldr	r0, [r1, #8]
 8006aaa:	42a8      	cmp	r0, r5
 8006aac:	d9ce      	bls.n	8006a4c <nl_func_relu_generic_array_f32+0x80>
 8006aae:	e7e1      	b.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>
 8006ab0:	f842 6d04 	str.w	r6, [r2, #-4]!
 8006ab4:	6888      	ldr	r0, [r1, #8]
 8006ab6:	42a8      	cmp	r0, r5
 8006ab8:	d9e3      	bls.n	8006a82 <nl_func_relu_generic_array_f32+0xb6>
 8006aba:	e7db      	b.n	8006a74 <nl_func_relu_generic_array_f32+0xa8>

08006abc <forward_relu>:
 8006abc:	6982      	ldr	r2, [r0, #24]
 8006abe:	8813      	ldrh	r3, [r2, #0]
 8006ac0:	b333      	cbz	r3, 8006b10 <forward_relu+0x54>
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	6851      	ldr	r1, [r2, #4]
 8006ac6:	b101      	cbz	r1, 8006aca <forward_relu+0xe>
 8006ac8:	6809      	ldr	r1, [r1, #0]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d91d      	bls.n	8006b0a <forward_relu+0x4e>
 8006ace:	b4f0      	push	{r4, r5, r6, r7}
 8006ad0:	6917      	ldr	r7, [r2, #16]
 8006ad2:	b107      	cbz	r7, 8006ad6 <forward_relu+0x1a>
 8006ad4:	683f      	ldr	r7, [r7, #0]
 8006ad6:	688c      	ldr	r4, [r1, #8]
 8006ad8:	69c3      	ldr	r3, [r0, #28]
 8006ada:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d043      	beq.n	8006b6a <forward_relu+0xae>
 8006ae2:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8006ae6:	2d01      	cmp	r5, #1
 8006ae8:	d014      	beq.n	8006b14 <forward_relu+0x58>
 8006aea:	2c00      	cmp	r4, #0
 8006aec:	d06d      	beq.n	8006bca <forward_relu+0x10e>
 8006aee:	68ce      	ldr	r6, [r1, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006af6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	fb05 f202 	mul.w	r2, r5, r2
 8006b00:	d1f9      	bne.n	8006af6 <forward_relu+0x3a>
 8006b02:	4638      	mov	r0, r7
 8006b04:	bcf0      	pop	{r4, r5, r6, r7}
 8006b06:	f7ff bf61 	b.w	80069cc <nl_func_relu_generic_array_f32>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	deff      	udf	#255	; 0xff
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	deff      	udf	#255	; 0xff
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	698e      	ldr	r6, [r1, #24]
 8006b18:	6890      	ldr	r0, [r2, #8]
 8006b1a:	ed93 7a00 	vldr	s14, [r3]
 8006b1e:	68b2      	ldr	r2, [r6, #8]
 8006b20:	b184      	cbz	r4, 8006b44 <forward_relu+0x88>
 8006b22:	68cf      	ldr	r7, [r1, #12]
 8006b24:	4629      	mov	r1, r5
 8006b26:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8006b2a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8006b2e:	42a7      	cmp	r7, r4
 8006b30:	fb03 f101 	mul.w	r1, r3, r1
 8006b34:	d1f9      	bne.n	8006b2a <forward_relu+0x6e>
 8006b36:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006b3a:	440b      	add	r3, r1
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	18d2      	adds	r2, r2, r3
 8006b40:	4418      	add	r0, r3
 8006b42:	d238      	bcs.n	8006bb6 <forward_relu+0xfa>
 8006b44:	1d13      	adds	r3, r2, #4
 8006b46:	2400      	movs	r4, #0
 8006b48:	1d02      	adds	r2, r0, #4
 8006b4a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006b4e:	1f19      	subs	r1, r3, #4
 8006b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b58:	d82f      	bhi.n	8006bba <forward_relu+0xfe>
 8006b5a:	ed62 7a01 	vstmdb	r2!, {s15}
 8006b5e:	3b08      	subs	r3, #8
 8006b60:	68b0      	ldr	r0, [r6, #8]
 8006b62:	4298      	cmp	r0, r3
 8006b64:	d827      	bhi.n	8006bb6 <forward_relu+0xfa>
 8006b66:	460b      	mov	r3, r1
 8006b68:	e7ef      	b.n	8006b4a <forward_relu+0x8e>
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	698d      	ldr	r5, [r1, #24]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	68ab      	ldr	r3, [r5, #8]
 8006b72:	b184      	cbz	r4, 8006b96 <forward_relu+0xda>
 8006b74:	68ce      	ldr	r6, [r1, #12]
 8006b76:	2101      	movs	r1, #1
 8006b78:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006b7c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8006b80:	42a6      	cmp	r6, r4
 8006b82:	fb00 f101 	mul.w	r1, r0, r1
 8006b86:	d1f9      	bne.n	8006b7c <forward_relu+0xc0>
 8006b88:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8006b8c:	4408      	add	r0, r1
 8006b8e:	0081      	lsls	r1, r0, #2
 8006b90:	185b      	adds	r3, r3, r1
 8006b92:	440a      	add	r2, r1
 8006b94:	d20f      	bcs.n	8006bb6 <forward_relu+0xfa>
 8006b96:	3304      	adds	r3, #4
 8006b98:	1d11      	adds	r1, r2, #4
 8006b9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006bd0 <forward_relu+0x114>
 8006b9e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006ba2:	f1a3 0208 	sub.w	r2, r3, #8
 8006ba6:	3b04      	subs	r3, #4
 8006ba8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8006bac:	ed61 7a01 	vstmdb	r1!, {s15}
 8006bb0:	68a8      	ldr	r0, [r5, #8]
 8006bb2:	4290      	cmp	r0, r2
 8006bb4:	d9f3      	bls.n	8006b9e <forward_relu+0xe2>
 8006bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8006bb8:	4770      	bx	lr
 8006bba:	f842 4d04 	str.w	r4, [r2, #-4]!
 8006bbe:	3b08      	subs	r3, #8
 8006bc0:	68b0      	ldr	r0, [r6, #8]
 8006bc2:	4298      	cmp	r0, r3
 8006bc4:	d8f7      	bhi.n	8006bb6 <forward_relu+0xfa>
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	e7bf      	b.n	8006b4a <forward_relu+0x8e>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	e799      	b.n	8006b02 <forward_relu+0x46>
 8006bce:	bf00      	nop
 8006bd0:	00000000 	.word	0x00000000

08006bd4 <forward_sm>:
 8006bd4:	6982      	ldr	r2, [r0, #24]
 8006bd6:	8813      	ldrh	r3, [r2, #0]
 8006bd8:	b333      	cbz	r3, 8006c28 <forward_sm+0x54>
 8006bda:	6852      	ldr	r2, [r2, #4]
 8006bdc:	6851      	ldr	r1, [r2, #4]
 8006bde:	b101      	cbz	r1, 8006be2 <forward_sm+0xe>
 8006be0:	6809      	ldr	r1, [r1, #0]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d91d      	bls.n	8006c22 <forward_sm+0x4e>
 8006be6:	6913      	ldr	r3, [r2, #16]
 8006be8:	b1cb      	cbz	r3, 8006c1e <forward_sm+0x4a>
 8006bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	b083      	sub	sp, #12
 8006bf0:	688b      	ldr	r3, [r1, #8]
 8006bf2:	68cd      	ldr	r5, [r1, #12]
 8006bf4:	68c2      	ldr	r2, [r0, #12]
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	686e      	ldr	r6, [r5, #4]
 8006bfa:	6857      	ldr	r7, [r2, #4]
 8006bfc:	d016      	beq.n	8006c2c <forward_sm+0x58>
 8006bfe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006c02:	2201      	movs	r2, #1
 8006c04:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	fb04 f202 	mul.w	r2, r4, r2
 8006c0e:	d1f9      	bne.n	8006c04 <forward_sm+0x30>
 8006c10:	4633      	mov	r3, r6
 8006c12:	9701      	str	r7, [sp, #4]
 8006c14:	9600      	str	r6, [sp, #0]
 8006c16:	f7ff fe5d 	bl	80068d4 <nl_func_sm_array_f32>
 8006c1a:	b003      	add	sp, #12
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	deff      	udf	#255	; 0xff
 8006c22:	2300      	movs	r3, #0
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	deff      	udf	#255	; 0xff
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	deff      	udf	#255	; 0xff
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	e7ef      	b.n	8006c10 <forward_sm+0x3c>

08006c30 <forward_bn>:
 8006c30:	6983      	ldr	r3, [r0, #24]
 8006c32:	8819      	ldrh	r1, [r3, #0]
 8006c34:	2900      	cmp	r1, #0
 8006c36:	d061      	beq.n	8006cfc <forward_bn+0xcc>
 8006c38:	6858      	ldr	r0, [r3, #4]
 8006c3a:	6843      	ldr	r3, [r0, #4]
 8006c3c:	b103      	cbz	r3, 8006c40 <forward_bn+0x10>
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2901      	cmp	r1, #1
 8006c42:	d958      	bls.n	8006cf6 <forward_bn+0xc6>
 8006c44:	6902      	ldr	r2, [r0, #16]
 8006c46:	b102      	cbz	r2, 8006c4a <forward_bn+0x1a>
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	2902      	cmp	r1, #2
 8006c4c:	d058      	beq.n	8006d00 <forward_bn+0xd0>
 8006c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c52:	69c4      	ldr	r4, [r0, #28]
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	f000 8093 	beq.w	8006d80 <forward_bn+0x150>
 8006c5a:	6821      	ldr	r1, [r4, #0]
 8006c5c:	f110 0f18 	cmn.w	r0, #24
 8006c60:	d051      	beq.n	8006d06 <forward_bn+0xd6>
 8006c62:	8b00      	ldrh	r0, [r0, #24]
 8006c64:	2801      	cmp	r0, #1
 8006c66:	d94e      	bls.n	8006d06 <forward_bn+0xd6>
 8006c68:	2c00      	cmp	r4, #0
 8006c6a:	d04c      	beq.n	8006d06 <forward_bn+0xd6>
 8006c6c:	6996      	ldr	r6, [r2, #24]
 8006c6e:	68d8      	ldr	r0, [r3, #12]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	698d      	ldr	r5, [r1, #24]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	68b1      	ldr	r1, [r6, #8]
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	68ae      	ldr	r6, [r5, #8]
 8006c7e:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8006c82:	6845      	ldr	r5, [r0, #4]
 8006c84:	d074      	beq.n	8006d70 <forward_bn+0x140>
 8006c86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c8a:	2701      	movs	r7, #1
 8006c8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c90:	4298      	cmp	r0, r3
 8006c92:	fb02 f707 	mul.w	r7, r2, r7
 8006c96:	d1f9      	bne.n	8006c8c <forward_bn+0x5c>
 8006c98:	2c00      	cmp	r4, #0
 8006c9a:	d042      	beq.n	8006d22 <forward_bn+0xf2>
 8006c9c:	69a3      	ldr	r3, [r4, #24]
 8006c9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8006ca2:	b337      	cbz	r7, 8006cf2 <forward_bn+0xc2>
 8006ca4:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8006ca8:	2300      	movs	r3, #0
 8006caa:	ebc5 7985 	rsb	r9, r5, r5, lsl #30
 8006cae:	eba1 010e 	sub.w	r1, r1, lr
 8006cb2:	eb0a 040e 	add.w	r4, sl, lr
 8006cb6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006cba:	eba1 0a0a 	sub.w	sl, r1, sl
 8006cbe:	eb05 0c03 	add.w	ip, r5, r3
 8006cc2:	459c      	cmp	ip, r3
 8006cc4:	d911      	bls.n	8006cea <forward_bn+0xba>
 8006cc6:	eb09 0304 	add.w	r3, r9, r4
 8006cca:	4630      	mov	r0, r6
 8006ccc:	4641      	mov	r1, r8
 8006cce:	eb0a 0204 	add.w	r2, sl, r4
 8006cd2:	ecf3 6a01 	vldmia	r3!, {s13}
 8006cd6:	ecb0 7a01 	vldmia	r0!, {s14}
 8006cda:	ecf1 7a01 	vldmia	r1!, {s15}
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006ce4:	ece2 7a01 	vstmia	r2!, {s15}
 8006ce8:	d1f3      	bne.n	8006cd2 <forward_bn+0xa2>
 8006cea:	45bc      	cmp	ip, r7
 8006cec:	4663      	mov	r3, ip
 8006cee:	4474      	add	r4, lr
 8006cf0:	d3e5      	bcc.n	8006cbe <forward_bn+0x8e>
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	deff      	udf	#255	; 0xff
 8006cfc:	684b      	ldr	r3, [r1, #4]
 8006cfe:	deff      	udf	#255	; 0xff
 8006d00:	2300      	movs	r3, #0
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	deff      	udf	#255	; 0xff
 8006d06:	6995      	ldr	r5, [r2, #24]
 8006d08:	68d8      	ldr	r0, [r3, #12]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	698c      	ldr	r4, [r1, #24]
 8006d10:	0a1b      	lsrs	r3, r3, #8
 8006d12:	68a9      	ldr	r1, [r5, #8]
 8006d14:	68a6      	ldr	r6, [r4, #8]
 8006d16:	6845      	ldr	r5, [r0, #4]
 8006d18:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8006d1c:	d02e      	beq.n	8006d7c <forward_bn+0x14c>
 8006d1e:	2400      	movs	r4, #0
 8006d20:	e7b1      	b.n	8006c86 <forward_bn+0x56>
 8006d22:	2f00      	cmp	r7, #0
 8006d24:	d0e5      	beq.n	8006cf2 <forward_bn+0xc2>
 8006d26:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
 8006d30:	eba1 0108 	sub.w	r1, r1, r8
 8006d34:	eb0a 0008 	add.w	r0, sl, r8
 8006d38:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006d3c:	eba1 0c0a 	sub.w	ip, r1, sl
 8006d40:	18ec      	adds	r4, r5, r3
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d90e      	bls.n	8006d64 <forward_bn+0x134>
 8006d46:	eb0e 0300 	add.w	r3, lr, r0
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	eb00 020c 	add.w	r2, r0, ip
 8006d50:	ecf3 7a01 	vldmia	r3!, {s15}
 8006d54:	ecb1 7a01 	vldmia	r1!, {s14}
 8006d58:	4298      	cmp	r0, r3
 8006d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d5e:	ece2 7a01 	vstmia	r2!, {s15}
 8006d62:	d1f5      	bne.n	8006d50 <forward_bn+0x120>
 8006d64:	42bc      	cmp	r4, r7
 8006d66:	4623      	mov	r3, r4
 8006d68:	4440      	add	r0, r8
 8006d6a:	d3e9      	bcc.n	8006d40 <forward_bn+0x110>
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	b124      	cbz	r4, 8006d7c <forward_bn+0x14c>
 8006d72:	69a3      	ldr	r3, [r4, #24]
 8006d74:	2701      	movs	r7, #1
 8006d76:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8006d7a:	e793      	b.n	8006ca4 <forward_bn+0x74>
 8006d7c:	2701      	movs	r7, #1
 8006d7e:	e7d2      	b.n	8006d26 <forward_bn+0xf6>
 8006d80:	4621      	mov	r1, r4
 8006d82:	e76b      	b.n	8006c5c <forward_bn+0x2c>

08006d84 <ai_check_custom_types>:
 8006d84:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <ai_check_custom_types+0x50>)
 8006d86:	b082      	sub	sp, #8
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	b118      	cbz	r0, 8006d96 <ai_check_custom_types+0x12>
 8006d8e:	7803      	ldrb	r3, [r0, #0]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d002      	beq.n	8006d9a <ai_check_custom_types+0x16>
 8006d94:	2000      	movs	r0, #0
 8006d96:	b002      	add	sp, #8
 8006d98:	4770      	bx	lr
 8006d9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <ai_check_custom_types+0x28>
 8006da2:	2001      	movs	r0, #1
 8006da4:	f080 0001 	eor.w	r0, r0, #1
 8006da8:	b002      	add	sp, #8
 8006daa:	4770      	bx	lr
 8006dac:	7842      	ldrb	r2, [r0, #1]
 8006dae:	3001      	adds	r0, #1
 8006db0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d1f4      	bne.n	8006da2 <ai_check_custom_types+0x1e>
 8006db8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006dbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d1ee      	bne.n	8006da2 <ai_check_custom_types+0x1e>
 8006dc4:	7842      	ldrb	r2, [r0, #1]
 8006dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d1e9      	bne.n	8006da2 <ai_check_custom_types+0x1e>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e7e8      	b.n	8006da4 <ai_check_custom_types+0x20>
 8006dd2:	bf00      	nop
 8006dd4:	08007380 	.word	0x08007380

08006dd8 <ai_layers_init_all>:
 8006dd8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006dda:	b16a      	cbz	r2, 8006df8 <ai_layers_init_all+0x20>
 8006ddc:	6913      	ldr	r3, [r2, #16]
 8006dde:	60d0      	str	r0, [r2, #12]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	f04f 0201 	mov.w	r2, #1
 8006de6:	d007      	beq.n	8006df8 <ai_layers_init_all+0x20>
 8006de8:	b133      	cbz	r3, 8006df8 <ai_layers_init_all+0x20>
 8006dea:	6919      	ldr	r1, [r3, #16]
 8006dec:	3201      	adds	r2, #1
 8006dee:	60d8      	str	r0, [r3, #12]
 8006df0:	4299      	cmp	r1, r3
 8006df2:	bf18      	it	ne
 8006df4:	2900      	cmpne	r1, #0
 8006df6:	d101      	bne.n	8006dfc <ai_layers_init_all+0x24>
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4770      	bx	lr
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	e7f4      	b.n	8006dea <ai_layers_init_all+0x12>

08006e00 <ai_layers_post_init_all>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006e04:	b184      	cbz	r4, 8006e28 <ai_layers_post_init_all+0x28>
 8006e06:	2500      	movs	r5, #0
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	07db      	lsls	r3, r3, #31
 8006e0e:	d503      	bpl.n	8006e18 <ai_layers_post_init_all+0x18>
 8006e10:	6a23      	ldr	r3, [r4, #32]
 8006e12:	b10b      	cbz	r3, 8006e18 <ai_layers_post_init_all+0x18>
 8006e14:	3501      	adds	r5, #1
 8006e16:	4798      	blx	r3
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	bf18      	it	ne
 8006e1e:	2b00      	cmpne	r3, #0
 8006e20:	461c      	mov	r4, r3
 8006e22:	d1f1      	bne.n	8006e08 <ai_layers_post_init_all+0x8>
 8006e24:	4628      	mov	r0, r5
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	4625      	mov	r5, r4
 8006e2a:	e7fb      	b.n	8006e24 <ai_layers_post_init_all+0x24>

08006e2c <ai_layers_forward_all>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8006e32:	4604      	mov	r4, r0
 8006e34:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006e36:	2f00      	cmp	r7, #0
 8006e38:	d02b      	beq.n	8006e92 <ai_layers_forward_all+0x66>
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	d03d      	beq.n	8006eba <ai_layers_forward_all+0x8e>
 8006e3e:	2600      	movs	r6, #0
 8006e40:	6385      	str	r5, [r0, #56]	; 0x38
 8006e42:	4629      	mov	r1, r5
 8006e44:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006e46:	2001      	movs	r0, #1
 8006e48:	46b0      	mov	r8, r6
 8006e4a:	47b8      	blx	r7
 8006e4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006e50:	2002      	movs	r0, #2
 8006e52:	47b8      	blx	r7
 8006e54:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006e56:	696b      	ldr	r3, [r5, #20]
 8006e58:	4628      	mov	r0, r5
 8006e5a:	4798      	blx	r3
 8006e5c:	692b      	ldr	r3, [r5, #16]
 8006e5e:	2003      	movs	r0, #3
 8006e60:	429d      	cmp	r5, r3
 8006e62:	4619      	mov	r1, r3
 8006e64:	d009      	beq.n	8006e7a <ai_layers_forward_all+0x4e>
 8006e66:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e68:	3601      	adds	r6, #1
 8006e6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006e6c:	47b8      	blx	r7
 8006e6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d1ec      	bne.n	8006e4e <ai_layers_forward_all+0x22>
 8006e74:	4630      	mov	r0, r6
 8006e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8006e80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006e82:	3601      	adds	r6, #1
 8006e84:	47b8      	blx	r7
 8006e86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	d1e0      	bne.n	8006e4e <ai_layers_forward_all+0x22>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e92:	b195      	cbz	r5, 8006eba <ai_layers_forward_all+0x8e>
 8006e94:	463e      	mov	r6, r7
 8006e96:	6385      	str	r5, [r0, #56]	; 0x38
 8006e98:	696b      	ldr	r3, [r5, #20]
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	4798      	blx	r3
 8006e9e:	692b      	ldr	r3, [r5, #16]
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	42ab      	cmp	r3, r5
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	d003      	beq.n	8006eb0 <ai_layers_forward_all+0x84>
 8006ea8:	63a3      	str	r3, [r4, #56]	; 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f4      	bne.n	8006e98 <ai_layers_forward_all+0x6c>
 8006eae:	e7e1      	b.n	8006e74 <ai_layers_forward_all+0x48>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8006eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eba:	462e      	mov	r6, r5
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec2:	bf00      	nop

08006ec4 <ai_version_get>:
 8006ec4:	0212      	lsls	r2, r2, #8
 8006ec6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006eca:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006ece:	4770      	bx	lr

08006ed0 <get_tensor_byte_size>:
 8006ed0:	b410      	push	{r4}
 8006ed2:	6984      	ldr	r4, [r0, #24]
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <get_tensor_byte_size+0x28>)
 8006ed6:	6824      	ldr	r4, [r4, #0]
 8006ed8:	68c1      	ldr	r1, [r0, #12]
 8006eda:	4a08      	ldr	r2, [pc, #32]	; (8006efc <get_tensor_byte_size+0x2c>)
 8006edc:	4023      	ands	r3, r4
 8006ede:	6940      	ldr	r0, [r0, #20]
 8006ee0:	68c9      	ldr	r1, [r1, #12]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	68c0      	ldr	r0, [r0, #12]
 8006ee6:	fb00 f001 	mul.w	r0, r0, r1
 8006eea:	d101      	bne.n	8006ef0 <get_tensor_byte_size+0x20>
 8006eec:	3007      	adds	r0, #7
 8006eee:	08c0      	lsrs	r0, r0, #3
 8006ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	017fffff 	.word	0x017fffff
 8006efc:	000400c0 	.word	0x000400c0

08006f00 <ai_array_to_buffer_fmt>:
 8006f00:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d036      	beq.n	8006f76 <ai_array_to_buffer_fmt+0x76>
 8006f08:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006f0c:	4a20      	ldr	r2, [pc, #128]	; (8006f90 <ai_array_to_buffer_fmt+0x90>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00f      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f12:	dd12      	ble.n	8006f3a <ai_array_to_buffer_fmt+0x3a>
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <ai_array_to_buffer_fmt+0x94>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f1a:	dd1e      	ble.n	8006f5a <ai_array_to_buffer_fmt+0x5a>
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <ai_array_to_buffer_fmt+0x98>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f22:	dd30      	ble.n	8006f86 <ai_array_to_buffer_fmt+0x86>
 8006f24:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <ai_array_to_buffer_fmt+0x9c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f2a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d11f      	bne.n	8006f72 <ai_array_to_buffer_fmt+0x72>
 8006f32:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006f36:	4318      	orrs	r0, r3
 8006f38:	4770      	bx	lr
 8006f3a:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <ai_array_to_buffer_fmt+0xa0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d0f8      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f40:	dd0b      	ble.n	8006f5a <ai_array_to_buffer_fmt+0x5a>
 8006f42:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <ai_array_to_buffer_fmt+0xa4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d0f4      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f48:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d0f0      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f50:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d10c      	bne.n	8006f72 <ai_array_to_buffer_fmt+0x72>
 8006f58:	e7eb      	b.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f5a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d0e7      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f62:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d0e3      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f6a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d0df      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	e7dd      	b.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f76:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <ai_array_to_buffer_fmt+0xa8>)
 8006f78:	4003      	ands	r3, r0
 8006f7a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f82:	4318      	orrs	r0, r3
 8006f84:	4770      	bx	lr
 8006f86:	3a0f      	subs	r2, #15
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d0d2      	beq.n	8006f32 <ai_array_to_buffer_fmt+0x32>
 8006f8c:	e7f1      	b.n	8006f72 <ai_array_to_buffer_fmt+0x72>
 8006f8e:	bf00      	nop
 8006f90:	00060440 	.word	0x00060440
 8006f94:	00840447 	.word	0x00840447
 8006f98:	0084084f 	.word	0x0084084f
 8006f9c:	00841040 	.word	0x00841040
 8006fa0:	00040447 	.word	0x00040447
 8006fa4:	0004084f 	.word	0x0004084f
 8006fa8:	00803fff 	.word	0x00803fff

08006fac <ai_array_get_byte_size>:
 8006fac:	b1e1      	cbz	r1, 8006fe8 <ai_array_get_byte_size+0x3c>
 8006fae:	11c3      	asrs	r3, r0, #7
 8006fb0:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8006fb4:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8006fb8:	b410      	push	{r4}
 8006fba:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8006fbe:	2804      	cmp	r0, #4
 8006fc0:	fb01 f104 	mul.w	r1, r1, r4
 8006fc4:	f101 0107 	add.w	r1, r1, #7
 8006fc8:	f021 0107 	bic.w	r1, r1, #7
 8006fcc:	fa21 f102 	lsr.w	r1, r1, r2
 8006fd0:	d00c      	beq.n	8006fec <ai_array_get_byte_size+0x40>
 8006fd2:	2808      	cmp	r0, #8
 8006fd4:	d103      	bne.n	8006fde <ai_array_get_byte_size+0x32>
 8006fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fda:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006fde:	3107      	adds	r1, #7
 8006fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fe4:	08c8      	lsrs	r0, r1, #3
 8006fe6:	4770      	bx	lr
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4770      	bx	lr
 8006fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ff4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006ff8:	3107      	adds	r1, #7
 8006ffa:	08c8      	lsrs	r0, r1, #3
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <ai_array_get_data_byte_size>:
 8007000:	b161      	cbz	r1, 800701c <ai_array_get_data_byte_size+0x1c>
 8007002:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007006:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800700a:	fb01 f103 	mul.w	r1, r1, r3
 800700e:	3107      	adds	r1, #7
 8007010:	f021 0107 	bic.w	r1, r1, #7
 8007014:	40c1      	lsrs	r1, r0
 8007016:	3107      	adds	r1, #7
 8007018:	08c8      	lsrs	r0, r1, #3
 800701a:	4770      	bx	lr
 800701c:	4608      	mov	r0, r1
 800701e:	4770      	bx	lr

08007020 <__errno>:
 8007020:	4b01      	ldr	r3, [pc, #4]	; (8007028 <__errno+0x8>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20002d9c 	.word	0x20002d9c

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4d0d      	ldr	r5, [pc, #52]	; (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <__libc_init_array+0x3c>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2600      	movs	r6, #0
 8007038:	42a6      	cmp	r6, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4d0b      	ldr	r5, [pc, #44]	; (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	; (8007070 <__libc_init_array+0x44>)
 8007040:	f000 f962 	bl	8007308 <_init>
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2600      	movs	r6, #0
 800704a:	42a6      	cmp	r6, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f855 3b04 	ldr.w	r3, [r5], #4
 8007054:	4798      	blx	r3
 8007056:	3601      	adds	r6, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f855 3b04 	ldr.w	r3, [r5], #4
 800705e:	4798      	blx	r3
 8007060:	3601      	adds	r6, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	08022c28 	.word	0x08022c28
 8007068:	08022c28 	.word	0x08022c28
 800706c:	08022c28 	.word	0x08022c28
 8007070:	08022c2c 	.word	0x08022c2c

08007074 <memcpy>:
 8007074:	440a      	add	r2, r1
 8007076:	4291      	cmp	r1, r2
 8007078:	f100 33ff 	add.w	r3, r0, #4294967295
 800707c:	d100      	bne.n	8007080 <memcpy+0xc>
 800707e:	4770      	bx	lr
 8007080:	b510      	push	{r4, lr}
 8007082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708a:	4291      	cmp	r1, r2
 800708c:	d1f9      	bne.n	8007082 <memcpy+0xe>
 800708e:	bd10      	pop	{r4, pc}

08007090 <memset>:
 8007090:	4402      	add	r2, r0
 8007092:	4603      	mov	r3, r0
 8007094:	4293      	cmp	r3, r2
 8007096:	d100      	bne.n	800709a <memset+0xa>
 8007098:	4770      	bx	lr
 800709a:	f803 1b01 	strb.w	r1, [r3], #1
 800709e:	e7f9      	b.n	8007094 <memset+0x4>

080070a0 <expf>:
 80070a0:	b508      	push	{r3, lr}
 80070a2:	ed2d 8b02 	vpush	{d8}
 80070a6:	eef0 8a40 	vmov.f32	s17, s0
 80070aa:	f000 f82f 	bl	800710c <__ieee754_expf>
 80070ae:	eeb0 8a40 	vmov.f32	s16, s0
 80070b2:	eeb0 0a68 	vmov.f32	s0, s17
 80070b6:	f000 f919 	bl	80072ec <finitef>
 80070ba:	b160      	cbz	r0, 80070d6 <expf+0x36>
 80070bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80070fc <expf+0x5c>
 80070c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	dd0a      	ble.n	80070e0 <expf+0x40>
 80070ca:	f7ff ffa9 	bl	8007020 <__errno>
 80070ce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007100 <expf+0x60>
 80070d2:	2322      	movs	r3, #34	; 0x22
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	eeb0 0a48 	vmov.f32	s0, s16
 80070da:	ecbd 8b02 	vpop	{d8}
 80070de:	bd08      	pop	{r3, pc}
 80070e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007104 <expf+0x64>
 80070e4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80070e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ec:	d5f3      	bpl.n	80070d6 <expf+0x36>
 80070ee:	f7ff ff97 	bl	8007020 <__errno>
 80070f2:	2322      	movs	r3, #34	; 0x22
 80070f4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007108 <expf+0x68>
 80070f8:	6003      	str	r3, [r0, #0]
 80070fa:	e7ec      	b.n	80070d6 <expf+0x36>
 80070fc:	42b17180 	.word	0x42b17180
 8007100:	7f800000 	.word	0x7f800000
 8007104:	c2cff1b5 	.word	0xc2cff1b5
 8007108:	00000000 	.word	0x00000000

0800710c <__ieee754_expf>:
 800710c:	ee10 2a10 	vmov	r2, s0
 8007110:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007118:	d902      	bls.n	8007120 <__ieee754_expf+0x14>
 800711a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800711e:	4770      	bx	lr
 8007120:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007124:	d106      	bne.n	8007134 <__ieee754_expf+0x28>
 8007126:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007260 <__ieee754_expf+0x154>
 800712a:	2b00      	cmp	r3, #0
 800712c:	bf18      	it	ne
 800712e:	eeb0 0a67 	vmovne.f32	s0, s15
 8007132:	4770      	bx	lr
 8007134:	484b      	ldr	r0, [pc, #300]	; (8007264 <__ieee754_expf+0x158>)
 8007136:	4282      	cmp	r2, r0
 8007138:	dd02      	ble.n	8007140 <__ieee754_expf+0x34>
 800713a:	2000      	movs	r0, #0
 800713c:	f000 b8d0 	b.w	80072e0 <__math_oflowf>
 8007140:	2a00      	cmp	r2, #0
 8007142:	da05      	bge.n	8007150 <__ieee754_expf+0x44>
 8007144:	4a48      	ldr	r2, [pc, #288]	; (8007268 <__ieee754_expf+0x15c>)
 8007146:	4291      	cmp	r1, r2
 8007148:	d902      	bls.n	8007150 <__ieee754_expf+0x44>
 800714a:	2000      	movs	r0, #0
 800714c:	f000 b8c2 	b.w	80072d4 <__math_uflowf>
 8007150:	4a46      	ldr	r2, [pc, #280]	; (800726c <__ieee754_expf+0x160>)
 8007152:	4291      	cmp	r1, r2
 8007154:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007158:	d952      	bls.n	8007200 <__ieee754_expf+0xf4>
 800715a:	4a45      	ldr	r2, [pc, #276]	; (8007270 <__ieee754_expf+0x164>)
 800715c:	4291      	cmp	r1, r2
 800715e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007162:	d834      	bhi.n	80071ce <__ieee754_expf+0xc2>
 8007164:	4943      	ldr	r1, [pc, #268]	; (8007274 <__ieee754_expf+0x168>)
 8007166:	4411      	add	r1, r2
 8007168:	ed91 7a00 	vldr	s14, [r1]
 800716c:	4942      	ldr	r1, [pc, #264]	; (8007278 <__ieee754_expf+0x16c>)
 800716e:	440a      	add	r2, r1
 8007170:	edd2 7a00 	vldr	s15, [r2]
 8007174:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007178:	f1c3 0201 	rsb	r2, r3, #1
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007182:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007186:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800727c <__ieee754_expf+0x170>
 800718a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007280 <__ieee754_expf+0x174>
 800718e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007192:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007284 <__ieee754_expf+0x178>
 8007196:	eea6 5a86 	vfma.f32	s10, s13, s12
 800719a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007288 <__ieee754_expf+0x17c>
 800719e:	eee5 6a06 	vfma.f32	s13, s10, s12
 80071a2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800728c <__ieee754_expf+0x180>
 80071a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80071aa:	eef0 6a40 	vmov.f32	s13, s0
 80071ae:	eee5 6a46 	vfms.f32	s13, s10, s12
 80071b2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80071b6:	ee20 5a26 	vmul.f32	s10, s0, s13
 80071ba:	bb92      	cbnz	r2, 8007222 <__ieee754_expf+0x116>
 80071bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80071c0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80071c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80071c8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80071cc:	4770      	bx	lr
 80071ce:	4b30      	ldr	r3, [pc, #192]	; (8007290 <__ieee754_expf+0x184>)
 80071d0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007294 <__ieee754_expf+0x188>
 80071d4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007298 <__ieee754_expf+0x18c>
 80071d8:	4413      	add	r3, r2
 80071da:	edd3 7a00 	vldr	s15, [r3]
 80071de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80071e2:	eeb0 7a40 	vmov.f32	s14, s0
 80071e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071ea:	ee17 2a90 	vmov	r2, s15
 80071ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071f2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80071f6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800729c <__ieee754_expf+0x190>
 80071fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071fe:	e7be      	b.n	800717e <__ieee754_expf+0x72>
 8007200:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8007204:	d20b      	bcs.n	800721e <__ieee754_expf+0x112>
 8007206:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072a0 <__ieee754_expf+0x194>
 800720a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800720e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007216:	dd02      	ble.n	800721e <__ieee754_expf+0x112>
 8007218:	ee30 0a25 	vadd.f32	s0, s0, s11
 800721c:	4770      	bx	lr
 800721e:	2200      	movs	r2, #0
 8007220:	e7af      	b.n	8007182 <__ieee754_expf+0x76>
 8007222:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007226:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800722a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800722e:	bfb8      	it	lt
 8007230:	3264      	addlt	r2, #100	; 0x64
 8007232:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007236:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800723a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800723e:	ee17 3a90 	vmov	r3, s15
 8007242:	bfab      	itete	ge
 8007244:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007248:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800724c:	ee00 3a10 	vmovge	s0, r3
 8007250:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80072a4 <__ieee754_expf+0x198>
 8007254:	bfbc      	itt	lt
 8007256:	ee00 3a10 	vmovlt	s0, r3
 800725a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800725e:	4770      	bx	lr
 8007260:	00000000 	.word	0x00000000
 8007264:	42b17217 	.word	0x42b17217
 8007268:	42cff1b5 	.word	0x42cff1b5
 800726c:	3eb17218 	.word	0x3eb17218
 8007270:	3f851591 	.word	0x3f851591
 8007274:	08022c10 	.word	0x08022c10
 8007278:	08022c18 	.word	0x08022c18
 800727c:	3331bb4c 	.word	0x3331bb4c
 8007280:	b5ddea0e 	.word	0xb5ddea0e
 8007284:	388ab355 	.word	0x388ab355
 8007288:	bb360b61 	.word	0xbb360b61
 800728c:	3e2aaaab 	.word	0x3e2aaaab
 8007290:	08022c08 	.word	0x08022c08
 8007294:	3fb8aa3b 	.word	0x3fb8aa3b
 8007298:	3f317180 	.word	0x3f317180
 800729c:	3717f7d1 	.word	0x3717f7d1
 80072a0:	7149f2ca 	.word	0x7149f2ca
 80072a4:	0d800000 	.word	0x0d800000

080072a8 <with_errnof>:
 80072a8:	b513      	push	{r0, r1, r4, lr}
 80072aa:	4604      	mov	r4, r0
 80072ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80072b0:	f7ff feb6 	bl	8007020 <__errno>
 80072b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80072b8:	6004      	str	r4, [r0, #0]
 80072ba:	b002      	add	sp, #8
 80072bc:	bd10      	pop	{r4, pc}

080072be <xflowf>:
 80072be:	b130      	cbz	r0, 80072ce <xflowf+0x10>
 80072c0:	eef1 7a40 	vneg.f32	s15, s0
 80072c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80072c8:	2022      	movs	r0, #34	; 0x22
 80072ca:	f7ff bfed 	b.w	80072a8 <with_errnof>
 80072ce:	eef0 7a40 	vmov.f32	s15, s0
 80072d2:	e7f7      	b.n	80072c4 <xflowf+0x6>

080072d4 <__math_uflowf>:
 80072d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072dc <__math_uflowf+0x8>
 80072d8:	f7ff bff1 	b.w	80072be <xflowf>
 80072dc:	10000000 	.word	0x10000000

080072e0 <__math_oflowf>:
 80072e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072e8 <__math_oflowf+0x8>
 80072e4:	f7ff bfeb 	b.w	80072be <xflowf>
 80072e8:	70000000 	.word	0x70000000

080072ec <finitef>:
 80072ec:	b082      	sub	sp, #8
 80072ee:	ed8d 0a01 	vstr	s0, [sp, #4]
 80072f2:	9801      	ldr	r0, [sp, #4]
 80072f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80072f8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80072fc:	bfac      	ite	ge
 80072fe:	2000      	movge	r0, #0
 8007300:	2001      	movlt	r0, #1
 8007302:	b002      	add	sp, #8
 8007304:	4770      	bx	lr
	...

08007308 <_init>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr

08007314 <_fini>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr
